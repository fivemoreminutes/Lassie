{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12","program":"C:\\Users\\tcorb\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","num_traits","C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1392e23a63e92fb0","-C","extra-filename=-1392e23a63e92fb0","--out-dir","c:\\Users\\tcorb\\Documents\\Lassie\\Code\\Lassie\\lassie\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\tcorb\\Documents\\Lassie\\Code\\Lassie\\lassie\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","has_i128","--cfg","has_to_int_unchecked","--error-format=json","--sysroot","C:\\Users\\tcorb\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\tcorb\\Documents\\Lassie\\Code\\Lassie\\lassie\\target\\rls\\debug\\deps\\libnum_traits-1392e23a63e92fb0.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[1603147187894690136,2017601559064367667]},"crate_root":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src","external_crates":[{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[18042673982934947978,12625110394568559395]}},{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7915187584390589076,11757046858262610570]}},{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[1324407439594145559,13485846882990707907]}}],"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":472,"byte_end":19215,"line_start":11,"line_end":571,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1856},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1523,"byte_end":1526,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1551,"byte_end":1557,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1559,"byte_end":1571,"line_start":44,"line_end":44,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1600,"byte_end":1610,"line_start":45,"line_end":45,"column_start":27,"column_end":37},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1612,"byte_end":1625,"line_start":45,"line_end":45,"column_start":39,"column_end":52},"alias_span":null,"name":"SaturatingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1627,"byte_end":1640,"line_start":45,"line_end":45,"column_start":54,"column_end":67},"alias_span":null,"name":"SaturatingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1642,"byte_end":1655,"line_start":45,"line_end":45,"column_start":69,"column_end":82},"alias_span":null,"name":"SaturatingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1687,"byte_end":1698,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1700,"byte_end":1711,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1713,"byte_end":1724,"line_start":47,"line_end":47,"column_start":31,"column_end":42},"alias_span":null,"name":"WrappingNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1726,"byte_end":1737,"line_start":47,"line_end":47,"column_start":44,"column_end":55},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1739,"byte_end":1750,"line_start":47,"line_end":47,"column_start":57,"column_end":68},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1752,"byte_end":1763,"line_start":47,"line_end":47,"column_start":70,"column_end":81},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1782,"byte_end":1793,"line_start":49,"line_end":49,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1795,"byte_end":1798,"line_start":49,"line_end":49,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1800,"byte_end":1803,"line_start":49,"line_end":49,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":50,"line_end":50,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1826,"byte_end":1833,"line_start":50,"line_end":50,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1835,"byte_end":1841,"line_start":50,"line_end":50,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1843,"byte_end":1849,"line_start":50,"line_end":50,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1851,"byte_end":1859,"line_start":50,"line_end":50,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":472,"byte_end":19215,"line_start":11,"line_end":571,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":50},{"krate":0,"index":57},{"krate":0,"index":61},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":101},{"krate":0,"index":186},{"krate":0,"index":247},{"krate":0,"index":275},{"krate":0,"index":307},{"krate":0,"index":424},{"krate":0,"index":440},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":3914},{"krate":0,"index":3917},{"krate":0,"index":3920},{"krate":0,"index":3923},{"krate":0,"index":3926},{"krate":0,"index":3929},{"krate":0,"index":3932},{"krate":0,"index":3935},{"krate":0,"index":3938},{"krate":0,"index":3941},{"krate":0,"index":3944},{"krate":0,"index":3947},{"krate":0,"index":506},{"krate":0,"index":3950},{"krate":0,"index":3955},{"krate":0,"index":3957},{"krate":0,"index":3959},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":3961},{"krate":0,"index":3967},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"! Numeric traits for generic mathematics","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! ## Compatibility","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":519,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! The `num-traits` crate is tested for rustc 1.8 and greater.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":544,"byte_end":607,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"deny(unconditional_recursion)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":94},{"krate":0,"index":555},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":558},{"krate":0,"index":581},{"krate":0,"index":603},{"krate":0,"index":624},{"krate":0,"index":644},{"krate":0,"index":663},{"krate":0,"index":681},{"krate":0,"index":698},{"krate":0,"index":714},{"krate":0,"index":729},{"krate":0,"index":743},{"krate":0,"index":756},{"krate":0,"index":768},{"krate":0,"index":779},{"krate":0,"index":789},{"krate":0,"index":798},{"krate":0,"index":806},{"krate":0,"index":813},{"krate":0,"index":819},{"krate":0,"index":824},{"krate":0,"index":828},{"krate":0,"index":831}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20696,"byte_end":20703,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper and lower bounds","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20640,"byte_end":20685,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20839,"byte_end":20848,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the smallest finite number this type can represent","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20769,"byte_end":20831,"line_start":11,"line_end":11,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20933,"byte_end":20942,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the largest finite number this type can represent","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":20864,"byte_end":20925,"line_start":13,"line_end":13,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":834},{"krate":0,"index":849},{"krate":0,"index":864},{"krate":0,"index":879},{"krate":0,"index":894},{"krate":0,"index":909},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":924},{"krate":0,"index":939},{"krate":0,"index":954},{"krate":0,"index":969},{"krate":0,"index":984},{"krate":0,"index":999},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":1014},{"krate":0,"index":1065},{"krate":0,"index":149},{"krate":0,"index":164},{"krate":0,"index":1116},{"krate":0,"index":1131},{"krate":0,"index":1146},{"krate":0,"index":1161},{"krate":0,"index":1176},{"krate":0,"index":1191},{"krate":0,"index":1206},{"krate":0,"index":1221},{"krate":0,"index":1236},{"krate":0,"index":1251},{"krate":0,"index":1266},{"krate":0,"index":1281},{"krate":0,"index":1296},{"krate":0,"index":1311},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1375},{"krate":0,"index":1378},{"krate":0,"index":1381},{"krate":0,"index":1384},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":1393},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1682},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24037,"byte_end":24048,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a value to a number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":23971,"byte_end":24026,"line_start":11,"line_end":11,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24207,"byte_end":24215,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `isize`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24055,"byte_end":24125,"line_start":13,"line_end":13,"column_start":5,"column_end":75}},{"value":"/ represented by an `isize`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24130,"byte_end":24185,"line_start":14,"line_end":14,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24190,"byte_end":24199,"line_start":15,"line_end":15,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24462,"byte_end":24467,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i8`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24316,"byte_end":24383,"line_start":20,"line_end":20,"column_start":5,"column_end":72}},{"value":"/ represented by an `i8`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24388,"byte_end":24440,"line_start":21,"line_end":21,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24445,"byte_end":24454,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24710,"byte_end":24716,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i16`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24562,"byte_end":24630,"line_start":27,"line_end":27,"column_start":5,"column_end":73}},{"value":"/ represented by an `i16`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24635,"byte_end":24688,"line_start":28,"line_end":28,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24693,"byte_end":24702,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24961,"byte_end":24967,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i32`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24813,"byte_end":24881,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/ represented by an `i32`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24886,"byte_end":24939,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":24944,"byte_end":24953,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25198,"byte_end":25204,"line_start":43,"line_end":43,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i64`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25064,"byte_end":25132,"line_start":41,"line_end":41,"column_start":5,"column_end":73}},{"value":"/ represented by an `i64`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25137,"byte_end":25190,"line_start":42,"line_end":42,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25721,"byte_end":25728,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i128`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25233,"byte_end":25302,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/ represented by an `i128` (`i64` under the default implementation), then","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25307,"byte_end":25382,"line_start":46,"line_end":46,"column_start":5,"column_end":80}},{"value":"/ `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25387,"byte_end":25410,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25415,"byte_end":25418,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25423,"byte_end":25501,"line_start":49,"line_end":49,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25506,"byte_end":25509,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_i64()`. Types implementing","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25514,"byte_end":25592,"line_start":51,"line_end":51,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25597,"byte_end":25678,"line_start":52,"line_end":52,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25683,"byte_end":25692,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25697,"byte_end":25713,"line_start":54,"line_end":54,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25953,"byte_end":25961,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `usize`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25803,"byte_end":25872,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/ represented by a `usize`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25877,"byte_end":25931,"line_start":60,"line_end":60,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":25936,"byte_end":25945,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26206,"byte_end":26211,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u8`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26062,"byte_end":26128,"line_start":66,"line_end":66,"column_start":5,"column_end":71}},{"value":"/ represented by a `u8`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26133,"byte_end":26184,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26189,"byte_end":26198,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26452,"byte_end":26458,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u16`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26306,"byte_end":26373,"line_start":73,"line_end":73,"column_start":5,"column_end":72}},{"value":"/ represented by a `u16`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26378,"byte_end":26430,"line_start":74,"line_end":74,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26435,"byte_end":26444,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26701,"byte_end":26707,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u32`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26555,"byte_end":26622,"line_start":80,"line_end":80,"column_start":5,"column_end":72}},{"value":"/ represented by a `u32`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26627,"byte_end":26679,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26684,"byte_end":26693,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26936,"byte_end":26942,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u64`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26804,"byte_end":26871,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ represented by a `u64`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26876,"byte_end":26928,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27458,"byte_end":27465,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u128`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":26971,"byte_end":27039,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ represented by a `u128` (`u64` under the default implementation), then","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27044,"byte_end":27118,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/ `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27123,"byte_end":27146,"line_start":93,"line_end":93,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27151,"byte_end":27154,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27159,"byte_end":27237,"line_start":95,"line_end":95,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27242,"byte_end":27245,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_u64()`.  Types implementing","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27250,"byte_end":27329,"line_start":97,"line_end":97,"column_start":5,"column_end":84}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27334,"byte_end":27415,"line_start":98,"line_end":98,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27420,"byte_end":27429,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27434,"byte_end":27450,"line_start":100,"line_end":100,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27688,"byte_end":27694,"line_start":108,"line_end":108,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. If the value cannot be\n represented by an `f32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f32`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27540,"byte_end":27608,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ represented by an `f32`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27613,"byte_end":27666,"line_start":106,"line_end":106,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27671,"byte_end":27680,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27939,"byte_end":27945,"line_start":115,"line_end":115,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. If the value cannot be\n represented by an `f64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f64`. If the value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27791,"byte_end":27859,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ represented by an `f64`, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27864,"byte_end":27917,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":27922,"byte_end":27931,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36930,"byte_end":36943,"line_start":395,"line_end":395,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a number to a value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36864,"byte_end":36919,"line_start":394,"line_end":394,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37126,"byte_end":37136,"line_start":399,"line_end":399,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `isize` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36957,"byte_end":37029,"line_start":396,"line_end":396,"column_start":5,"column_end":77}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37034,"byte_end":37104,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37109,"byte_end":37118,"line_start":398,"line_end":398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37395,"byte_end":37402,"line_start":406,"line_end":406,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i8` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37229,"byte_end":37298,"line_start":403,"line_end":403,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37303,"byte_end":37373,"line_start":404,"line_end":404,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37378,"byte_end":37387,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37653,"byte_end":37661,"line_start":413,"line_end":413,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i16` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37486,"byte_end":37556,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37561,"byte_end":37631,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37636,"byte_end":37645,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37913,"byte_end":37921,"line_start":420,"line_end":420,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i32` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37746,"byte_end":37816,"line_start":417,"line_end":417,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37821,"byte_end":37891,"line_start":418,"line_end":418,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":37896,"byte_end":37905,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38159,"byte_end":38167,"line_start":426,"line_end":426,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i64` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38006,"byte_end":38076,"line_start":424,"line_end":424,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38081,"byte_end":38151,"line_start":425,"line_end":425,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38657,"byte_end":38666,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `i128` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38198,"byte_end":38269,"line_start":428,"line_end":428,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38274,"byte_end":38344,"line_start":429,"line_end":429,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38349,"byte_end":38352,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38357,"byte_end":38435,"line_start":431,"line_end":431,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38440,"byte_end":38443,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_i64()`. Types implementing","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38448,"byte_end":38528,"line_start":433,"line_end":433,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38533,"byte_end":38614,"line_start":434,"line_end":434,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38619,"byte_end":38628,"line_start":435,"line_end":435,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38633,"byte_end":38649,"line_start":436,"line_end":436,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38926,"byte_end":38936,"line_start":444,"line_end":444,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `usize` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38758,"byte_end":38829,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38834,"byte_end":38904,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":38909,"byte_end":38918,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39195,"byte_end":39202,"line_start":451,"line_end":451,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u8` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39029,"byte_end":39098,"line_start":448,"line_end":448,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39103,"byte_end":39173,"line_start":449,"line_end":449,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39178,"byte_end":39187,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39453,"byte_end":39461,"line_start":458,"line_end":458,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u16` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39286,"byte_end":39356,"line_start":455,"line_end":455,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39361,"byte_end":39431,"line_start":456,"line_end":456,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39436,"byte_end":39445,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39713,"byte_end":39721,"line_start":465,"line_end":465,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u32` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39546,"byte_end":39616,"line_start":462,"line_end":462,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39621,"byte_end":39691,"line_start":463,"line_end":463,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39696,"byte_end":39705,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39959,"byte_end":39967,"line_start":471,"line_end":471,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u64` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39806,"byte_end":39876,"line_start":469,"line_end":469,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39881,"byte_end":39951,"line_start":470,"line_end":470,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40457,"byte_end":40466,"line_start":482,"line_end":482,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `u128` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":39998,"byte_end":40069,"line_start":473,"line_end":473,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40074,"byte_end":40144,"line_start":474,"line_end":474,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40149,"byte_end":40152,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40157,"byte_end":40235,"line_start":476,"line_end":476,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40240,"byte_end":40243,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_u64()`. Types implementing","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40248,"byte_end":40328,"line_start":478,"line_end":478,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40333,"byte_end":40414,"line_start":479,"line_end":479,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40419,"byte_end":40428,"line_start":480,"line_end":480,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40433,"byte_end":40449,"line_start":481,"line_end":481,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40724,"byte_end":40732,"line_start":489,"line_end":489,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f32` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40558,"byte_end":40627,"line_start":486,"line_end":486,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40632,"byte_end":40702,"line_start":487,"line_end":487,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40707,"byte_end":40716,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40983,"byte_end":40991,"line_start":496,"line_end":496,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f64` to return an optional value of this type. If the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40817,"byte_end":40886,"line_start":493,"line_end":493,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40891,"byte_end":40961,"line_start":494,"line_end":494,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":40966,"byte_end":40975,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45237,"byte_end":45241,"line_start":666,"line_end":666,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"/ Cast from one machine scalar to another.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45024,"byte_end":45068,"line_start":655,"line_end":655,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45069,"byte_end":45072,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45073,"byte_end":45087,"line_start":657,"line_end":657,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45088,"byte_end":45091,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45092,"byte_end":45099,"line_start":659,"line_end":659,"column_start":1,"column_end":8}},{"value":"/ # use num_traits as num;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45100,"byte_end":45128,"line_start":660,"line_end":660,"column_start":1,"column_end":29}},{"value":"/ let twenty: f32 = num::cast(0x14).unwrap();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45129,"byte_end":45176,"line_start":661,"line_end":661,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(twenty, 20f32);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45177,"byte_end":45207,"line_start":662,"line_end":662,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45208,"byte_end":45215,"line_start":663,"line_end":663,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45216,"byte_end":45219,"line_start":664,"line_end":664,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45220,"byte_end":45229,"line_start":665,"line_end":665,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45375,"byte_end":45382,"line_start":671,"line_end":671,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":175}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[{"value":"/ An interface for casting between machine scalars.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45311,"byte_end":45364,"line_start":670,"line_end":670,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45628,"byte_end":45632,"line_start":675,"line_end":675,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Creates a number from another value that can be converted into","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45410,"byte_end":45476,"line_start":672,"line_end":672,"column_start":5,"column_end":71}},{"value":"/ a primitive via the `ToPrimitive` trait. If the source value cannot be","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45481,"byte_end":45555,"line_start":673,"line_end":673,"column_start":5,"column_end":79}},{"value":"/ represented by the target type, then `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45560,"byte_end":45620,"line_start":674,"line_end":674,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47768,"byte_end":47779,"line_start":750,"line_end":750,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":184}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[{"value":"/ A generic interface for casting between machine scalars with the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46660,"byte_end":46728,"line_start":715,"line_end":715,"column_start":1,"column_end":69}},{"value":"/ `as` operator, which admits narrowing and precision loss.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46729,"byte_end":46790,"line_start":716,"line_end":716,"column_start":1,"column_end":62}},{"value":"/ Implementers of this trait `AsPrimitive` should behave like a primitive","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46791,"byte_end":46866,"line_start":717,"line_end":717,"column_start":1,"column_end":76}},{"value":"/ numeric type (e.g. a newtype around another primitive), and the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46867,"byte_end":46934,"line_start":718,"line_end":718,"column_start":1,"column_end":68}},{"value":"/ intended conversion must never fail.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46935,"byte_end":46975,"line_start":719,"line_end":719,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46976,"byte_end":46979,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46980,"byte_end":46994,"line_start":721,"line_end":721,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46995,"byte_end":46998,"line_start":722,"line_end":722,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46999,"byte_end":47006,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47007,"byte_end":47041,"line_start":724,"line_end":724,"column_start":1,"column_end":35}},{"value":"/ let three: i32 = (3.14159265f32).as_();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47042,"byte_end":47085,"line_start":725,"line_end":725,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(three, 3);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47086,"byte_end":47111,"line_start":726,"line_end":726,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47112,"byte_end":47119,"line_start":727,"line_end":727,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47120,"byte_end":47123,"line_start":728,"line_end":728,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47124,"byte_end":47136,"line_start":729,"line_end":729,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47137,"byte_end":47140,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ Currently, some uses of the `as` operator are not entirely safe.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47141,"byte_end":47209,"line_start":731,"line_end":731,"column_start":1,"column_end":69}},{"value":"/ In particular, it is undefined behavior if:","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47210,"byte_end":47257,"line_start":732,"line_end":732,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47258,"byte_end":47261,"line_start":733,"line_end":733,"column_start":1,"column_end":4}},{"value":"/ - A truncated floating point value cannot fit in the target integer","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47262,"byte_end":47333,"line_start":734,"line_end":734,"column_start":1,"column_end":72}},{"value":"/   type ([#10184](https://github.com/rust-lang/rust/issues/10184));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47334,"byte_end":47404,"line_start":735,"line_end":735,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47405,"byte_end":47408,"line_start":736,"line_end":736,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47409,"byte_end":47422,"line_start":737,"line_end":737,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47423,"byte_end":47457,"line_start":738,"line_end":738,"column_start":1,"column_end":35}},{"value":"/ let x: u8 = (1.04E+17).as_(); // UB","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47458,"byte_end":47497,"line_start":739,"line_end":739,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47498,"byte_end":47505,"line_start":740,"line_end":740,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47506,"byte_end":47509,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ - Or a floating point value does not fit in another floating","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47510,"byte_end":47574,"line_start":742,"line_end":742,"column_start":1,"column_end":65}},{"value":"/   point type ([#15536](https://github.com/rust-lang/rust/issues/15536)).","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47575,"byte_end":47651,"line_start":743,"line_end":743,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47652,"byte_end":47655,"line_start":744,"line_end":744,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47656,"byte_end":47669,"line_start":745,"line_end":745,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47670,"byte_end":47704,"line_start":746,"line_end":746,"column_start":1,"column_end":35}},{"value":"/ let x: f32 = (1e300f64).as_(); // UB","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47705,"byte_end":47745,"line_start":747,"line_end":747,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47746,"byte_end":47753,"line_start":748,"line_end":748,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47754,"byte_end":47757,"line_start":749,"line_end":749,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47898,"byte_end":47901,"line_start":755,"line_end":755,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[{"value":"/ Convert a value to another, using the `as` operator.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47834,"byte_end":47890,"line_start":754,"line_end":754,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":229},{"krate":0,"index":237},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":1856},{"krate":0,"index":1876},{"krate":0,"index":1896}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":199},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49627,"byte_end":49636,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[{"value":"/ Generic trait for floating point numbers that works with `no_std`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49485,"byte_end":49555,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49556,"byte_end":49559,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait implements a subset of the `Float` trait.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49560,"byte_end":49616,"line_start":15,"line_end":15,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50033,"byte_end":50041,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[{"value":"/ Returns positive infinity.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49699,"byte_end":49729,"line_start":17,"line_end":17,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49734,"byte_end":49737,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49742,"byte_end":49756,"line_start":19,"line_end":19,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49761,"byte_end":49764,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49769,"byte_end":49776,"line_start":21,"line_end":21,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49781,"byte_end":49818,"line_start":22,"line_end":22,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49823,"byte_end":49847,"line_start":23,"line_end":23,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49852,"byte_end":49855,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49860,"byte_end":49894,"line_start":25,"line_end":25,"column_start":5,"column_end":39}},{"value":"/     assert!(T::infinity() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49899,"byte_end":49935,"line_start":26,"line_end":26,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49940,"byte_end":49945,"line_start":27,"line_end":27,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49950,"byte_end":49953,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49958,"byte_end":49983,"line_start":29,"line_end":29,"column_start":5,"column_end":30}},{"value":"/ check(f64::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49988,"byte_end":50013,"line_start":30,"line_end":30,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50018,"byte_end":50025,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50404,"byte_end":50416,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[{"value":"/ Returns negative infinity.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50058,"byte_end":50088,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50093,"byte_end":50096,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50101,"byte_end":50115,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50120,"byte_end":50123,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50128,"byte_end":50135,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50140,"byte_end":50177,"line_start":39,"line_end":39,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50182,"byte_end":50206,"line_start":40,"line_end":40,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50211,"byte_end":50214,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50219,"byte_end":50253,"line_start":42,"line_end":42,"column_start":5,"column_end":39}},{"value":"/     assert!(T::neg_infinity() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50258,"byte_end":50298,"line_start":43,"line_end":43,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50303,"byte_end":50308,"line_start":44,"line_end":44,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50313,"byte_end":50316,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50321,"byte_end":50350,"line_start":46,"line_end":46,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50355,"byte_end":50384,"line_start":47,"line_end":47,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50389,"byte_end":50396,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50726,"byte_end":50729,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[{"value":"/ Returns NaN.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50433,"byte_end":50449,"line_start":51,"line_end":51,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50454,"byte_end":50457,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50462,"byte_end":50476,"line_start":53,"line_end":53,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50481,"byte_end":50484,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50489,"byte_end":50496,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50501,"byte_end":50538,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50543,"byte_end":50546,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>() {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50551,"byte_end":50581,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/     let n = T::nan();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50586,"byte_end":50611,"line_start":59,"line_end":59,"column_start":5,"column_end":30}},{"value":"/     assert!(n != n);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50616,"byte_end":50640,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50645,"byte_end":50650,"line_start":61,"line_end":61,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50655,"byte_end":50658,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ check::<f32>();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50663,"byte_end":50682,"line_start":63,"line_end":63,"column_start":5,"column_end":24}},{"value":"/ check::<f64>();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50687,"byte_end":50706,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50711,"byte_end":50718,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51145,"byte_end":51153,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[{"value":"/ Returns `-0.0`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50746,"byte_end":50765,"line_start":68,"line_end":68,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50770,"byte_end":50773,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50778,"byte_end":50792,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50797,"byte_end":50800,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50805,"byte_end":50812,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50817,"byte_end":50854,"line_start":73,"line_end":73,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50859,"byte_end":50883,"line_start":74,"line_end":74,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50888,"byte_end":50891,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(n: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50896,"byte_end":50930,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/     let z = T::neg_zero();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50935,"byte_end":50965,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/     assert!(z.is_zero());","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":50970,"byte_end":50999,"line_start":78,"line_end":78,"column_start":5,"column_end":34}},{"value":"/     assert!(T::one() / z == n);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51004,"byte_end":51039,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51044,"byte_end":51049,"line_start":80,"line_end":80,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51054,"byte_end":51057,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51062,"byte_end":51091,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51096,"byte_end":51125,"line_start":83,"line_end":83,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51130,"byte_end":51137,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51532,"byte_end":51541,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest finite value that this type can represent.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51170,"byte_end":51237,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51242,"byte_end":51245,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51250,"byte_end":51264,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51269,"byte_end":51272,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51277,"byte_end":51284,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51289,"byte_end":51326,"line_start":92,"line_end":92,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51331,"byte_end":51355,"line_start":93,"line_end":93,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51360,"byte_end":51363,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51368,"byte_end":51402,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_value() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51407,"byte_end":51444,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51449,"byte_end":51454,"line_start":97,"line_end":97,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51459,"byte_end":51462,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51467,"byte_end":51487,"line_start":99,"line_end":99,"column_start":5,"column_end":25}},{"value":"/ check(f64::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51492,"byte_end":51512,"line_start":100,"line_end":100,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51517,"byte_end":51524,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51961,"byte_end":51979,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest positive, normalized value that this type can represent.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51558,"byte_end":51639,"line_start":104,"line_end":104,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51644,"byte_end":51647,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51652,"byte_end":51666,"line_start":106,"line_end":106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51671,"byte_end":51674,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51679,"byte_end":51686,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51691,"byte_end":51728,"line_start":109,"line_end":109,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51733,"byte_end":51757,"line_start":110,"line_end":110,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51762,"byte_end":51765,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51770,"byte_end":51804,"line_start":112,"line_end":112,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_positive_value() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51809,"byte_end":51855,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51860,"byte_end":51865,"line_start":114,"line_end":114,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51870,"byte_end":51873,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN_POSITIVE);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51878,"byte_end":51907,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/ check(f64::MIN_POSITIVE);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51912,"byte_end":51941,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51946,"byte_end":51953,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52341,"byte_end":52348,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[{"value":"/ Returns epsilon, a small positive value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":51996,"byte_end":52040,"line_start":121,"line_end":121,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52045,"byte_end":52048,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52053,"byte_end":52067,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52072,"byte_end":52075,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52080,"byte_end":52087,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52092,"byte_end":52129,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52134,"byte_end":52158,"line_start":127,"line_end":127,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52163,"byte_end":52166,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52171,"byte_end":52205,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     assert!(T::epsilon() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52210,"byte_end":52245,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52250,"byte_end":52255,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52260,"byte_end":52263,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ check(f32::EPSILON);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52268,"byte_end":52292,"line_start":133,"line_end":133,"column_start":5,"column_end":29}},{"value":"/ check(f64::EPSILON);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52297,"byte_end":52321,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52326,"byte_end":52333,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52726,"byte_end":52735,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the largest finite value that this type can represent.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52365,"byte_end":52431,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52436,"byte_end":52439,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52444,"byte_end":52458,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52463,"byte_end":52466,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52471,"byte_end":52478,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52483,"byte_end":52520,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52525,"byte_end":52549,"line_start":144,"line_end":144,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52554,"byte_end":52557,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52562,"byte_end":52596,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/     assert!(T::max_value() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52601,"byte_end":52638,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52643,"byte_end":52648,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52653,"byte_end":52656,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52661,"byte_end":52681,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ check(f64::MAX);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52686,"byte_end":52706,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52711,"byte_end":52718,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53185,"byte_end":53191,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is NaN.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52752,"byte_end":52792,"line_start":155,"line_end":155,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52797,"byte_end":52800,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52805,"byte_end":52819,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52824,"byte_end":52827,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52832,"byte_end":52839,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52844,"byte_end":52881,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52886,"byte_end":52910,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52915,"byte_end":52918,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52923,"byte_end":52966,"line_start":163,"line_end":163,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_nan() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":52971,"byte_end":53004,"line_start":164,"line_end":164,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53009,"byte_end":53014,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53019,"byte_end":53022,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ check(f32::NAN, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53027,"byte_end":53053,"line_start":167,"line_end":167,"column_start":5,"column_end":31}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53058,"byte_end":53090,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/ check(f64::NAN, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53095,"byte_end":53121,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ check(0.0f64, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53126,"byte_end":53151,"line_start":170,"line_end":170,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53156,"byte_end":53163,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53168,"byte_end":53177,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53768,"byte_end":53779,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is infinite.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53240,"byte_end":53285,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53290,"byte_end":53293,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53298,"byte_end":53312,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53317,"byte_end":53320,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53325,"byte_end":53332,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53337,"byte_end":53374,"line_start":182,"line_end":182,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53379,"byte_end":53403,"line_start":183,"line_end":183,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53408,"byte_end":53411,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53416,"byte_end":53459,"line_start":185,"line_end":185,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_infinite() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53464,"byte_end":53502,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53507,"byte_end":53512,"line_start":187,"line_end":187,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53517,"byte_end":53520,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53525,"byte_end":53556,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ check(f32::NEG_INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53561,"byte_end":53596,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ check(f32::NAN, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53601,"byte_end":53628,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ check(f64::INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53633,"byte_end":53664,"line_start":192,"line_end":192,"column_start":5,"column_end":36}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53669,"byte_end":53704,"line_start":193,"line_end":193,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53709,"byte_end":53734,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53739,"byte_end":53746,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53751,"byte_end":53760,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54380,"byte_end":54389,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither infinite or NaN.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53872,"byte_end":53932,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53937,"byte_end":53940,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53945,"byte_end":53959,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53964,"byte_end":53967,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53972,"byte_end":53979,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":53984,"byte_end":54021,"line_start":206,"line_end":206,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54026,"byte_end":54050,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54055,"byte_end":54058,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54063,"byte_end":54106,"line_start":209,"line_end":209,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_finite() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54111,"byte_end":54147,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54152,"byte_end":54157,"line_start":211,"line_end":211,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54162,"byte_end":54165,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54170,"byte_end":54202,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54207,"byte_end":54233,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54238,"byte_end":54274,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54279,"byte_end":54314,"line_start":216,"line_end":216,"column_start":5,"column_end":40}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54319,"byte_end":54346,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54351,"byte_end":54358,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54363,"byte_end":54372,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54987,"byte_end":54996,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal or NaN.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54464,"byte_end":54541,"line_start":224,"line_end":224,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54546,"byte_end":54549,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54554,"byte_end":54568,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54573,"byte_end":54576,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54581,"byte_end":54588,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54593,"byte_end":54630,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54635,"byte_end":54659,"line_start":230,"line_end":230,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54664,"byte_end":54667,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54672,"byte_end":54715,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_normal() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54720,"byte_end":54756,"line_start":233,"line_end":233,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54761,"byte_end":54766,"line_start":234,"line_end":234,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54771,"byte_end":54774,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54779,"byte_end":54811,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54816,"byte_end":54842,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54847,"byte_end":54883,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54888,"byte_end":54923,"line_start":239,"line_end":239,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54928,"byte_end":54953,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54958,"byte_end":54965,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":54970,"byte_end":54979,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55835,"byte_end":55843,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55070,"byte_end":55145,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55150,"byte_end":55219,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ predicate instead.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55224,"byte_end":55246,"line_start":249,"line_end":249,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55251,"byte_end":55254,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55259,"byte_end":55273,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55278,"byte_end":55281,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55286,"byte_end":55293,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55298,"byte_end":55335,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55340,"byte_end":55364,"line_start":255,"line_end":255,"column_start":5,"column_end":29}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55369,"byte_end":55398,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55403,"byte_end":55406,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, c: FpCategory) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55411,"byte_end":55460,"line_start":258,"line_end":258,"column_start":5,"column_end":54}},{"value":"/     assert!(x.classify() == c);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55465,"byte_end":55500,"line_start":259,"line_end":259,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55505,"byte_end":55510,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55515,"byte_end":55518,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, FpCategory::Infinite);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55523,"byte_end":55570,"line_start":262,"line_end":262,"column_start":5,"column_end":52}},{"value":"/ check(f32::MAX, FpCategory::Normal);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55575,"byte_end":55615,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/ check(f64::NAN, FpCategory::Nan);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55620,"byte_end":55657,"line_start":264,"line_end":264,"column_start":5,"column_end":42}},{"value":"/ check(f64::MIN_POSITIVE, FpCategory::Normal);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55662,"byte_end":55711,"line_start":265,"line_end":265,"column_start":5,"column_end":54}},{"value":"/ check(f64::MIN_POSITIVE / 2.0, FpCategory::Subnormal);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55716,"byte_end":55774,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"/ check(0.0f64, FpCategory::Zero);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55779,"byte_end":55815,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55820,"byte_end":55827,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56476,"byte_end":56481,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55870,"byte_end":55933,"line_start":271,"line_end":271,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55938,"byte_end":55941,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55946,"byte_end":55960,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55965,"byte_end":55968,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55973,"byte_end":55980,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":55985,"byte_end":56022,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56027,"byte_end":56051,"line_start":277,"line_end":277,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56056,"byte_end":56059,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56064,"byte_end":56104,"line_start":279,"line_end":279,"column_start":5,"column_end":45}},{"value":"/     assert!(x.floor() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56109,"byte_end":56141,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56146,"byte_end":56151,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56156,"byte_end":56159,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56164,"byte_end":56204,"line_start":283,"line_end":283,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56209,"byte_end":56232,"line_start":284,"line_end":284,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56237,"byte_end":56260,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56265,"byte_end":56288,"line_start":286,"line_end":286,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56293,"byte_end":56317,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56322,"byte_end":56347,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56352,"byte_end":56377,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56382,"byte_end":56407,"line_start":290,"line_end":290,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56412,"byte_end":56442,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56447,"byte_end":56454,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56459,"byte_end":56468,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57327,"byte_end":57331,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56718,"byte_end":56785,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56790,"byte_end":56793,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56798,"byte_end":56812,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56817,"byte_end":56820,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56825,"byte_end":56832,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56837,"byte_end":56874,"line_start":310,"line_end":310,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56879,"byte_end":56903,"line_start":311,"line_end":311,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56908,"byte_end":56911,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56916,"byte_end":56956,"line_start":313,"line_end":313,"column_start":5,"column_end":45}},{"value":"/     assert!(x.ceil() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56961,"byte_end":56992,"line_start":314,"line_end":314,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":56997,"byte_end":57002,"line_start":315,"line_end":315,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57007,"byte_end":57010,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57015,"byte_end":57055,"line_start":317,"line_end":317,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57060,"byte_end":57083,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57088,"byte_end":57111,"line_start":319,"line_end":319,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57116,"byte_end":57139,"line_start":320,"line_end":320,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57144,"byte_end":57168,"line_start":321,"line_end":321,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57173,"byte_end":57198,"line_start":322,"line_end":322,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57203,"byte_end":57228,"line_start":323,"line_end":323,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57233,"byte_end":57258,"line_start":324,"line_end":324,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57263,"byte_end":57293,"line_start":325,"line_end":325,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57298,"byte_end":57305,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57310,"byte_end":57319,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58163,"byte_end":58168,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"/ Returns the nearest integer to a number. Round half-way cases away from `0.0`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57568,"byte_end":57650,"line_start":339,"line_end":339,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57655,"byte_end":57658,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57663,"byte_end":57677,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57682,"byte_end":57685,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57690,"byte_end":57697,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57702,"byte_end":57739,"line_start":344,"line_end":344,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57744,"byte_end":57768,"line_start":345,"line_end":345,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57773,"byte_end":57776,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57781,"byte_end":57821,"line_start":347,"line_end":347,"column_start":5,"column_end":45}},{"value":"/     assert!(x.round() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57826,"byte_end":57858,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57863,"byte_end":57868,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57873,"byte_end":57876,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57881,"byte_end":57921,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ check(0.4f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57926,"byte_end":57949,"line_start":352,"line_end":352,"column_start":5,"column_end":28}},{"value":"/ check(0.5f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57954,"byte_end":57977,"line_start":353,"line_end":353,"column_start":5,"column_end":28}},{"value":"/ check(0.6f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":57982,"byte_end":58005,"line_start":354,"line_end":354,"column_start":5,"column_end":28}},{"value":"/ check(-0.4f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58010,"byte_end":58034,"line_start":355,"line_end":355,"column_start":5,"column_end":29}},{"value":"/ check(-0.5f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58039,"byte_end":58064,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ check(-0.6f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58069,"byte_end":58094,"line_start":357,"line_end":357,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58099,"byte_end":58129,"line_start":358,"line_end":358,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58134,"byte_end":58141,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58146,"byte_end":58155,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59259,"byte_end":59264,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"/ Return the integer part of a number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58676,"byte_end":58716,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58721,"byte_end":58724,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58729,"byte_end":58743,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58748,"byte_end":58751,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58756,"byte_end":58763,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58768,"byte_end":58805,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58810,"byte_end":58834,"line_start":388,"line_end":388,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58839,"byte_end":58842,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58847,"byte_end":58887,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/     assert!(x.trunc() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58892,"byte_end":58924,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58929,"byte_end":58934,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58939,"byte_end":58942,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58947,"byte_end":58987,"line_start":394,"line_end":394,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":58992,"byte_end":59015,"line_start":395,"line_end":395,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59020,"byte_end":59043,"line_start":396,"line_end":396,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59048,"byte_end":59071,"line_start":397,"line_end":397,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59076,"byte_end":59100,"line_start":398,"line_end":398,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59105,"byte_end":59130,"line_start":399,"line_end":399,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59135,"byte_end":59160,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59165,"byte_end":59190,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59195,"byte_end":59225,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59230,"byte_end":59237,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59242,"byte_end":59251,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59985,"byte_end":59990,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"/ Returns the fractional part of a number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59411,"byte_end":59455,"line_start":414,"line_end":414,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59460,"byte_end":59463,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59468,"byte_end":59482,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59487,"byte_end":59490,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59495,"byte_end":59502,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59507,"byte_end":59544,"line_start":419,"line_end":419,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59549,"byte_end":59573,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59578,"byte_end":59581,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59586,"byte_end":59626,"line_start":422,"line_end":422,"column_start":5,"column_end":45}},{"value":"/     assert!(x.fract() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59631,"byte_end":59663,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59668,"byte_end":59673,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59678,"byte_end":59681,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59686,"byte_end":59711,"line_start":426,"line_end":426,"column_start":5,"column_end":30}},{"value":"/ check(0.75f32, 0.75);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59716,"byte_end":59741,"line_start":427,"line_end":427,"column_start":5,"column_end":30}},{"value":"/ check(1.0f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59746,"byte_end":59769,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/ check(1.25f32, 0.25);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59774,"byte_end":59799,"line_start":429,"line_end":429,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59804,"byte_end":59828,"line_start":430,"line_end":430,"column_start":5,"column_end":29}},{"value":"/ check(-0.75f64, -0.75);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59833,"byte_end":59860,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/ check(-1.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59865,"byte_end":59889,"line_start":432,"line_end":432,"column_start":5,"column_end":29}},{"value":"/ check(-1.25f64, -0.25);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59894,"byte_end":59921,"line_start":433,"line_end":433,"column_start":5,"column_end":32}},{"value":"/ check(f64::MIN, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59926,"byte_end":59951,"line_start":434,"line_end":434,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59956,"byte_end":59963,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":59968,"byte_end":59977,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60695,"byte_end":60698,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`. Returns `FloatCore::nan()` if the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60129,"byte_end":60205,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"/ number is `FloatCore::nan()`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60210,"byte_end":60243,"line_start":446,"line_end":446,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60248,"byte_end":60251,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60256,"byte_end":60270,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60275,"byte_end":60278,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60283,"byte_end":60290,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60295,"byte_end":60332,"line_start":451,"line_end":451,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60337,"byte_end":60361,"line_start":452,"line_end":452,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60366,"byte_end":60369,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60374,"byte_end":60414,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/     assert!(x.abs() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60419,"byte_end":60449,"line_start":455,"line_end":455,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60454,"byte_end":60459,"line_start":456,"line_end":456,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60464,"byte_end":60467,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60472,"byte_end":60512,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60517,"byte_end":60540,"line_start":459,"line_end":459,"column_start":5,"column_end":28}},{"value":"/ check(0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60545,"byte_end":60568,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60573,"byte_end":60597,"line_start":461,"line_end":461,"column_start":5,"column_end":29}},{"value":"/ check(-1.0f64, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60602,"byte_end":60626,"line_start":462,"line_end":462,"column_start":5,"column_end":29}},{"value":"/ check(f64::MIN, f64::MAX);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60631,"byte_end":60661,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60666,"byte_end":60673,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60678,"byte_end":60687,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61622,"byte_end":61628,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60891,"byte_end":60947,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60952,"byte_end":60955,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `FloatCore::infinity()`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":60960,"byte_end":61032,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `FloatCore::neg_infinity()`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61037,"byte_end":61114,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"/ - `FloatCore::nan()` if the number is `FloatCore::nan()`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61119,"byte_end":61179,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61184,"byte_end":61187,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61192,"byte_end":61206,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61211,"byte_end":61214,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61219,"byte_end":61226,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61231,"byte_end":61268,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61273,"byte_end":61297,"line_start":486,"line_end":486,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61302,"byte_end":61305,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61310,"byte_end":61350,"line_start":488,"line_end":488,"column_start":5,"column_end":45}},{"value":"/     assert!(x.signum() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61355,"byte_end":61388,"line_start":489,"line_end":489,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61393,"byte_end":61398,"line_start":490,"line_end":490,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61403,"byte_end":61406,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61411,"byte_end":61441,"line_start":492,"line_end":492,"column_start":5,"column_end":35}},{"value":"/ check(3.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61446,"byte_end":61469,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/ check(0.0f32, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61474,"byte_end":61497,"line_start":494,"line_end":494,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61502,"byte_end":61527,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ check(-3.0f64, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61532,"byte_end":61557,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61562,"byte_end":61588,"line_start":497,"line_end":497,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61593,"byte_end":61600,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61605,"byte_end":61614,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62490,"byte_end":62506,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive, including `+0.0` and","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61827,"byte_end":61889,"line_start":510,"line_end":510,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::infinity()`, and since Rust 1.20 also","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61894,"byte_end":61947,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ `FloatCore::nan()`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61952,"byte_end":61975,"line_start":512,"line_end":512,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61980,"byte_end":61983,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":61988,"byte_end":62002,"line_start":514,"line_end":514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62007,"byte_end":62010,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62015,"byte_end":62022,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62027,"byte_end":62064,"line_start":517,"line_end":517,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62069,"byte_end":62093,"line_start":518,"line_end":518,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62098,"byte_end":62101,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62106,"byte_end":62149,"line_start":520,"line_end":520,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_positive() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62154,"byte_end":62197,"line_start":521,"line_end":521,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62202,"byte_end":62207,"line_start":522,"line_end":522,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62212,"byte_end":62215,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62220,"byte_end":62251,"line_start":524,"line_end":524,"column_start":5,"column_end":36}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62256,"byte_end":62282,"line_start":525,"line_end":525,"column_start":5,"column_end":31}},{"value":"/ check(0.0f32, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62287,"byte_end":62311,"line_start":526,"line_end":526,"column_start":5,"column_end":29}},{"value":"/ check(-0.0f64, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62316,"byte_end":62342,"line_start":527,"line_end":527,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62347,"byte_end":62383,"line_start":528,"line_end":528,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62388,"byte_end":62423,"line_start":529,"line_end":529,"column_start":5,"column_end":40}},{"value":"/ check(-f64::NAN, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62428,"byte_end":62456,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62461,"byte_end":62468,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62473,"byte_end":62482,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63236,"byte_end":63252,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative, including `-0.0` and","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62567,"byte_end":62629,"line_start":537,"line_end":537,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::neg_infinity()`, and since Rust 1.20 also","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62634,"byte_end":62691,"line_start":538,"line_end":538,"column_start":5,"column_end":62}},{"value":"/ `-FloatCore::nan()`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62696,"byte_end":62720,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62725,"byte_end":62728,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62733,"byte_end":62747,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62752,"byte_end":62755,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62760,"byte_end":62767,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62772,"byte_end":62809,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62814,"byte_end":62838,"line_start":545,"line_end":545,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62843,"byte_end":62846,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62851,"byte_end":62894,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_negative() == p);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62899,"byte_end":62942,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62947,"byte_end":62952,"line_start":549,"line_end":549,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62957,"byte_end":62960,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":62965,"byte_end":62997,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63002,"byte_end":63029,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ check(0.0f32, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63034,"byte_end":63059,"line_start":553,"line_end":553,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63064,"byte_end":63089,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63094,"byte_end":63129,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ check(f64::MIN_POSITIVE, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63134,"byte_end":63170,"line_start":556,"line_end":556,"column_start":5,"column_end":41}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63175,"byte_end":63202,"line_start":557,"line_end":557,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63207,"byte_end":63214,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63219,"byte_end":63228,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63885,"byte_end":63888,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63347,"byte_end":63390,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63395,"byte_end":63398,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63403,"byte_end":63475,"line_start":567,"line_end":567,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63480,"byte_end":63483,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63488,"byte_end":63502,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63507,"byte_end":63510,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63515,"byte_end":63522,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63527,"byte_end":63564,"line_start":572,"line_end":572,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63569,"byte_end":63593,"line_start":573,"line_end":573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63598,"byte_end":63601,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63606,"byte_end":63654,"line_start":575,"line_end":575,"column_start":5,"column_end":53}},{"value":"/     assert!(x.min(y) == min);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63659,"byte_end":63692,"line_start":576,"line_end":576,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63697,"byte_end":63702,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63707,"byte_end":63710,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63715,"byte_end":63743,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ check(f32::NAN, 2.0, 2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63748,"byte_end":63778,"line_start":580,"line_end":580,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, -2.0, -2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63783,"byte_end":63813,"line_start":581,"line_end":581,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, f64::NAN, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63818,"byte_end":63851,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63856,"byte_end":63863,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":63868,"byte_end":63877,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64685,"byte_end":64688,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64143,"byte_end":64186,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64191,"byte_end":64194,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64199,"byte_end":64271,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64276,"byte_end":64279,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64284,"byte_end":64298,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64303,"byte_end":64306,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64311,"byte_end":64318,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64323,"byte_end":64360,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64365,"byte_end":64389,"line_start":607,"line_end":607,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64394,"byte_end":64397,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, max: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64402,"byte_end":64450,"line_start":609,"line_end":609,"column_start":5,"column_end":53}},{"value":"/     assert!(x.max(y) == max);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64455,"byte_end":64488,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64493,"byte_end":64498,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64503,"byte_end":64506,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64511,"byte_end":64539,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/ check(1.0f32, f32::NAN, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64544,"byte_end":64577,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/ check(-1.0f64, 2.0, 2.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64582,"byte_end":64611,"line_start":615,"line_end":615,"column_start":5,"column_end":34}},{"value":"/ check(-1.0f64, f64::NAN, -1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64616,"byte_end":64651,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64656,"byte_end":64663,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64668,"byte_end":64677,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65443,"byte_end":65448,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"/ Returns the reciprocal (multiplicative inverse) of the number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":64943,"byte_end":65009,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65014,"byte_end":65017,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65022,"byte_end":65036,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65041,"byte_end":65044,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65049,"byte_end":65056,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65061,"byte_end":65098,"line_start":638,"line_end":638,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65103,"byte_end":65127,"line_start":639,"line_end":639,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65132,"byte_end":65135,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65140,"byte_end":65180,"line_start":641,"line_end":641,"column_start":5,"column_end":45}},{"value":"/     assert!(x.recip() == y);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65185,"byte_end":65217,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"/     assert!(y.recip() == x);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65222,"byte_end":65254,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65259,"byte_end":65264,"line_start":644,"line_end":644,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65269,"byte_end":65272,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65277,"byte_end":65307,"line_start":646,"line_end":646,"column_start":5,"column_end":35}},{"value":"/ check(2.0f32, 0.5);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65312,"byte_end":65335,"line_start":647,"line_end":647,"column_start":5,"column_end":28}},{"value":"/ check(-0.25f64, -4.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65340,"byte_end":65366,"line_start":648,"line_end":648,"column_start":5,"column_end":31}},{"value":"/ check(-0.0f64, f64::NEG_INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65371,"byte_end":65409,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65414,"byte_end":65421,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65426,"byte_end":65435,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66042,"byte_end":66046,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"/ Raise a number to an integer power.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65503,"byte_end":65542,"line_start":656,"line_end":656,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65547,"byte_end":65550,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Using this function is generally faster than using `powf`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65555,"byte_end":65616,"line_start":658,"line_end":658,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65621,"byte_end":65624,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65629,"byte_end":65643,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65648,"byte_end":65651,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65656,"byte_end":65663,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65668,"byte_end":65705,"line_start":663,"line_end":663,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65710,"byte_end":65713,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, exp: i32, powi: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65718,"byte_end":65771,"line_start":665,"line_end":665,"column_start":5,"column_end":58}},{"value":"/     assert!(x.powi(exp) == powi);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65776,"byte_end":65813,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65818,"byte_end":65823,"line_start":667,"line_end":667,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65828,"byte_end":65831,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ check(9.0f32, 2, 81.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65836,"byte_end":65863,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/ check(1.0f32, -2, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65868,"byte_end":65895,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ check(10.0f64, 20, 1e20);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65900,"byte_end":65929,"line_start":671,"line_end":671,"column_start":5,"column_end":34}},{"value":"/ check(4.0f64, -2, 0.0625);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65934,"byte_end":65964,"line_start":672,"line_end":672,"column_start":5,"column_end":35}},{"value":"/ check(-1.0f64, std::i32::MIN, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":65969,"byte_end":66008,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66013,"byte_end":66020,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66025,"byte_end":66034,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66963,"byte_end":66973,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[{"value":"/ Converts to degrees, assuming the number is in radians.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66488,"byte_end":66547,"line_start":687,"line_end":687,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66552,"byte_end":66555,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66560,"byte_end":66574,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66579,"byte_end":66582,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66587,"byte_end":66594,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66599,"byte_end":66636,"line_start":692,"line_end":692,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66641,"byte_end":66665,"line_start":693,"line_end":693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66670,"byte_end":66673,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(rad: T, deg: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66678,"byte_end":66722,"line_start":695,"line_end":695,"column_start":5,"column_end":49}},{"value":"/     assert!(rad.to_degrees() == deg);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66727,"byte_end":66768,"line_start":696,"line_end":696,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66773,"byte_end":66778,"line_start":697,"line_end":697,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66783,"byte_end":66786,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66791,"byte_end":66814,"line_start":699,"line_end":699,"column_start":5,"column_end":28}},{"value":"/ check(f32::consts::PI, 180.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66819,"byte_end":66853,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ check(f64::consts::FRAC_PI_4, 45.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66858,"byte_end":66898,"line_start":701,"line_end":701,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66903,"byte_end":66943,"line_start":702,"line_end":702,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66948,"byte_end":66955,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67469,"byte_end":67479,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[{"value":"/ Converts to radians, assuming the number is in degrees.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":66994,"byte_end":67053,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67058,"byte_end":67061,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67066,"byte_end":67080,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67085,"byte_end":67088,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67093,"byte_end":67100,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67105,"byte_end":67142,"line_start":711,"line_end":711,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67147,"byte_end":67171,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67176,"byte_end":67179,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(deg: T, rad: T) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67184,"byte_end":67228,"line_start":714,"line_end":714,"column_start":5,"column_end":49}},{"value":"/     assert!(deg.to_radians() == rad);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67233,"byte_end":67274,"line_start":715,"line_end":715,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67279,"byte_end":67284,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67289,"byte_end":67292,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67297,"byte_end":67320,"line_start":718,"line_end":718,"column_start":5,"column_end":28}},{"value":"/ check(180.0, f32::consts::PI);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67325,"byte_end":67359,"line_start":719,"line_end":719,"column_start":5,"column_end":39}},{"value":"/ check(45.0, f64::consts::FRAC_PI_4);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67364,"byte_end":67404,"line_start":720,"line_end":720,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67409,"byte_end":67449,"line_start":721,"line_end":721,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67454,"byte_end":67461,"line_start":722,"line_end":722,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68238,"byte_end":68252,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":199},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[{"value":"/ Returns the mantissa, base 2 exponent, and sign as integers, respectively.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67500,"byte_end":67578,"line_start":725,"line_end":725,"column_start":5,"column_end":83}},{"value":"/ The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67583,"byte_end":67660,"line_start":726,"line_end":726,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67665,"byte_end":67668,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67673,"byte_end":67687,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67692,"byte_end":67695,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67700,"byte_end":67707,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67712,"byte_end":67749,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67754,"byte_end":67778,"line_start":732,"line_end":732,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67783,"byte_end":67786,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, m: u64, e: i16, s:i8) {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67791,"byte_end":67847,"line_start":734,"line_end":734,"column_start":5,"column_end":61}},{"value":"/     let (mantissa, exponent, sign) = x.integer_decode();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67852,"byte_end":67912,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(mantissa, m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67917,"byte_end":67949,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(exponent, e);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67954,"byte_end":67986,"line_start":737,"line_end":737,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(sign, s);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":67991,"byte_end":68019,"line_start":738,"line_end":738,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68024,"byte_end":68029,"line_start":739,"line_end":739,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68034,"byte_end":68037,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ check(2.0f32, 1 << 23, -22, 1);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68042,"byte_end":68077,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ check(-2.0f32, 1 << 23, -22, -1);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68082,"byte_end":68119,"line_start":742,"line_end":742,"column_start":5,"column_end":42}},{"value":"/ check(f32::INFINITY, 1 << 23, 105, 1);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68124,"byte_end":68166,"line_start":743,"line_end":743,"column_start":5,"column_end":47}},{"value":"/ check(f64::NEG_INFINITY, 1 << 52, 972, -1);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68171,"byte_end":68218,"line_start":744,"line_end":744,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":68223,"byte_end":68230,"line_start":745,"line_end":745,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":108939,"byte_end":108940,"line_start":2283,"line_end":2283,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":108980,"byte_end":108989,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109036,"byte_end":109049,"line_start":2287,"line_end":2287,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109089,"byte_end":109098,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109144,"byte_end":109158,"line_start":2291,"line_end":2291,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109198,"byte_end":109207,"line_start":2293,"line_end":2293,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109247,"byte_end":109256,"line_start":2295,"line_end":2295,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109296,"byte_end":109305,"line_start":2297,"line_end":2297,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109345,"byte_end":109354,"line_start":2299,"line_end":2299,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109394,"byte_end":109403,"line_start":2301,"line_end":2301,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109443,"byte_end":109448,"line_start":2303,"line_end":2303,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109487,"byte_end":109491,"line_start":2305,"line_end":2305,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109531,"byte_end":109538,"line_start":2307,"line_end":2307,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109577,"byte_end":109583,"line_start":2309,"line_end":2309,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109640,"byte_end":109642,"line_start":2311,"line_end":2311,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":109683,"byte_end":109689,"line_start":2313,"line_end":2313,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"fn () -> Self","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":257},{"krate":0,"index":262},{"krate":0,"index":266},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":1979},{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":273}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":252},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112219,"byte_end":112223,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines an additive identity element for `Self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112044,"byte_end":112096,"line_start":4,"line_end":4,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112097,"byte_end":112100,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112101,"byte_end":112111,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112112,"byte_end":112115,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112116,"byte_end":112130,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ a + 0 = a       ∀ a ∈ Self","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112131,"byte_end":112165,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/ 0 + a = a       ∀ a ∈ Self","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112166,"byte_end":112200,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112201,"byte_end":112208,"line_start":11,"line_end":11,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112593,"byte_end":112597,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[{"value":"/ Returns the additive identity element of `Self`, `0`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112264,"byte_end":112321,"line_start":13,"line_end":13,"column_start":5,"column_end":62}},{"value":"/ # Purity","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112326,"byte_end":112338,"line_start":14,"line_end":14,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112343,"byte_end":112346,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112351,"byte_end":112425,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112430,"byte_end":112496,"line_start":17,"line_end":17,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112501,"byte_end":112519,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112686,"byte_end":112694,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the additive identity element of `Self`, `0`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112614,"byte_end":112678,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112820,"byte_end":112827,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":252},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the additive identity.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112749,"byte_end":112812,"line_start":27,"line_end":27,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113914,"byte_end":113917,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines a multiplicative identity element for `Self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113734,"byte_end":113791,"line_start":82,"line_end":82,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113792,"byte_end":113795,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113796,"byte_end":113806,"line_start":84,"line_end":84,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113807,"byte_end":113810,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113811,"byte_end":113825,"line_start":86,"line_end":86,"column_start":1,"column_end":15}},{"value":"/ a * 1 = a       ∀ a ∈ Self","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113826,"byte_end":113860,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ 1 * a = a       ∀ a ∈ Self","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113861,"byte_end":113895,"line_start":88,"line_end":88,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113896,"byte_end":113903,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114301,"byte_end":114304,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity element of `Self`, `1`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113958,"byte_end":114021,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114026,"byte_end":114029,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114034,"byte_end":114046,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114051,"byte_end":114054,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114059,"byte_end":114133,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114138,"byte_end":114204,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114209,"byte_end":114227,"line_start":97,"line_end":97,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114399,"byte_end":114406,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the multiplicative identity element of `Self`, `1`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114321,"byte_end":114391,"line_start":101,"line_end":101,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114751,"byte_end":114757,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":262},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the multiplicative identity.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114459,"byte_end":114528,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114533,"byte_end":114536,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For performance reasons, it's best to implement this manually.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114541,"byte_end":114607,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ After a semver bump, this method will be required, and the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114612,"byte_end":114674,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ `where Self: PartialEq` bound will be removed.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114679,"byte_end":114729,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":114734,"byte_end":114743,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115780,"byte_end":115784,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, `0`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115715,"byte_end":115754,"line_start":169,"line_end":169,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115755,"byte_end":115772,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115894,"byte_end":115897,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity, `1`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115823,"byte_end":115868,"line_start":175,"line_end":175,"column_start":1,"column_end":46}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115869,"byte_end":115886,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":306},{"krate":0,"index":2000},{"krate":0,"index":2017},{"krate":0,"index":2034},{"krate":0,"index":2051},{"krate":0,"index":2068},{"krate":0,"index":2085},{"krate":0,"index":2102},{"krate":0,"index":2119},{"krate":0,"index":2136},{"krate":0,"index":2153},{"krate":0,"index":2170},{"krate":0,"index":2187}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118469,"byte_end":118476,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq +\nNot<Output = Self> + BitAnd<Output = Self> + BitOr<Output = Self> +\nBitXor<Output = Self> + Shl<usize, Output = Self> +\nShr<usize, Output = Self> + CheckedAdd<Output = Self> +\nCheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[{"value":"/ Generic trait for primitive integers.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":116813,"byte_end":116854,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":116855,"byte_end":116858,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `PrimInt` trait is an abstraction over the builtin primitive integer types (e.g., `u8`,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":116859,"byte_end":116954,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ `u32`, `isize`, `i128`, ...). It inherits the basic numeric traits and extends them with","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":116955,"byte_end":117047,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ bitwise operators and non-wrapping arithmetic.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117048,"byte_end":117098,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117099,"byte_end":117102,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The trait explicitly inherits `Copy`, `Eq`, `Ord`, and `Sized`. The intention is that all","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117103,"byte_end":117196,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ types implementing this trait behave like primitive types that are passed by value by default","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117197,"byte_end":117294,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ and behave like builtin integers. Furthermore, the types are expected to expose the integer","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117295,"byte_end":117390,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ value in binary representation and support bitwise operators. The standard bitwise operations","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117391,"byte_end":117488,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ (e.g., bitwise-and, bitwise-or, right-shift, left-shift) are inherited and the trait extends","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117489,"byte_end":117585,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ these with introspective queries (e.g., `PrimInt::count_ones()`, `PrimInt::leading_zeros()`),","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117586,"byte_end":117683,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ bitwise combinators (e.g., `PrimInt::rotate_left()`), and endianness converters (e.g.,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117684,"byte_end":117774,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ `PrimInt::to_be()`).","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117775,"byte_end":117799,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117800,"byte_end":117803,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All `PrimInt` types are expected to be fixed-width binary integers. The width can be queried","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117804,"byte_end":117900,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ via `T::zero().count_zeros()`. The trait currently lacks a way to query the width at","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117901,"byte_end":117989,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ compile-time.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":117990,"byte_end":118007,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118008,"byte_end":118011,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ While a default implementation for all builtin primitive integers is provided, the trait is in","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118012,"byte_end":118110,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ no way restricted to these. Other integer types that fulfil the requirements are free to","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118111,"byte_end":118203,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/ implement the trait was well.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118204,"byte_end":118237,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118238,"byte_end":118241,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait and many of the method names originate in the unstable `core::num::Int` trait from","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118242,"byte_end":118339,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ the rust standard library. The original trait was never stabilized and thus removed from the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118340,"byte_end":118436,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ standard library.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118437,"byte_end":118458,"line_start":33,"line_end":33,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119151,"byte_end":119161,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118896,"byte_end":118966,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118971,"byte_end":118974,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118979,"byte_end":118993,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118998,"byte_end":119001,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119006,"byte_end":119013,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119018,"byte_end":119046,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119051,"byte_end":119054,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119059,"byte_end":119084,"line_start":62,"line_end":62,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119089,"byte_end":119092,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_ones(), 3);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119097,"byte_end":119131,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119136,"byte_end":119143,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119438,"byte_end":119449,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119181,"byte_end":119252,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119257,"byte_end":119260,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119265,"byte_end":119279,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119284,"byte_end":119287,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119292,"byte_end":119299,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119304,"byte_end":119332,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119337,"byte_end":119340,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119345,"byte_end":119370,"line_start":75,"line_end":75,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119375,"byte_end":119378,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_zeros(), 5);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119383,"byte_end":119418,"line_start":77,"line_end":77,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119423,"byte_end":119430,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119745,"byte_end":119758,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119469,"byte_end":119537,"line_start":81,"line_end":81,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119542,"byte_end":119556,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119561,"byte_end":119564,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119569,"byte_end":119583,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119588,"byte_end":119591,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119596,"byte_end":119603,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119608,"byte_end":119636,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119641,"byte_end":119644,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119649,"byte_end":119674,"line_start":89,"line_end":89,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119679,"byte_end":119682,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_zeros(), 10);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119687,"byte_end":119725,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119730,"byte_end":119737,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120055,"byte_end":120069,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119778,"byte_end":119847,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119852,"byte_end":119866,"line_start":96,"line_end":96,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119871,"byte_end":119874,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119879,"byte_end":119893,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119898,"byte_end":119901,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119906,"byte_end":119913,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119918,"byte_end":119946,"line_start":101,"line_end":101,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119951,"byte_end":119954,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119959,"byte_end":119984,"line_start":103,"line_end":103,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119989,"byte_end":119992,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_zeros(), 3);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":119997,"byte_end":120035,"line_start":105,"line_end":105,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120040,"byte_end":120047,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120457,"byte_end":120468,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, wrapping","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120089,"byte_end":120157,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/ the truncated bits to the end of the resulting integer.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120162,"byte_end":120221,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120226,"byte_end":120229,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120234,"byte_end":120248,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120253,"byte_end":120256,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120261,"byte_end":120268,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120273,"byte_end":120301,"line_start":115,"line_end":115,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120306,"byte_end":120309,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120314,"byte_end":120348,"line_start":117,"line_end":117,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF012u64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120353,"byte_end":120387,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120392,"byte_end":120395,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_left(12), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120400,"byte_end":120437,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120442,"byte_end":120449,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120873,"byte_end":120885,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, wrapping","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120497,"byte_end":120566,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/ the truncated bits to the beginning of the resulting integer.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120571,"byte_end":120636,"line_start":125,"line_end":125,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120641,"byte_end":120644,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120649,"byte_end":120663,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120668,"byte_end":120671,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120676,"byte_end":120683,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120688,"byte_end":120716,"line_start":130,"line_end":130,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120721,"byte_end":120724,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120729,"byte_end":120763,"line_start":132,"line_end":132,"column_start":5,"column_end":39}},{"value":"/ let m = 0xDEF0123456789ABCu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120768,"byte_end":120802,"line_start":133,"line_end":133,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120807,"byte_end":120810,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_right(12), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120815,"byte_end":120853,"line_start":135,"line_end":135,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120858,"byte_end":120865,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121321,"byte_end":121331,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120914,"byte_end":120981,"line_start":139,"line_end":139,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":120986,"byte_end":121026,"line_start":140,"line_end":140,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121031,"byte_end":121034,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shl`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121039,"byte_end":121086,"line_start":142,"line_end":142,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121091,"byte_end":121094,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121099,"byte_end":121113,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121118,"byte_end":121121,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121126,"byte_end":121133,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121138,"byte_end":121166,"line_start":147,"line_end":147,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121171,"byte_end":121174,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121179,"byte_end":121213,"line_start":149,"line_end":149,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000u64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121218,"byte_end":121252,"line_start":150,"line_end":150,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121257,"byte_end":121260,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shl(12), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121265,"byte_end":121301,"line_start":152,"line_end":152,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121306,"byte_end":121313,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121800,"byte_end":121810,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, copying","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121360,"byte_end":121428,"line_start":156,"line_end":156,"column_start":5,"column_end":73}},{"value":"/ the \"sign bit\" in the most significant bits even for unsigned types.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121433,"byte_end":121505,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121510,"byte_end":121513,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shr`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121518,"byte_end":121565,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121570,"byte_end":121573,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121578,"byte_end":121592,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121597,"byte_end":121600,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121605,"byte_end":121612,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121617,"byte_end":121645,"line_start":164,"line_end":164,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121650,"byte_end":121653,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210u64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121658,"byte_end":121692,"line_start":166,"line_end":166,"column_start":5,"column_end":39}},{"value":"/ let m = 0xFFFFEDCBA9876543u64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121697,"byte_end":121731,"line_start":167,"line_end":167,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121736,"byte_end":121739,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shr(12), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121744,"byte_end":121780,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121785,"byte_end":121792,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122250,"byte_end":122262,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, filling","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121839,"byte_end":121906,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121911,"byte_end":121951,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121956,"byte_end":121959,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shl`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":121964,"byte_end":122013,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122018,"byte_end":122021,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122026,"byte_end":122040,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122045,"byte_end":122048,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122053,"byte_end":122060,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122065,"byte_end":122093,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122098,"byte_end":122101,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFi64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122106,"byte_end":122140,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000i64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122145,"byte_end":122179,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122184,"byte_end":122187,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shl(12), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122192,"byte_end":122230,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122235,"byte_end":122242,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122695,"byte_end":122707,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, filling","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122291,"byte_end":122359,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/ zeros in the most significant bits.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122364,"byte_end":122403,"line_start":191,"line_end":191,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122408,"byte_end":122411,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shr`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122416,"byte_end":122465,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122470,"byte_end":122473,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122478,"byte_end":122492,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122497,"byte_end":122500,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122505,"byte_end":122512,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122517,"byte_end":122545,"line_start":198,"line_end":198,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122550,"byte_end":122553,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let n = -8i8; // 0b11111000","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122558,"byte_end":122589,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/ let m = 62i8; // 0b00111110","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122594,"byte_end":122625,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122630,"byte_end":122633,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shr(2), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122638,"byte_end":122675,"line_start":203,"line_end":203,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122680,"byte_end":122687,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123012,"byte_end":123022,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122736,"byte_end":122779,"line_start":207,"line_end":207,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122784,"byte_end":122787,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122792,"byte_end":122806,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122811,"byte_end":122814,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122819,"byte_end":122826,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122831,"byte_end":122859,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122864,"byte_end":122867,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122872,"byte_end":122906,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ let m = 0xEFCDAB8967452301u64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122911,"byte_end":122945,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122950,"byte_end":122953,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.swap_bytes(), m);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122958,"byte_end":122992,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":122997,"byte_end":123004,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123518,"byte_end":123525,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from big endian to the target's endianness.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123043,"byte_end":123109,"line_start":221,"line_end":221,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123114,"byte_end":123117,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123122,"byte_end":123196,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123201,"byte_end":123204,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123209,"byte_end":123223,"line_start":225,"line_end":225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123228,"byte_end":123231,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123236,"byte_end":123243,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123248,"byte_end":123276,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123281,"byte_end":123284,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123289,"byte_end":123323,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123328,"byte_end":123331,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123336,"byte_end":123372,"line_start":232,"line_end":232,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(u64::from_be(n), n)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123377,"byte_end":123415,"line_start":233,"line_end":233,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123420,"byte_end":123432,"line_start":234,"line_end":234,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_be(n), n.swap_bytes())","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123437,"byte_end":123488,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123493,"byte_end":123498,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123503,"byte_end":123510,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124030,"byte_end":124037,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from little endian to the target's endianness.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123549,"byte_end":123618,"line_start":240,"line_end":240,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123623,"byte_end":123626,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123631,"byte_end":123705,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123710,"byte_end":123713,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123718,"byte_end":123732,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123737,"byte_end":123740,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123745,"byte_end":123752,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123757,"byte_end":123785,"line_start":247,"line_end":247,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123790,"byte_end":123793,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123798,"byte_end":123832,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123837,"byte_end":123840,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123845,"byte_end":123884,"line_start":251,"line_end":251,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(u64::from_le(n), n)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123889,"byte_end":123927,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123932,"byte_end":123944,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_le(n), n.swap_bytes())","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":123949,"byte_end":124000,"line_start":254,"line_end":254,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124005,"byte_end":124010,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124015,"byte_end":124022,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124520,"byte_end":124525,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to big endian from the target's endianness.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124061,"byte_end":124123,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124128,"byte_end":124131,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124136,"byte_end":124210,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124215,"byte_end":124218,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124223,"byte_end":124237,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124242,"byte_end":124245,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124250,"byte_end":124257,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124262,"byte_end":124290,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124295,"byte_end":124298,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124303,"byte_end":124337,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124342,"byte_end":124345,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124350,"byte_end":124386,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(n.to_be(), n)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124391,"byte_end":124423,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124428,"byte_end":124440,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_be(), n.swap_bytes())","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124445,"byte_end":124490,"line_start":273,"line_end":273,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124495,"byte_end":124500,"line_start":274,"line_end":274,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124505,"byte_end":124512,"line_start":275,"line_end":275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125011,"byte_end":125016,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to little endian from the target's endianness.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124546,"byte_end":124611,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124616,"byte_end":124619,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124624,"byte_end":124698,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124703,"byte_end":124706,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124711,"byte_end":124725,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124730,"byte_end":124733,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124738,"byte_end":124745,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124750,"byte_end":124778,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124783,"byte_end":124786,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124791,"byte_end":124825,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124830,"byte_end":124833,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124838,"byte_end":124877,"line_start":289,"line_end":289,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(n.to_le(), n)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124882,"byte_end":124914,"line_start":290,"line_end":290,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124919,"byte_end":124931,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_le(), n.swap_bytes())","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124936,"byte_end":124981,"line_start":292,"line_end":292,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124986,"byte_end":124991,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":124996,"byte_end":125003,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125254,"byte_end":125257,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125037,"byte_end":125109,"line_start":297,"line_end":297,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125114,"byte_end":125117,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125122,"byte_end":125136,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125141,"byte_end":125144,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125149,"byte_end":125156,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125161,"byte_end":125189,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125194,"byte_end":125197,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2i32.pow(4), 16);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125202,"byte_end":125234,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":125239,"byte_end":125246,"line_start":305,"line_end":305,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":336},{"krate":0,"index":354},{"krate":0,"index":366},{"krate":0,"index":382}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":320},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":322},{"krate":0,"index":2252},{"krate":0,"index":2254},{"krate":0,"index":2256},{"krate":0,"index":2258},{"krate":0,"index":2260},{"krate":0,"index":2262},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2274},{"krate":0,"index":324},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":326},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328},{"krate":0,"index":2330},{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":334},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":2384},{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2390},{"krate":0,"index":2392},{"krate":0,"index":2394}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128037,"byte_end":128047,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that returns `None` instead of wrapping around on","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":127941,"byte_end":128012,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128013,"byte_end":128026,"line_start":4,"line_end":4,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128189,"byte_end":128200,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[{"value":"/ Adds two numbers, checking for overflow. If overflow happens, `None` is","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128088,"byte_end":128163,"line_start":6,"line_end":6,"column_start":5,"column_end":80}},{"value":"/ returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128168,"byte_end":128181,"line_start":7,"line_end":7,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129178,"byte_end":129188,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":321}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that returns `None` instead of wrapping around on underflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129082,"byte_end":129167,"line_start":38,"line_end":38,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129337,"byte_end":129348,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[{"value":"/ Subtracts two numbers, checking for underflow. If underflow happens,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129229,"byte_end":129301,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129306,"byte_end":129329,"line_start":41,"line_end":41,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130081,"byte_end":130091,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":323}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that returns `None` instead of wrapping around on underflow or","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129966,"byte_end":130056,"line_start":61,"line_end":61,"column_start":1,"column_end":91}},{"value":"/ overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130057,"byte_end":130070,"line_start":62,"line_end":62,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130265,"byte_end":130276,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Multiplies two numbers, checking for underflow or overflow. If underflow","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130132,"byte_end":130208,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ or overflow happens, `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130213,"byte_end":130257,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131049,"byte_end":131059,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs division that returns `None` instead of panicking on division by zero and instead of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130894,"byte_end":130991,"line_start":85,"line_end":85,"column_start":1,"column_end":98}},{"value":"/ wrapping around on underflow and overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130992,"byte_end":131038,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131239,"byte_end":131250,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Divides two numbers, checking for underflow, overflow and division by","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131100,"byte_end":131173,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ zero. If any of that happens, `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131178,"byte_end":131231,"line_start":89,"line_end":89,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132036,"byte_end":132046,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":327}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs an integral remainder that returns `None` instead of panicking on division by zero and","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131868,"byte_end":131967,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ instead of wrapping around on underflow and overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131968,"byte_end":132025,"line_start":110,"line_end":110,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132840,"byte_end":132851,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[{"value":"/ Finds the remainder of dividing two numbers, checking for underflow, overflow and division","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132087,"byte_end":132181,"line_start":112,"line_end":112,"column_start":5,"column_end":99}},{"value":"/ by zero. If any of that happens, `None` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132186,"byte_end":132242,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132247,"byte_end":132250,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132255,"byte_end":132269,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132274,"byte_end":132277,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132282,"byte_end":132289,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedRem;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132294,"byte_end":132325,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132330,"byte_end":132352,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132357,"byte_end":132360,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &7), Some(3));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132365,"byte_end":132423,"line_start":121,"line_end":121,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &-7), Some(3));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132428,"byte_end":132487,"line_start":122,"line_end":122,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &7), Some(-3));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132492,"byte_end":132552,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &-7), Some(-3));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132557,"byte_end":132618,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132623,"byte_end":132626,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &0), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132631,"byte_end":132686,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132691,"byte_end":132694,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &1), Some(0));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132699,"byte_end":132758,"line_start":128,"line_end":128,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &-1), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132763,"byte_end":132820,"line_start":129,"line_end":129,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132825,"byte_end":132832,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133815,"byte_end":133825,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":330}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[{"value":"/ Performs negation that returns `None` if the result can't be represented.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133727,"byte_end":133804,"line_start":161,"line_end":161,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134475,"byte_end":134486,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[{"value":"/ Negates a number, returning `None` for results that can't be represented, like signed `MIN`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133839,"byte_end":133934,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ values that can't be positive, or non-zero unsigned values that can't be negative.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133939,"byte_end":134025,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134030,"byte_end":134033,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134038,"byte_end":134052,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134057,"byte_end":134060,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134065,"byte_end":134072,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedNeg;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134077,"byte_end":134108,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134113,"byte_end":134135,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134140,"byte_end":134143,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_i32), Some(-1));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134148,"byte_end":134206,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&-1_i32), Some(1));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134211,"byte_end":134269,"line_start":173,"line_end":173,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&MIN), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134274,"byte_end":134326,"line_start":174,"line_end":174,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134331,"byte_end":134334,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&0_u32), Some(0));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134339,"byte_end":134396,"line_start":176,"line_end":176,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_u32), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134401,"byte_end":134455,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":134460,"byte_end":134467,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135264,"byte_end":135274,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":332}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that returns `None` on shifts larger than","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135166,"byte_end":135233,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ the type width.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135234,"byte_end":135253,"line_start":199,"line_end":199,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135833,"byte_end":135844,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":331},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135314,"byte_end":135378,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135383,"byte_end":135452,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135457,"byte_end":135460,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135465,"byte_end":135472,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShl;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135477,"byte_end":135508,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135513,"byte_end":135516,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135521,"byte_end":135545,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135550,"byte_end":135553,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135558,"byte_end":135620,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135625,"byte_end":135687,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135692,"byte_end":135754,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 16), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135759,"byte_end":135813,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135818,"byte_end":135825,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136906,"byte_end":136916,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":335}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that returns `None` on shifts larger than","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136807,"byte_end":136875,"line_start":244,"line_end":244,"column_start":1,"column_end":69}},{"value":"/ the type width.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136876,"byte_end":136895,"line_start":245,"line_end":245,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137476,"byte_end":137487,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136956,"byte_end":137021,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137026,"byte_end":137095,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137100,"byte_end":137103,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137108,"byte_end":137115,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShr;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137120,"byte_end":137151,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137156,"byte_end":137159,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137164,"byte_end":137188,"line_start":253,"line_end":253,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137193,"byte_end":137196,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137201,"byte_end":137263,"line_start":255,"line_end":255,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137268,"byte_end":137330,"line_start":256,"line_end":256,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137335,"byte_end":137397,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 16), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137402,"byte_end":137456,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":137461,"byte_end":137468,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":350}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138276,"byte_end":138279,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[{"value":"/ Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138177,"byte_end":138265,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138339,"byte_end":138345,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138286,"byte_end":138329,"line_start":3,"line_end":3,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138624,"byte_end":138627,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":337},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative inverse of `self`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138352,"byte_end":138401,"line_start":6,"line_end":6,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138406,"byte_end":138409,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138414,"byte_end":138428,"line_start":8,"line_end":8,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138433,"byte_end":138436,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138441,"byte_end":138448,"line_start":10,"line_end":10,"column_start":5,"column_end":12}},{"value":"/ use std::f64::INFINITY;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138453,"byte_end":138480,"line_start":11,"line_end":11,"column_start":5,"column_end":32}},{"value":"/ use num_traits::Inv;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138485,"byte_end":138509,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138514,"byte_end":138517,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.0.inv() * 7.0, 1.0);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138522,"byte_end":138559,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((-0.0).inv(), -INFINITY);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138564,"byte_end":138604,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\inv.rs","byte_start":138609,"byte_end":138616,"line_start":16,"line_end":16,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2414},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2423},{"krate":0,"index":2426},{"krate":0,"index":2429},{"krate":0,"index":365},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2438},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2444},{"krate":0,"index":2446},{"krate":0,"index":2448},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139752,"byte_end":139758,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[{"value":"/ Fused multiply-add. Computes `(self * a) + b` with only one rounding","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139109,"byte_end":139181,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/ error, yielding a more accurate result than an unfused multiply-add.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139182,"byte_end":139254,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139255,"byte_end":139258,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Using `mul_add` can be more performant than an unfused multiply-add if","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139259,"byte_end":139333,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ the target architecture has a dedicated `fma` CPU instruction.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139334,"byte_end":139400,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139401,"byte_end":139404,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Note that `A` and `B` are `Self` by default, but this is not mandatory.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139405,"byte_end":139480,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139481,"byte_end":139484,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139485,"byte_end":139498,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139499,"byte_end":139502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139503,"byte_end":139510,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use std::f32;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139511,"byte_end":139528,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139529,"byte_end":139532,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let m = 10.0_f32;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139533,"byte_end":139554,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ let x = 4.0_f32;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139555,"byte_end":139575,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ let b = 60.0_f32;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139576,"byte_end":139597,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139598,"byte_end":139601,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // 100.0","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139602,"byte_end":139614,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139615,"byte_end":139676,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139677,"byte_end":139680,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ assert!(abs_difference <= 100.0 * f32::EPSILON);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139681,"byte_end":139733,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139734,"byte_end":139741,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139856,"byte_end":139862,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":355},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[{"value":"/ The resulting type after applying the fused multiply-add.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139785,"byte_end":139846,"line_start":24,"line_end":24,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139923,"byte_end":139930,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":355},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139869,"byte_end":139915,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":140028,"byte_end":140040,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":363}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[{"value":"/ The fused multiply-add assignment operation.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":139969,"byte_end":140017,"line_start":31,"line_end":31,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":140121,"byte_end":140135,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mul_add.rs","byte_start":140067,"byte_end":140113,"line_start":33,"line_end":33,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":2456},{"krate":0,"index":2459},{"krate":0,"index":2462},{"krate":0,"index":2465},{"krate":0,"index":2468},{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2477},{"krate":0,"index":2480},{"krate":0,"index":2483},{"krate":0,"index":2486},{"krate":0,"index":2489},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":2492},{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2504},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2514},{"krate":0,"index":378},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2532},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":380},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2556},{"krate":0,"index":2558},{"krate":0,"index":2560},{"krate":0,"index":2562}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143187,"byte_end":143197,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"decl_id":null,"docs":" Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and\n `SaturatingMul` instead.\n","sig":null,"attributes":[{"value":"/ Saturating math operations. Deprecated, use `SaturatingAdd`, `SaturatingSub` and","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143063,"byte_end":143147,"line_start":3,"line_end":3,"column_start":1,"column_end":85}},{"value":"/ `SaturatingMul` instead.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143148,"byte_end":143176,"line_start":4,"line_end":4,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143323,"byte_end":143337,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition operator.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143204,"byte_end":143237,"line_start":6,"line_end":6,"column_start":5,"column_end":38}},{"value":"/ Returns a+b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143242,"byte_end":143315,"line_start":7,"line_end":7,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143489,"byte_end":143503,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":371},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction operator.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143367,"byte_end":143403,"line_start":10,"line_end":10,"column_start":5,"column_end":41}},{"value":"/ Returns a-b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":143408,"byte_end":143481,"line_start":11,"line_end":11,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144464,"byte_end":144477,"line_start":47,"line_end":47,"column_start":11,"column_end":24},"name":"SaturatingAdd","qualname":"::ops::saturating::SaturatingAdd","value":"SaturatingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Performs addition that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs addition that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144371,"byte_end":144453,"line_start":46,"line_end":46,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144644,"byte_end":144658,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::SaturatingAdd::saturating_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":" Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating addition. Computes `self + other`, saturating at the relevant high or low boundary of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144518,"byte_end":144618,"line_start":48,"line_end":48,"column_start":5,"column_end":105}},{"value":"/ the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144623,"byte_end":144636,"line_start":49,"line_end":49,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145472,"byte_end":145485,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SaturatingSub","qualname":"::ops::saturating::SaturatingSub","value":"SaturatingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":379}],"decl_id":null,"docs":" Performs subtraction that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145376,"byte_end":145461,"line_start":69,"line_end":69,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145655,"byte_end":145669,"line_start":73,"line_end":73,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::SaturatingSub::saturating_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":" Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction. Computes `self - other`, saturating at the relevant high or low boundary of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145526,"byte_end":145629,"line_start":71,"line_end":71,"column_start":5,"column_end":108}},{"value":"/ the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145634,"byte_end":145647,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146486,"byte_end":146499,"line_start":93,"line_end":93,"column_start":11,"column_end":24},"name":"SaturatingMul","qualname":"::ops::saturating::SaturatingMul","value":"SaturatingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":381}],"decl_id":null,"docs":" Performs multiplication that saturates at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that saturates at the numeric bounds instead of overflowing.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146387,"byte_end":146475,"line_start":92,"line_end":92,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146672,"byte_end":146686,"line_start":96,"line_end":96,"column_start":8,"column_end":22},"name":"saturating_mul","qualname":"::ops::saturating::SaturatingMul::saturating_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Saturating multiplication. Computes `self * other`, saturating at the relevant high or low boundary of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146540,"byte_end":146646,"line_start":94,"line_end":94,"column_start":5,"column_end":111}},{"value":"/ the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146651,"byte_end":146664,"line_start":95,"line_end":95,"column_start":5,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2586},{"krate":0,"index":394},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2606},{"krate":0,"index":2608},{"krate":0,"index":2610},{"krate":0,"index":396},{"krate":0,"index":2612},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2622},{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2668},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682},{"krate":0,"index":404},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148894,"byte_end":148905,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":393}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that wraps around on overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148831,"byte_end":148883,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149064,"byte_end":149076,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":392},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148946,"byte_end":149038,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/ the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149043,"byte_end":149056,"line_start":26,"line_end":26,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149788,"byte_end":149799,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":395}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that wraps around on overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149722,"byte_end":149777,"line_start":46,"line_end":46,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149961,"byte_end":149973,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149840,"byte_end":149932,"line_start":48,"line_end":48,"column_start":5,"column_end":97}},{"value":"/ of the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149937,"byte_end":149953,"line_start":49,"line_end":49,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":396},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150688,"byte_end":150699,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":397}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that wraps around on overflow.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150619,"byte_end":150677,"line_start":69,"line_end":69,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150864,"byte_end":150876,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":396},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150740,"byte_end":150835,"line_start":71,"line_end":71,"column_start":5,"column_end":100}},{"value":"/ of the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150840,"byte_end":150856,"line_start":72,"line_end":72,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151828,"byte_end":151839,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingNeg","qualname":"::ops::wrapping::WrappingNeg","value":"WrappingNeg: Sized","parent":null,"children":[{"krate":0,"index":400}],"decl_id":null,"docs":" Performs a negation that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a negation that does not panic.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151773,"byte_end":151817,"line_start":103,"line_end":103,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152625,"byte_end":152637,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"wrapping_neg","qualname":"::ops::wrapping::WrappingNeg::wrapping_neg","value":"fn (&self) -> Self","parent":{"krate":0,"index":399},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`,\n wrapping around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) negation. Computes `-self`,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151853,"byte_end":151903,"line_start":105,"line_end":105,"column_start":5,"column_end":55}},{"value":"/ wrapping around at the boundary of the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151908,"byte_end":151956,"line_start":106,"line_end":106,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151961,"byte_end":151964,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Since unsigned types do not have negative equivalents","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151969,"byte_end":152026,"line_start":108,"line_end":108,"column_start":5,"column_end":62}},{"value":"/ all applications of this function will wrap (except for `-0`).","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152031,"byte_end":152097,"line_start":109,"line_end":109,"column_start":5,"column_end":71}},{"value":"/ For values smaller than the corresponding signed type's maximum","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152102,"byte_end":152169,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ the result is the same as casting the corresponding signed value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152174,"byte_end":152243,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ Any larger values are equivalent to `MAX + 1 - (val - MAX - 1)` where","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152248,"byte_end":152321,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ `MAX` is the corresponding signed type's maximum.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152326,"byte_end":152379,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152384,"byte_end":152387,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152392,"byte_end":152399,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingNeg;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152404,"byte_end":152436,"line_start":116,"line_end":116,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152441,"byte_end":152444,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(100i8.wrapping_neg(), -100);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152449,"byte_end":152492,"line_start":118,"line_end":118,"column_start":5,"column_end":48}},{"value":"/ assert_eq!((-100i8).wrapping_neg(), 100);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152497,"byte_end":152542,"line_start":119,"line_end":119,"column_start":5,"column_end":50}},{"value":"/ assert_eq!((-128i8).wrapping_neg(), -128); // wrapped!","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152547,"byte_end":152605,"line_start":120,"line_end":120,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":152610,"byte_end":152617,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153667,"byte_end":153678,"line_start":152,"line_end":152,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":403}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that does not panic.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153610,"byte_end":153656,"line_start":151,"line_end":151,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154285,"byte_end":154297,"line_start":167,"line_end":167,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":402},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153720,"byte_end":153782,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153787,"byte_end":153851,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153856,"byte_end":153911,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153916,"byte_end":153919,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153924,"byte_end":153931,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShl;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153936,"byte_end":153968,"line_start":158,"line_end":158,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153973,"byte_end":153976,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153981,"byte_end":154005,"line_start":160,"line_end":160,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154010,"byte_end":154013,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 0),  0x0001);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154018,"byte_end":154076,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 1),  0x0002);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154081,"byte_end":154139,"line_start":163,"line_end":163,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 15), 0x8000);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154144,"byte_end":154202,"line_start":164,"line_end":164,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 16), 0x0001);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154207,"byte_end":154265,"line_start":165,"line_end":165,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":154270,"byte_end":154277,"line_start":166,"line_end":166,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":404},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155073,"byte_end":155084,"line_start":187,"line_end":187,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that does not panic.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155015,"byte_end":155062,"line_start":186,"line_end":186,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155692,"byte_end":155704,"line_start":202,"line_end":202,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"fn (&self, rhs: u32) -> Self","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155126,"byte_end":155189,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155194,"byte_end":155258,"line_start":189,"line_end":189,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155263,"byte_end":155318,"line_start":190,"line_end":190,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155323,"byte_end":155326,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155331,"byte_end":155338,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShr;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155343,"byte_end":155375,"line_start":193,"line_end":193,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155380,"byte_end":155383,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155388,"byte_end":155412,"line_start":195,"line_end":195,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155417,"byte_end":155420,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 0),  0x8000);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155425,"byte_end":155483,"line_start":197,"line_end":197,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 1),  0x4000);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155488,"byte_end":155546,"line_start":198,"line_end":198,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 15), 0x0001);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155551,"byte_end":155609,"line_start":199,"line_end":199,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 16), 0x8000);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155614,"byte_end":155672,"line_start":200,"line_end":200,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155677,"byte_end":155684,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","parent":null,"children":[{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2715},{"krate":0,"index":2719},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2731},{"krate":0,"index":2735},{"krate":0,"index":2740},{"krate":0,"index":2743},{"krate":0,"index":2747},{"krate":0,"index":2751},{"krate":0,"index":2756},{"krate":0,"index":2759},{"krate":0,"index":2763},{"krate":0,"index":2767},{"krate":0,"index":2772},{"krate":0,"index":2775},{"krate":0,"index":2779},{"krate":0,"index":2783},{"krate":0,"index":2788},{"krate":0,"index":2791},{"krate":0,"index":2795},{"krate":0,"index":2799},{"krate":0,"index":2804},{"krate":0,"index":2807},{"krate":0,"index":2811},{"krate":0,"index":2815},{"krate":0,"index":2820},{"krate":0,"index":2823},{"krate":0,"index":2827},{"krate":0,"index":2831},{"krate":0,"index":2836},{"krate":0,"index":2839},{"krate":0,"index":2843},{"krate":0,"index":2847},{"krate":0,"index":2852},{"krate":0,"index":2855},{"krate":0,"index":2859},{"krate":0,"index":2863},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2875},{"krate":0,"index":2879},{"krate":0,"index":2884},{"krate":0,"index":2887},{"krate":0,"index":2891},{"krate":0,"index":2895},{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2907},{"krate":0,"index":2911},{"krate":0,"index":2916},{"krate":0,"index":2919},{"krate":0,"index":2923},{"krate":0,"index":2927},{"krate":0,"index":2932},{"krate":0,"index":2935},{"krate":0,"index":2939},{"krate":0,"index":2943},{"krate":0,"index":2948},{"krate":0,"index":2951},{"krate":0,"index":2955},{"krate":0,"index":2959},{"krate":0,"index":2964},{"krate":0,"index":2967},{"krate":0,"index":2971},{"krate":0,"index":2975},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2987},{"krate":0,"index":2991},{"krate":0,"index":2996},{"krate":0,"index":2999},{"krate":0,"index":3003},{"krate":0,"index":3007},{"krate":0,"index":3012},{"krate":0,"index":3015},{"krate":0,"index":3019},{"krate":0,"index":3023},{"krate":0,"index":3028},{"krate":0,"index":3031},{"krate":0,"index":3035},{"krate":0,"index":3039},{"krate":0,"index":3044},{"krate":0,"index":3047},{"krate":0,"index":3051},{"krate":0,"index":3055},{"krate":0,"index":3060},{"krate":0,"index":3063},{"krate":0,"index":3067},{"krate":0,"index":3071},{"krate":0,"index":3076},{"krate":0,"index":3079},{"krate":0,"index":3083},{"krate":0,"index":3087},{"krate":0,"index":3092},{"krate":0,"index":3095},{"krate":0,"index":3099},{"krate":0,"index":3103},{"krate":0,"index":3108},{"krate":0,"index":3111},{"krate":0,"index":3115},{"krate":0,"index":3119},{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3131},{"krate":0,"index":3135},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":3147},{"krate":0,"index":3151},{"krate":0,"index":3156},{"krate":0,"index":3159},{"krate":0,"index":3163},{"krate":0,"index":3167},{"krate":0,"index":3172},{"krate":0,"index":3175},{"krate":0,"index":3179},{"krate":0,"index":3183},{"krate":0,"index":3188},{"krate":0,"index":3191},{"krate":0,"index":3195},{"krate":0,"index":3199},{"krate":0,"index":3204},{"krate":0,"index":3207},{"krate":0,"index":3211},{"krate":0,"index":3215},{"krate":0,"index":3220},{"krate":0,"index":3223},{"krate":0,"index":3227},{"krate":0,"index":3231},{"krate":0,"index":3236},{"krate":0,"index":3239},{"krate":0,"index":3243},{"krate":0,"index":3247},{"krate":0,"index":3252},{"krate":0,"index":3255},{"krate":0,"index":3259},{"krate":0,"index":3263},{"krate":0,"index":3268},{"krate":0,"index":3271},{"krate":0,"index":3275},{"krate":0,"index":3279},{"krate":0,"index":3284},{"krate":0,"index":3287},{"krate":0,"index":3291},{"krate":0,"index":3295},{"krate":0,"index":3300},{"krate":0,"index":3303},{"krate":0,"index":3307},{"krate":0,"index":3311},{"krate":0,"index":3316},{"krate":0,"index":3319},{"krate":0,"index":3323},{"krate":0,"index":3327},{"krate":0,"index":3332},{"krate":0,"index":3335},{"krate":0,"index":3339},{"krate":0,"index":3343},{"krate":0,"index":3348},{"krate":0,"index":3351},{"krate":0,"index":3355},{"krate":0,"index":3359},{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3371},{"krate":0,"index":3375},{"krate":0,"index":3380},{"krate":0,"index":3383},{"krate":0,"index":3387},{"krate":0,"index":3391},{"krate":0,"index":3396},{"krate":0,"index":3399},{"krate":0,"index":3403},{"krate":0,"index":3407},{"krate":0,"index":3412},{"krate":0,"index":3415},{"krate":0,"index":3419},{"krate":0,"index":3423},{"krate":0,"index":3428},{"krate":0,"index":3431},{"krate":0,"index":3435},{"krate":0,"index":3439},{"krate":0,"index":3444},{"krate":0,"index":3447},{"krate":0,"index":3451},{"krate":0,"index":3455},{"krate":0,"index":3460},{"krate":0,"index":3463},{"krate":0,"index":3467},{"krate":0,"index":3471},{"krate":0,"index":3476},{"krate":0,"index":3479},{"krate":0,"index":3483},{"krate":0,"index":3487},{"krate":0,"index":3492},{"krate":0,"index":3495},{"krate":0,"index":3499},{"krate":0,"index":3503},{"krate":0,"index":3508},{"krate":0,"index":3511},{"krate":0,"index":3515},{"krate":0,"index":3519},{"krate":0,"index":3524},{"krate":0,"index":3527},{"krate":0,"index":3531},{"krate":0,"index":3535},{"krate":0,"index":3540},{"krate":0,"index":3543},{"krate":0,"index":3547},{"krate":0,"index":3551},{"krate":0,"index":3556},{"krate":0,"index":3559},{"krate":0,"index":3563},{"krate":0,"index":3567},{"krate":0,"index":3572},{"krate":0,"index":3575},{"krate":0,"index":3579},{"krate":0,"index":3583},{"krate":0,"index":3588},{"krate":0,"index":3591},{"krate":0,"index":3595},{"krate":0,"index":3599},{"krate":0,"index":3604},{"krate":0,"index":3607},{"krate":0,"index":3611},{"krate":0,"index":3615},{"krate":0,"index":3620},{"krate":0,"index":3623},{"krate":0,"index":3627},{"krate":0,"index":3631},{"krate":0,"index":3636},{"krate":0,"index":3639},{"krate":0,"index":3643},{"krate":0,"index":3647},{"krate":0,"index":3652},{"krate":0,"index":3655},{"krate":0,"index":3659},{"krate":0,"index":3663},{"krate":0,"index":3668},{"krate":0,"index":3671},{"krate":0,"index":3675},{"krate":0,"index":3679},{"krate":0,"index":3684},{"krate":0,"index":3687},{"krate":0,"index":3691},{"krate":0,"index":3695},{"krate":0,"index":3700},{"krate":0,"index":3703},{"krate":0,"index":3707},{"krate":0,"index":3711},{"krate":0,"index":3716},{"krate":0,"index":3719},{"krate":0,"index":3723},{"krate":0,"index":3727},{"krate":0,"index":3732},{"krate":0,"index":3735},{"krate":0,"index":3739},{"krate":0,"index":3743},{"krate":0,"index":3748},{"krate":0,"index":3751},{"krate":0,"index":3755},{"krate":0,"index":3759},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3775},{"krate":0,"index":3780},{"krate":0,"index":3783},{"krate":0,"index":3787},{"krate":0,"index":3791},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3807},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3819},{"krate":0,"index":3823},{"krate":0,"index":3828},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3839},{"krate":0,"index":3844},{"krate":0,"index":3847},{"krate":0,"index":3851},{"krate":0,"index":3855},{"krate":0,"index":435},{"krate":0,"index":437}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159924,"byte_end":159927,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":433}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[{"value":"/ Binary operator for raising a value to a power.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159862,"byte_end":159913,"line_start":5,"line_end":5,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159992,"byte_end":159998,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":159939,"byte_end":159982,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160187,"byte_end":160190,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":430},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[{"value":"/ Returns `self` to the power `rhs`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160005,"byte_end":160043,"line_start":10,"line_end":10,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160048,"byte_end":160051,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160056,"byte_end":160070,"line_start":12,"line_end":12,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160075,"byte_end":160078,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160083,"byte_end":160090,"line_start":14,"line_end":14,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Pow;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160095,"byte_end":160119,"line_start":15,"line_end":15,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Pow::pow(10u32, 2u32), 100);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160124,"byte_end":160167,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":160172,"byte_end":160179,"line_start":17,"line_end":17,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165017,"byte_end":165020,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, using exponentiation by squaring.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164633,"byte_end":164706,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164707,"byte_end":164710,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`pow(0, 0)`) returns `1`. Mathematically this is undefined.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164711,"byte_end":164792,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164793,"byte_end":164796,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164797,"byte_end":164810,"line_start":179,"line_end":179,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164811,"byte_end":164814,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164815,"byte_end":164826,"line_start":181,"line_end":181,"column_start":1,"column_end":12}},{"value":"/ use num_traits::pow;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164827,"byte_end":164851,"line_start":182,"line_end":182,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164852,"byte_end":164855,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pow(2i8, 4), 16);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164856,"byte_end":164888,"line_start":184,"line_end":184,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(pow(6u8, 3), 216);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164889,"byte_end":164922,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(pow(0u8, 0), 1); // Be aware if this case affects you","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164923,"byte_end":164991,"line_start":186,"line_end":186,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":164992,"byte_end":164999,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165000,"byte_end":165009,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":166026,"byte_end":166037,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, returning `None` if an overflow occurred.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165474,"byte_end":165555,"line_start":213,"line_end":213,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165556,"byte_end":165559,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`checked_pow(0, 0)`) returns `Some(1)`. Mathematically this is undefined.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165560,"byte_end":165655,"line_start":215,"line_end":215,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165656,"byte_end":165659,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Otherwise same as the `pow` function.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165660,"byte_end":165701,"line_start":217,"line_end":217,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165702,"byte_end":165705,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165706,"byte_end":165719,"line_start":219,"line_end":219,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165720,"byte_end":165723,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165724,"byte_end":165735,"line_start":221,"line_end":221,"column_start":1,"column_end":12}},{"value":"/ use num_traits::checked_pow;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165736,"byte_end":165768,"line_start":222,"line_end":222,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165769,"byte_end":165772,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(checked_pow(2i8, 4), Some(16));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165773,"byte_end":165819,"line_start":224,"line_end":224,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(checked_pow(7i8, 8), None);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165820,"byte_end":165862,"line_start":225,"line_end":225,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(checked_pow(7u32, 8), Some(5_764_801));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165863,"byte_end":165917,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(checked_pow(0u32, 0), Some(1)); // Be aware if this case affect you","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":165918,"byte_end":166000,"line_start":227,"line_end":227,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":166001,"byte_end":166008,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\pow.rs","byte_start":166009,"byte_end":166018,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":451},{"krate":0,"index":3860},{"krate":0,"index":3866},{"krate":0,"index":3872},{"krate":0,"index":3878},{"krate":0,"index":3884},{"krate":0,"index":3890},{"krate":0,"index":452},{"krate":0,"index":459},{"krate":0,"index":3896},{"krate":0,"index":3902},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":468}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189054,"byte_end":189060,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[{"value":"/ Useful functions for signed numbers (i.e. numbers that can be negative).","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":188967,"byte_end":189043,"line_start":7,"line_end":7,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189313,"byte_end":189316,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189101,"byte_end":189133,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189138,"byte_end":189141,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189146,"byte_end":189217,"line_start":11,"line_end":11,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189222,"byte_end":189225,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189230,"byte_end":189305,"line_start":13,"line_end":13,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189541,"byte_end":189548,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189338,"byte_end":189381,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189386,"byte_end":189389,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Returns `zero` if the number is less than or equal to `other`, otherwise the difference","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189394,"byte_end":189485,"line_start":18,"line_end":18,"column_start":5,"column_end":96}},{"value":"/ between `self` and `other` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189490,"byte_end":189533,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190006,"byte_end":190012,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189584,"byte_end":189619,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189624,"byte_end":189627,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189632,"byte_end":189656,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189661,"byte_end":189664,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189669,"byte_end":189728,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189733,"byte_end":189797,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189802,"byte_end":189836,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189841,"byte_end":189844,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For signed integers:","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189849,"byte_end":189873,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189878,"byte_end":189881,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ * `0` if the number is zero","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189886,"byte_end":189917,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/ * `1` if the number is positive","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189922,"byte_end":189957,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189962,"byte_end":189998,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190129,"byte_end":190140,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is positive and false if the number is zero or negative.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190034,"byte_end":190121,"line_start":37,"line_end":37,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190257,"byte_end":190268,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is negative and false if the number is zero or positive.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":190162,"byte_end":190249,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193462,"byte_end":193465,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193249,"byte_end":193281,"line_start":159,"line_end":159,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193282,"byte_end":193285,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193286,"byte_end":193356,"line_start":161,"line_end":161,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193357,"byte_end":193360,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193361,"byte_end":193436,"line_start":163,"line_end":163,"column_start":1,"column_end":76}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193437,"byte_end":193454,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193702,"byte_end":193709,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193513,"byte_end":193556,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193557,"byte_end":193560,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Returns zero if `x` is less than or equal to `y`, otherwise the difference","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193561,"byte_end":193639,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ between `x` and `y` is returned.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193640,"byte_end":193676,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193677,"byte_end":193694,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194153,"byte_end":194159,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193761,"byte_end":193796,"line_start":178,"line_end":178,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193797,"byte_end":193800,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193801,"byte_end":193825,"line_start":180,"line_end":180,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193826,"byte_end":193829,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193830,"byte_end":193889,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193890,"byte_end":193954,"line_start":183,"line_end":183,"column_start":1,"column_end":65}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193955,"byte_end":193989,"line_start":184,"line_end":184,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193990,"byte_end":193993,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ For signed integers:","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":193994,"byte_end":194018,"line_start":186,"line_end":186,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194019,"byte_end":194022,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * `0` if the number is zero","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194023,"byte_end":194054,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/ * `1` if the number is positive","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194055,"byte_end":194090,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194091,"byte_end":194127,"line_start":190,"line_end":190,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194128,"byte_end":194145,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194268,"byte_end":194276,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[{"value":"/ A trait for values which cannot be negative","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194210,"byte_end":194257,"line_start":196,"line_end":196,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2165,"byte_end":2168,"line_start":67,"line_end":67,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[{"value":"/ The base trait for numeric types, covering `0` and `1` values,","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2022,"byte_end":2088,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"/ comparisons, basic numeric operations, and string conversion.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2089,"byte_end":2154,"line_start":66,"line_end":66,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2213,"byte_end":2228,"line_start":68,"line_end":68,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2586,"byte_end":2600,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[{"value":"/ Convert from a string and radix <= 36.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2235,"byte_end":2277,"line_start":70,"line_end":70,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2282,"byte_end":2285,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2290,"byte_end":2304,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2309,"byte_end":2312,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2317,"byte_end":2328,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ use num_traits::Num;","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2333,"byte_end":2357,"line_start":75,"line_end":75,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2362,"byte_end":2365,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"27\", 10);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2370,"byte_end":2426,"line_start":77,"line_end":77,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(result, Ok(27));","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2431,"byte_end":2462,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2467,"byte_end":2470,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"foo\", 10);","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2475,"byte_end":2532,"line_start":80,"line_end":80,"column_start":5,"column_end":62}},{"value":"/ assert!(result.is_err());","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2537,"byte_end":2566,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2571,"byte_end":2578,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2822,"byte_end":2828,"line_start":89,"line_end":89,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> +\nMul<Rhs, Output = Output> + Div<Rhs, Output = Output> +\nRem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[{"value":"/ The trait for types implementing basic numeric operations","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2667,"byte_end":2728,"line_start":86,"line_end":86,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2729,"byte_end":2732,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2733,"byte_end":2811,"line_start":88,"line_end":88,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3462,"byte_end":3468,"line_start":111,"line_end":111,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement numeric operations taking","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3255,"byte_end":3331,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/ the second operand by reference.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3332,"byte_end":3368,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3369,"byte_end":3372,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3373,"byte_end":3451,"line_start":110,"line_end":110,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3787,"byte_end":3793,"line_start":118,"line_end":118,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[{"value":"/ The trait for references which implement numeric operations, taking the","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3566,"byte_end":3641,"line_start":114,"line_end":114,"column_start":1,"column_end":76}},{"value":"/ second operand either by value or by reference.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3642,"byte_end":3693,"line_start":115,"line_end":115,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3694,"byte_end":3697,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3698,"byte_end":3776,"line_start":117,"line_end":117,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4126,"byte_end":4138,"line_start":124,"line_end":124,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[{"value":"/ The trait for types implementing numeric assignment operators (like `+=`).","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3954,"byte_end":4032,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4033,"byte_end":4036,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4037,"byte_end":4115,"line_start":123,"line_end":123,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4548,"byte_end":4557,"line_start":137,"line_end":137,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement assignment operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4382,"byte_end":4454,"line_start":134,"line_end":134,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4455,"byte_end":4458,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4459,"byte_end":4537,"line_start":136,"line_end":136,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4853,"byte_end":4865,"line_start":144,"line_end":144,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `NumAssign` types which also implement assignment operations","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4637,"byte_end":4715,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ taking the second operand by reference.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4716,"byte_end":4759,"line_start":141,"line_end":141,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4760,"byte_end":4763,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4764,"byte_end":4842,"line_start":143,"line_end":143,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3951},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5987,"byte_end":5992,"line_start":180,"line_end":180,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":3950},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3953},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5998,"byte_end":6005,"line_start":181,"line_end":181,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":3950},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3950},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5966,"byte_end":5980,"line_start":179,"line_end":179,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":3951},{"krate":0,"index":3953}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3957},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6163,"byte_end":6178,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":3958}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3958},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6189,"byte_end":6193,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":3957},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14465,"byte_end":14470,"line_start":375,"line_end":375,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"/ A value bounded by a minimum and a maximum","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14198,"byte_end":14244,"line_start":367,"line_end":367,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14245,"byte_end":14248,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14249,"byte_end":14302,"line_start":369,"line_end":369,"column_start":1,"column_end":54}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14303,"byte_end":14359,"line_start":370,"line_end":370,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14360,"byte_end":14394,"line_start":371,"line_end":371,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14395,"byte_end":14398,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min <= max)`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14399,"byte_end":14447,"line_start":373,"line_end":373,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14448,"byte_end":14457,"line_start":374,"line_end":374,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15035,"byte_end":15044,"line_start":394,"line_end":394,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"fn <T> (input: T, min: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"/ A value bounded by a minimum value","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14700,"byte_end":14738,"line_start":386,"line_end":386,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14739,"byte_end":14742,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14743,"byte_end":14796,"line_start":388,"line_end":388,"column_start":1,"column_end":54}},{"value":"/  Otherwise this returns input.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14797,"byte_end":14831,"line_start":389,"line_end":389,"column_start":1,"column_end":35}},{"value":"/  `clamp_min(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::min(std::f32::NAN, 1.0)`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14832,"byte_end":14931,"line_start":390,"line_end":390,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14932,"byte_end":14935,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min == min)`. (This occurs if `min` is `NAN`.)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":14936,"byte_end":15017,"line_start":392,"line_end":392,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15018,"byte_end":15027,"line_start":393,"line_end":393,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15546,"byte_end":15555,"line_start":411,"line_end":411,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"fn <T> (input: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"/ A value bounded by a maximum value","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15208,"byte_end":15246,"line_start":403,"line_end":403,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15247,"byte_end":15250,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15251,"byte_end":15307,"line_start":405,"line_end":405,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15308,"byte_end":15342,"line_start":406,"line_end":406,"column_start":1,"column_end":35}},{"value":"/  `clamp_max(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::max(std::f32::NAN, 1.0)`.","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15343,"byte_end":15442,"line_start":407,"line_end":407,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15443,"byte_end":15446,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(max == max)`. (This occurs if `max` is `NAN`.)","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15447,"byte_end":15528,"line_start":409,"line_end":409,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":15529,"byte_end":15538,"line_start":410,"line_end":410,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":21816,"byte_end":21824,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":43765,"byte_end":43773,"line_start":599,"line_end":599,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":44541,"byte_end":44549,"line_start":632,"line_end":632,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46552,"byte_end":46560,"line_start":709,"line_end":709,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113482,"byte_end":113490,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115467,"byte_end":115475,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156518,"byte_end":156526,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156718,"byte_end":156726,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156918,"byte_end":156926,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157118,"byte_end":157126,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157304,"byte_end":157312,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157510,"byte_end":157518,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":710,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":191150,"byte_end":191158,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":719,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194538,"byte_end":194546,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":720,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3065,"byte_end":3066,"line_start":98,"line_end":98,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":721,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3523,"byte_end":3524,"line_start":112,"line_end":112,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":722,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3887,"byte_end":3888,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":723,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4279,"byte_end":4280,"line_start":129,"line_end":129,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":724,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4603,"byte_end":4604,"line_start":138,"line_end":138,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":725,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4938,"byte_end":4939,"line_start":145,"line_end":145,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":738,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5538,"byte_end":5546,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":739,"kind":"Direct","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6236,"byte_end":6251,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1897,"byte_end":1903,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1913,"byte_end":1917,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":101}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1927,"byte_end":1932,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1942,"byte_end":1952,"line_start":58,"line_end":58,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":247}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1962,"byte_end":1965,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":275}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1975,"byte_end":1978,"line_start":60,"line_end":60,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":307}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127810,"byte_end":127817,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":308}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127827,"byte_end":127830,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":336}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127840,"byte_end":127847,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":354}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127857,"byte_end":127867,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":366}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\mod.rs","byte_start":127877,"byte_end":127885,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":382}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":1988,"byte_end":1991,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":424}},{"kind":"Mod","span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2015,"byte_end":2019,"line_start":63,"line_end":63,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":440}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\bounds.rs","byte_start":21816,"byte_end":21824,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":90}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":36945,"byte_end":36950,"line_start":395,"line_end":395,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":149}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":43765,"byte_end":43773,"line_start":599,"line_end":599,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":123}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":44541,"byte_end":44549,"line_start":632,"line_end":632,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":149}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45384,"byte_end":45389,"line_start":671,"line_end":671,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":45392,"byte_end":45403,"line_start":671,"line_end":671,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":123},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":46552,"byte_end":46560,"line_start":709,"line_end":709,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":174}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\cast.rs","byte_start":47794,"byte_end":47798,"line_start":750,"line_end":750,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1914},"to":{"krate":0,"index":182}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49638,"byte_end":49641,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49644,"byte_end":49651,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49654,"byte_end":49657,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1994},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49675,"byte_end":49685,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1671},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\float.rs","byte_start":49688,"byte_end":49692,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1914},"to":{"krate":0,"index":199}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112225,"byte_end":112230,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":112233,"byte_end":112236,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1967},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113482,"byte_end":113490,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113919,"byte_end":113924,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":113927,"byte_end":113930,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1977},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\identities.rs","byte_start":115467,"byte_end":115475,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":262}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118482,"byte_end":118487,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118494,"byte_end":118498,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1914},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118505,"byte_end":118508,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118515,"byte_end":118522,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118529,"byte_end":118536,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":90},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118543,"byte_end":118553,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1671},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118560,"byte_end":118563,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1660},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118570,"byte_end":118572,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":1639},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118579,"byte_end":118582,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2019},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118604,"byte_end":118610,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2023},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118632,"byte_end":118637,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2028},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118659,"byte_end":118665,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2033},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118687,"byte_end":118690,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2038},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118719,"byte_end":118722,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118751,"byte_end":118761,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":317},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118783,"byte_end":118793,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":320},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118815,"byte_end":118825,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":322},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118847,"byte_end":118857,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":324},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\int.rs","byte_start":118879,"byte_end":118889,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":371},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128049,"byte_end":128054,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":128057,"byte_end":128060,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1967},"to":{"krate":0,"index":317}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129190,"byte_end":129195,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":129198,"byte_end":129201,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1972},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130093,"byte_end":130098,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":322}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":130101,"byte_end":130104,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1977},"to":{"krate":0,"index":322}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131061,"byte_end":131066,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":324}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":131069,"byte_end":131072,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1982},"to":{"krate":0,"index":324}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132048,"byte_end":132053,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":132056,"byte_end":132059,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1988},"to":{"krate":0,"index":326}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":133827,"byte_end":133832,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":329}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135276,"byte_end":135281,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":331}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":135284,"byte_end":135287,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2038},"to":{"krate":0,"index":331}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136918,"byte_end":136923,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":334}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\checked.rs","byte_start":136926,"byte_end":136929,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":334}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144479,"byte_end":144484,"line_start":47,"line_end":47,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":144487,"byte_end":144490,"line_start":47,"line_end":47,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1967},"to":{"krate":0,"index":376}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145487,"byte_end":145492,"line_start":70,"line_end":70,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":145495,"byte_end":145498,"line_start":70,"line_end":70,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1972},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146501,"byte_end":146506,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":380}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\saturating.rs","byte_start":146509,"byte_end":146512,"line_start":93,"line_end":93,"column_start":34,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":1977},"to":{"krate":0,"index":380}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148907,"byte_end":148912,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":148915,"byte_end":148918,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1967},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149801,"byte_end":149806,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":149809,"byte_end":149812,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1972},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150701,"byte_end":150706,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":150709,"byte_end":150712,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1977},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":151841,"byte_end":151846,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153680,"byte_end":153685,"line_start":152,"line_end":152,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":153688,"byte_end":153691,"line_start":152,"line_end":152,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2038},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155086,"byte_end":155091,"line_start":187,"line_end":187,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":155094,"byte_end":155097,"line_start":187,"line_end":187,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2044},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156518,"byte_end":156526,"line_start":222,"line_end":222,"column_start":38,"column_end":46},"kind":{"Impl":{"id":554}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":392}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156718,"byte_end":156726,"line_start":230,"line_end":230,"column_start":38,"column_end":46},"kind":{"Impl":{"id":555}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":394}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":156918,"byte_end":156926,"line_start":238,"line_end":238,"column_start":38,"column_end":46},"kind":{"Impl":{"id":556}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":396}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157118,"byte_end":157126,"line_start":246,"line_end":246,"column_start":38,"column_end":46},"kind":{"Impl":{"id":557}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":399}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157304,"byte_end":157312,"line_start":254,"line_end":254,"column_start":38,"column_end":46},"kind":{"Impl":{"id":558}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":402}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\ops\\wrapping.rs","byte_start":157510,"byte_end":157518,"line_start":262,"line_end":262,"column_start":38,"column_end":46},"kind":{"Impl":{"id":559}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":404}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189062,"byte_end":189067,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1909},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189070,"byte_end":189073,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":189076,"byte_end":189079,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1994},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":191150,"byte_end":191158,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":710}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":445}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194278,"byte_end":194281,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":466}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\sign.rs","byte_start":194538,"byte_end":194546,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":719}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":466}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2170,"byte_end":2179,"line_start":67,"line_end":67,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1634},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2182,"byte_end":2186,"line_start":67,"line_end":67,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":252},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2189,"byte_end":2192,"line_start":67,"line_end":67,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":262},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2195,"byte_end":2201,"line_start":67,"line_end":67,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2861,"byte_end":2864,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":1967},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2893,"byte_end":2896,"line_start":91,"line_end":91,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1972},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2925,"byte_end":2928,"line_start":92,"line_end":92,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1977},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2957,"byte_end":2960,"line_start":93,"line_end":93,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1982},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":2989,"byte_end":2992,"line_start":94,"line_end":94,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1988},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3065,"byte_end":3066,"line_start":98,"line_end":98,"column_start":46,"column_end":47},"kind":{"Impl":{"id":720}},"from":{"krate":0,"index":477},"to":{"krate":0,"index":473}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3470,"byte_end":3473,"line_start":111,"line_end":111,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3484,"byte_end":3490,"line_start":111,"line_end":111,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3523,"byte_end":3524,"line_start":112,"line_end":112,"column_start":20,"column_end":21},"kind":{"Impl":{"id":721}},"from":{"krate":0,"index":483},"to":{"krate":0,"index":480}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3801,"byte_end":3807,"line_start":118,"line_end":118,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3830,"byte_end":3836,"line_start":118,"line_end":118,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":3887,"byte_end":3888,"line_start":119,"line_end":119,"column_start":32,"column_end":33},"kind":{"Impl":{"id":722}},"from":{"krate":0,"index":489},"to":{"krate":0,"index":485}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4156,"byte_end":4165,"line_start":125,"line_end":125,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":1998},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4173,"byte_end":4182,"line_start":125,"line_end":125,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2002},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4190,"byte_end":4199,"line_start":125,"line_end":125,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2006},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4207,"byte_end":4216,"line_start":125,"line_end":125,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":2010},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4224,"byte_end":4233,"line_start":125,"line_end":125,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":2014},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4279,"byte_end":4280,"line_start":129,"line_end":129,"column_start":36,"column_end":37},"kind":{"Impl":{"id":723}},"from":{"krate":0,"index":495},"to":{"krate":0,"index":492}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4559,"byte_end":4562,"line_start":137,"line_end":137,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":470},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4565,"byte_end":4577,"line_start":137,"line_end":137,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":492},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4603,"byte_end":4604,"line_start":138,"line_end":138,"column_start":23,"column_end":24},"kind":{"Impl":{"id":724}},"from":{"krate":0,"index":499},"to":{"krate":0,"index":497}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4867,"byte_end":4876,"line_start":144,"line_end":144,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":497},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4887,"byte_end":4899,"line_start":144,"line_end":144,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":492},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":4938,"byte_end":4939,"line_start":145,"line_end":145,"column_start":26,"column_end":27},"kind":{"Impl":{"id":725}},"from":{"krate":0,"index":503},"to":{"krate":0,"index":500}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":5538,"byte_end":5546,"line_start":164,"line_end":164,"column_start":22,"column_end":30},"kind":{"Impl":{"id":738}},"from":{"krate":1,"index":11345},"to":{"krate":0,"index":470}},{"span":{"file_name":"C:\\Users\\tcorb\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\num-traits-0.2.12\\src\\lib.rs","byte_start":6236,"byte_end":6251,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"kind":{"Impl":{"id":739}},"from":{"krate":0,"index":3957},"to":{"krate":1,"index":6081}}]}