{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13","program":"/home/pi/.rustup/toolchains/stable-armv7-unknown-linux-gnueabihf/bin/rls","arguments":["--crate-name","chrono","/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=ebf3bd9fb2a583ef","-C","extra-filename=-ebf3bd9fb2a583ef","--out-dir","/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps","-L","dependency=/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps","--extern","num_integer=/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps/libnum_integer-7bcd6c96abac1fac.rmeta","--extern","num_traits=/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps/libnum_traits-7e893c683db0b397.rmeta","--extern","time=/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps/libtime-e9571a22dd0032d5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/pi/.rustup/toolchains/stable-armv7-unknown-linux-gnueabihf"],"output":"/home/pi/Documents/Lassie/Lassie/Lassie/target/rls/debug/deps/libchrono-ebf3bd9fb2a583ef.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[6704050420463147198,3568197030672015061]},"crate_root":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src","external_crates":[{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[2452240753402467245,1608192119103656198]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5207100911382675201,12715011870694077887]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9502898541344604384,13295850733906598505]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10239976673747249573,10532968567904789703]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15966220397012024335,13082425447188817080]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10021947070159936782,17417093952237715234]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6281341224648431109,7121724054282284956]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4086674114289439281,12702191010537352172]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[16886977349896388627,8631093889303259908]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10512353609173060606,7671235950535422649]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[18049005652438160224,647604305262383652]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[3204450625693338613,4905958849794231389]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9198388968150376420,16536533855898840186]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[11175794418208537387,6145007798707894169]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":15,"id":{"name":"time","disambiguator":[7027427750270458779,10891305249780398717]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[10669441831664102594,13080499186174582159]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[14608198363238469022,6137689367817328998]}},{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[13884822766335373561,7353089260278931122]}}],"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":76,"byte_end":43380,"line_start":4,"line_end":1152,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":295},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20179,"byte_end":20187,"line_start":448,"line_end":448,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1628},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20205,"byte_end":20209,"line_start":450,"line_end":450,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20211,"byte_end":20219,"line_start":450,"line_end":450,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":709},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20221,"byte_end":20229,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1659},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20333,"byte_end":20341,"line_start":453,"line_end":453,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1635},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20343,"byte_end":20356,"line_start":453,"line_end":453,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1869},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20376,"byte_end":20386,"line_start":454,"line_end":454,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1051},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20388,"byte_end":20399,"line_start":454,"line_end":454,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1583},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20436,"byte_end":20443,"line_start":456,"line_end":456,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20445,"byte_end":20454,"line_start":456,"line_end":456,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20456,"byte_end":20469,"line_start":456,"line_end":456,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1603},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20471,"byte_end":20480,"line_start":456,"line_end":456,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20543,"byte_end":20548,"line_start":459,"line_end":459,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1457},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20585,"byte_end":20596,"line_start":461,"line_end":461,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1423},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20598,"byte_end":20609,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20611,"byte_end":20617,"line_start":461,"line_end":461,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20619,"byte_end":20627,"line_start":461,"line_end":461,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1479},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20629,"byte_end":20632,"line_start":461,"line_end":461,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1364},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20651,"byte_end":20664,"line_start":462,"line_end":462,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1969},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20666,"byte_end":20679,"line_start":462,"line_end":462,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1356},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20681,"byte_end":20692,"line_start":462,"line_end":462,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1628},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20831,"byte_end":20835,"line_start":467,"line_end":467,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20901,"byte_end":20906,"line_start":470,"line_end":470,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1356},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20942,"byte_end":20953,"line_start":472,"line_end":472,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1659},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20990,"byte_end":20998,"line_start":474,"line_end":474,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1635},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21000,"byte_end":21013,"line_start":474,"line_end":474,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1393},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21051,"byte_end":21059,"line_start":476,"line_end":476,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21061,"byte_end":21069,"line_start":476,"line_end":476,"column_start":24,"column_end":32},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1987},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21071,"byte_end":21078,"line_start":476,"line_end":476,"column_start":34,"column_end":41},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1457},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21116,"byte_end":21127,"line_start":478,"line_end":478,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1479},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21129,"byte_end":21132,"line_start":478,"line_end":478,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21170,"byte_end":21179,"line_start":480,"line_end":480,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21181,"byte_end":21194,"line_start":480,"line_end":480,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1603},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21196,"byte_end":21205,"line_start":480,"line_end":480,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21243,"byte_end":21249,"line_start":482,"line_end":482,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21251,"byte_end":21259,"line_start":482,"line_end":482,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":1457},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":63152,"byte_end":63163,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":0,"index":1472},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":63212,"byte_end":63217,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":0,"index":1479},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":63238,"byte_end":63241,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21841,"byte_end":21850,"line_start":510,"line_end":510,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21852,"byte_end":21860,"line_start":510,"line_end":510,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21862,"byte_end":21870,"line_start":510,"line_end":510,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":22022,"byte_end":22035,"line_start":514,"line_end":514,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":1583},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":22064,"byte_end":22071,"line_start":515,"line_end":515,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":1603},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":22097,"byte_end":22106,"line_start":516,"line_end":516,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":251}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482491,"byte_end":482496,"line_start":41,"line_end":41,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1012}},{"kind":"Use","ref_id":{"krate":0,"index":1910},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482520,"byte_end":482526,"line_start":42,"line_end":42,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1012}},{"kind":"Use","ref_id":{"krate":0,"index":1941},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482552,"byte_end":482565,"line_start":43,"line_end":43,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1012}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":76,"byte_end":43380,"line_start":4,"line_end":1152,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":31},{"krate":0,"index":35},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":63},{"krate":0,"index":251},{"krate":0,"index":683},{"krate":0,"index":818},{"krate":0,"index":1012},{"krate":0,"index":1344},{"krate":0,"index":1987},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2016},{"krate":0,"index":2014},{"krate":0,"index":2012},{"krate":0,"index":2009},{"krate":0,"index":1378},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1390},{"krate":0,"index":2023},{"krate":0,"index":2029},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1412}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"! # Chrono: Date and Time for Rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"! which Chrono builds upon and should acknowledge:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Any significant changes to Chrono are documented in","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"! the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":957,"byte_end":1050,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1051,"byte_end":1054,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1055,"byte_end":1067,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1072,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1111,"byte_end":1122,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1123,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.4\"","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1161,"byte_end":1168,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1169,"byte_end":1172,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Or, if you want [Serde](https://github.com/serde-rs/serde) include the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1173,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"! feature like this:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1248,"byte_end":1270,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1271,"byte_end":1274,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1287,"byte_end":1305,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"! chrono = { version = \"0.4\", features = [\"serde\"] }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1306,"byte_end":1360,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1373,"byte_end":1410,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"! extern crate chrono;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1427,"byte_end":1451,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1452,"byte_end":1459,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1464,"byte_end":1548,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"! If you prefer the glob imports, use the following instead:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1549,"byte_end":1611,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1612,"byte_end":1615,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1616,"byte_end":1627,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1628,"byte_end":1655,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1656,"byte_end":1663,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1668,"byte_end":1683,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1688,"byte_end":1704,"line_start":57,"line_end":57,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! Chrono currently uses","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1709,"byte_end":1734,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"! the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1735,"byte_end":1821,"line_start":60,"line_end":60,"column_start":1,"column_end":87}},{"value":"! from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1822,"byte_end":1890,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"! Since this has the same name as the newer, standard type for duration,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1891,"byte_end":1965,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"! the reference will refer this type as `OldDuration`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":1966,"byte_end":2022,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"! Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2023,"byte_end":2094,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"! nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2095,"byte_end":2170,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! months.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! Chrono does not yet natively support","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2187,"byte_end":2227,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"! the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2228,"byte_end":2320,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"! but it will be supported in the future.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2321,"byte_end":2364,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"! Meanwhile you can convert between two types with","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2365,"byte_end":2417,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"! [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2418,"byte_end":2515,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"! and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2516,"byte_end":2523,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2524,"byte_end":2617,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"! methods.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2618,"byte_end":2630,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2631,"byte_end":2634,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2635,"byte_end":2656,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2657,"byte_end":2660,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2661,"byte_end":2682,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2683,"byte_end":2727,"line_start":80,"line_end":80,"column_start":1,"column_end":45}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2728,"byte_end":2782,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2783,"byte_end":2786,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2787,"byte_end":2861,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2862,"byte_end":2910,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2911,"byte_end":2995,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":2996,"byte_end":3034,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3035,"byte_end":3119,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3120,"byte_end":3201,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3206,"byte_end":3267,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3268,"byte_end":3330,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3331,"byte_end":3411,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3412,"byte_end":3470,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3471,"byte_end":3474,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3475,"byte_end":3569,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3570,"byte_end":3573,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3574,"byte_end":3659,"line_start":97,"line_end":97,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3664,"byte_end":3733,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3734,"byte_end":3801,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3802,"byte_end":3865,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3866,"byte_end":3955,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":3956,"byte_end":4023,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4024,"byte_end":4027,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4028,"byte_end":4104,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4105,"byte_end":4149,"line_start":106,"line_end":106,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4150,"byte_end":4238,"line_start":107,"line_end":107,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4239,"byte_end":4242,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4243,"byte_end":4305,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"! ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4306,"byte_end":4363,"line_start":110,"line_end":110,"column_start":1,"column_end":58}},{"value":"! or in the local time zone","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4364,"byte_end":4393,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4394,"byte_end":4456,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4461,"byte_end":4472,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4473,"byte_end":4500,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4501,"byte_end":4504,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4505,"byte_end":4592,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4593,"byte_end":4685,"line_start":118,"line_end":118,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4686,"byte_end":4719,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4720,"byte_end":4727,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4728,"byte_end":4731,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4732,"byte_end":4789,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4790,"byte_end":4870,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4871,"byte_end":4939,"line_start":124,"line_end":124,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4940,"byte_end":4943,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4944,"byte_end":4955,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4956,"byte_end":4983,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":4984,"byte_end":5020,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5021,"byte_end":5024,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5025,"byte_end":5103,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5104,"byte_end":5167,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5168,"byte_end":5225,"line_start":132,"line_end":132,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5226,"byte_end":5283,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5284,"byte_end":5358,"line_start":134,"line_end":134,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5359,"byte_end":5362,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5363,"byte_end":5455,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5456,"byte_end":5529,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5530,"byte_end":5606,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5611,"byte_end":5638,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5639,"byte_end":5702,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5703,"byte_end":5780,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5781,"byte_end":5864,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5865,"byte_end":5949,"line_start":144,"line_end":144,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5950,"byte_end":5953,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":5954,"byte_end":6027,"line_start":146,"line_end":146,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6028,"byte_end":6125,"line_start":147,"line_end":147,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6126,"byte_end":6196,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6197,"byte_end":6290,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6291,"byte_end":6320,"line_start":150,"line_end":150,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6321,"byte_end":6344,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6345,"byte_end":6352,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6353,"byte_end":6356,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6357,"byte_end":6448,"line_start":154,"line_end":154,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6449,"byte_end":6531,"line_start":155,"line_end":155,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6532,"byte_end":6602,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6603,"byte_end":6650,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6651,"byte_end":6728,"line_start":158,"line_end":158,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6733,"byte_end":6744,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"! # extern crate chrono;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6745,"byte_end":6771,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"! extern crate time;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6772,"byte_end":6794,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6795,"byte_end":6798,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"! # fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6799,"byte_end":6816,"line_start":164,"line_end":164,"column_start":1,"column_end":18}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6817,"byte_end":6844,"line_start":165,"line_end":165,"column_start":1,"column_end":28}},{"value":"! use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6845,"byte_end":6868,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6869,"byte_end":6872,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6873,"byte_end":6939,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"! let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":6940,"byte_end":7033,"line_start":169,"line_end":169,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7034,"byte_end":7037,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7038,"byte_end":7063,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7064,"byte_end":7130,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7131,"byte_end":7207,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7208,"byte_end":7276,"line_start":174,"line_end":174,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7277,"byte_end":7320,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7321,"byte_end":7395,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7396,"byte_end":7449,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7450,"byte_end":7546,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7547,"byte_end":7550,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7551,"byte_end":7593,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7594,"byte_end":7656,"line_start":181,"line_end":181,"column_start":1,"column_end":63}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7657,"byte_end":7716,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7717,"byte_end":7815,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7816,"byte_end":7819,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7820,"byte_end":7885,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7886,"byte_end":7977,"line_start":186,"line_end":186,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":7978,"byte_end":8016,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8017,"byte_end":8113,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8114,"byte_end":8117,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8118,"byte_end":8146,"line_start":190,"line_end":190,"column_start":1,"column_end":29}},{"value":"! let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8147,"byte_end":8201,"line_start":191,"line_end":191,"column_start":1,"column_end":55}},{"value":"! let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8202,"byte_end":8256,"line_start":192,"line_end":192,"column_start":1,"column_end":55}},{"value":"! assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8257,"byte_end":8338,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"! assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8339,"byte_end":8419,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8420,"byte_end":8507,"line_start":195,"line_end":195,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8508,"byte_end":8563,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8564,"byte_end":8651,"line_start":197,"line_end":197,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8652,"byte_end":8709,"line_start":198,"line_end":198,"column_start":1,"column_end":58}},{"value":"! # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8710,"byte_end":8717,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8718,"byte_end":8725,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8726,"byte_end":8729,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! ### Formatting and Parsing","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8730,"byte_end":8760,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8761,"byte_end":8764,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8765,"byte_end":8852,"line_start":204,"line_end":204,"column_start":1,"column_end":88}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8853,"byte_end":8918,"line_start":205,"line_end":205,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8919,"byte_end":8922,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"! See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8923,"byte_end":8992,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":8993,"byte_end":9050,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9051,"byte_end":9054,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9055,"byte_end":9149,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9150,"byte_end":9235,"line_start":211,"line_end":211,"column_start":1,"column_end":86}},{"value":"! [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9236,"byte_end":9304,"line_start":212,"line_end":212,"column_start":1,"column_end":69}},{"value":"! for well-known formats.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9305,"byte_end":9332,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9333,"byte_end":9336,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9337,"byte_end":9348,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9349,"byte_end":9376,"line_start":216,"line_end":216,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9377,"byte_end":9380,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9381,"byte_end":9434,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9435,"byte_end":9517,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9518,"byte_end":9602,"line_start":220,"line_end":220,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9603,"byte_end":9688,"line_start":221,"line_end":221,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9689,"byte_end":9692,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9693,"byte_end":9751,"line_start":223,"line_end":223,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9752,"byte_end":9819,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9820,"byte_end":9881,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9882,"byte_end":9942,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9943,"byte_end":9946,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"! // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":9947,"byte_end":10019,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"! let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10020,"byte_end":10086,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"! assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10087,"byte_end":10162,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10163,"byte_end":10170,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10171,"byte_end":10174,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10175,"byte_end":10218,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10219,"byte_end":10222,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10223,"byte_end":10314,"line_start":235,"line_end":235,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10315,"byte_end":10406,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10407,"byte_end":10495,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10496,"byte_end":10556,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10557,"byte_end":10637,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10638,"byte_end":10708,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10709,"byte_end":10712,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10713,"byte_end":10801,"line_start":242,"line_end":242,"column_start":1,"column_end":89}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10802,"byte_end":10874,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10875,"byte_end":10970,"line_start":244,"line_end":244,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":10971,"byte_end":11029,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11030,"byte_end":11119,"line_start":246,"line_end":246,"column_start":1,"column_end":90}},{"value":"!    and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11120,"byte_end":11130,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11131,"byte_end":11220,"line_start":248,"line_end":248,"column_start":1,"column_end":90}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11221,"byte_end":11267,"line_start":249,"line_end":249,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11268,"byte_end":11271,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11272,"byte_end":11366,"line_start":251,"line_end":251,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11367,"byte_end":11421,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11422,"byte_end":11509,"line_start":253,"line_end":253,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11510,"byte_end":11588,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11589,"byte_end":11620,"line_start":255,"line_end":255,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11621,"byte_end":11624,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11625,"byte_end":11692,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11693,"byte_end":11736,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11737,"byte_end":11740,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11741,"byte_end":11752,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11753,"byte_end":11780,"line_start":261,"line_end":261,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11781,"byte_end":11784,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11785,"byte_end":11838,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11839,"byte_end":11903,"line_start":264,"line_end":264,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11904,"byte_end":11907,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11908,"byte_end":11923,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":11924,"byte_end":12004,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12005,"byte_end":12090,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12091,"byte_end":12190,"line_start":269,"line_end":269,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12195,"byte_end":12210,"line_start":271,"line_end":271,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12211,"byte_end":12305,"line_start":272,"line_end":272,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12306,"byte_end":12343,"line_start":273,"line_end":273,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12344,"byte_end":12423,"line_start":274,"line_end":274,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12424,"byte_end":12461,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12462,"byte_end":12558,"line_start":276,"line_end":276,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12559,"byte_end":12562,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12563,"byte_end":12578,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"! assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12579,"byte_end":12677,"line_start":279,"line_end":279,"column_start":1,"column_end":99}},{"value":"! assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12678,"byte_end":12778,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12779,"byte_end":12782,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12783,"byte_end":12816,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12817,"byte_end":12902,"line_start":283,"line_end":283,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12903,"byte_end":12967,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":12968,"byte_end":13050,"line_start":285,"line_end":285,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13051,"byte_end":13089,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"! assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13090,"byte_end":13180,"line_start":287,"line_end":287,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13181,"byte_end":13188,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13189,"byte_end":13192,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13193,"byte_end":13270,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13271,"byte_end":13328,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"! ### Conversion from and to EPOCH timestamps","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13333,"byte_end":13380,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13381,"byte_end":13384,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"! Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13385,"byte_end":13479,"line_start":295,"line_end":295,"column_start":1,"column_end":95}},{"value":"! to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13480,"byte_end":13562,"line_start":296,"line_end":296,"column_start":1,"column_end":83}},{"value":"! (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13563,"byte_end":13625,"line_start":297,"line_end":297,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13626,"byte_end":13629,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"! Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13630,"byte_end":13735,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"! from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13736,"byte_end":13810,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"! [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13811,"byte_end":13904,"line_start":301,"line_end":301,"column_start":1,"column_end":94}},{"value":"! to get the number of additional number of nanoseconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13905,"byte_end":13963,"line_start":302,"line_end":302,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13964,"byte_end":13967,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13968,"byte_end":13979,"line_start":304,"line_end":304,"column_start":1,"column_end":12}},{"value":"! // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":13980,"byte_end":14038,"line_start":305,"line_end":305,"column_start":1,"column_end":59}},{"value":"! use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14039,"byte_end":14081,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14082,"byte_end":14085,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"! // Construct a datetime from epoch:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14086,"byte_end":14125,"line_start":308,"line_end":308,"column_start":1,"column_end":40}},{"value":"! let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14126,"byte_end":14171,"line_start":309,"line_end":309,"column_start":1,"column_end":46}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14172,"byte_end":14239,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14240,"byte_end":14243,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"! // Get epoch value from a datetime:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14244,"byte_end":14283,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"! let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14284,"byte_end":14370,"line_start":313,"line_end":313,"column_start":1,"column_end":87}},{"value":"! assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14371,"byte_end":14417,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14418,"byte_end":14425,"line_start":315,"line_end":315,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14426,"byte_end":14429,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14430,"byte_end":14453,"line_start":317,"line_end":317,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14454,"byte_end":14457,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14458,"byte_end":14542,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14543,"byte_end":14622,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14623,"byte_end":14717,"line_start":321,"line_end":321,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14718,"byte_end":14721,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14722,"byte_end":14733,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14734,"byte_end":14761,"line_start":324,"line_end":324,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14762,"byte_end":14798,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14799,"byte_end":14802,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14803,"byte_end":14903,"line_start":327,"line_end":327,"column_start":1,"column_end":101}},{"value":"! assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14904,"byte_end":14952,"line_start":328,"line_end":328,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":14953,"byte_end":15005,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15006,"byte_end":15009,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15010,"byte_end":15072,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15073,"byte_end":15134,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15135,"byte_end":15228,"line_start":333,"line_end":333,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15229,"byte_end":15254,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15255,"byte_end":15262,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15263,"byte_end":15266,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15267,"byte_end":15359,"line_start":337,"line_end":337,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15364,"byte_end":15434,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15435,"byte_end":15498,"line_start":340,"line_end":340,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15499,"byte_end":15571,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15572,"byte_end":15632,"line_start":342,"line_end":342,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15633,"byte_end":15636,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15637,"byte_end":15664,"line_start":344,"line_end":344,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15665,"byte_end":15668,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15669,"byte_end":15755,"line_start":346,"line_end":346,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15756,"byte_end":15812,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"! [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15813,"byte_end":15869,"line_start":348,"line_end":348,"column_start":1,"column_end":57}},{"value":"! [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15870,"byte_end":15944,"line_start":349,"line_end":349,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15945,"byte_end":15948,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":15949,"byte_end":16022,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16023,"byte_end":16101,"line_start":352,"line_end":352,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16102,"byte_end":16172,"line_start":353,"line_end":353,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16173,"byte_end":16176,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16177,"byte_end":16266,"line_start":355,"line_end":355,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16267,"byte_end":16337,"line_start":356,"line_end":356,"column_start":1,"column_end":71}},{"value":"! a view to the naive local time,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16338,"byte_end":16373,"line_start":357,"line_end":357,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16374,"byte_end":16444,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"! a view to the naive UTC time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16445,"byte_end":16478,"line_start":359,"line_end":359,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16479,"byte_end":16482,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16483,"byte_end":16501,"line_start":361,"line_end":361,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16502,"byte_end":16505,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16506,"byte_end":16596,"line_start":363,"line_end":363,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16597,"byte_end":16696,"line_start":364,"line_end":364,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16697,"byte_end":16700,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16701,"byte_end":16777,"line_start":366,"line_end":366,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16778,"byte_end":16832,"line_start":367,"line_end":367,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16833,"byte_end":16836,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16837,"byte_end":16894,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16895,"byte_end":16991,"line_start":370,"line_end":370,"column_start":1,"column_end":97}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":16992,"byte_end":17062,"line_start":371,"line_end":371,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17063,"byte_end":17140,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17141,"byte_end":17231,"line_start":373,"line_end":373,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17232,"byte_end":17248,"line_start":374,"line_end":374,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17249,"byte_end":17252,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17253,"byte_end":17346,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17347,"byte_end":17420,"line_start":377,"line_end":377,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17421,"byte_end":17487,"line_start":378,"line_end":378,"column_start":1,"column_end":67}},{"value":"! and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17488,"byte_end":17561,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17562,"byte_end":17565,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"! Non ISO week handling is not yet supported.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17566,"byte_end":17613,"line_start":381,"line_end":381,"column_start":1,"column_end":48}},{"value":"! For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17614,"byte_end":17691,"line_start":382,"line_end":382,"column_start":1,"column_end":78}},{"value":"! crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17692,"byte_end":17756,"line_start":383,"line_end":383,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17757,"byte_end":17760,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17761,"byte_end":17814,"line_start":385,"line_end":385,"column_start":1,"column_end":54}},{"value":"! For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":17815,"byte_end":17911,"line_start":386,"line_end":386,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":18060,"byte_end":18082,"line_start":390,"line_end":390,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":18083,"byte_end":18122,"line_start":391,"line_end":391,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":18123,"byte_end":18142,"line_start":392,"line_end":392,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":18192,"byte_end":18216,"line_start":394,"line_end":394,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20787,"byte_end":20794,"line_start":465,"line_end":465,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":53}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":20696,"byte_end":20778,"line_start":464,"line_end":464,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":1423},{"krate":0,"index":1454},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1445},{"krate":0,"index":1443},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1434},{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":123},{"krate":0,"index":182},{"krate":0,"index":218},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"! The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":44836,"byte_end":44907,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":44908,"byte_end":44911,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":44912,"byte_end":44975,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":44976,"byte_end":44979,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":44980,"byte_end":45041,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45042,"byte_end":45101,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"! 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45102,"byte_end":45163,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45164,"byte_end":45227,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45228,"byte_end":45231,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45232,"byte_end":45328,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"! 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45329,"byte_end":45425,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45426,"byte_end":45517,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"! Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45518,"byte_end":45598,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45599,"byte_end":45667,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! and provides implementations for 1 and 3.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45668,"byte_end":45713,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"! An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45714,"byte_end":45803,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1425},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46257,"byte_end":46261,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1423},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46129,"byte_end":46176,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46181,"byte_end":46252,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1427},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46335,"byte_end":46341,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1423},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46267,"byte_end":46330,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1430},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46507,"byte_end":46516,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1423},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46350,"byte_end":46426,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46431,"byte_end":46502,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1423},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46108,"byte_end":46119,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1430}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":45964,"byte_end":46047,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46666,"byte_end":46672,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46572,"byte_end":46654,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46900,"byte_end":46908,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46806,"byte_end":46888,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47165,"byte_end":47171,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47073,"byte_end":47153,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47418,"byte_end":47421,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47336,"byte_end":47406,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47996,"byte_end":48004,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47771,"byte_end":47842,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47847,"byte_end":47895,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47900,"byte_end":47903,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47908,"byte_end":47970,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47975,"byte_end":47984,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48499,"byte_end":48510,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48271,"byte_end":48345,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48350,"byte_end":48398,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48403,"byte_end":48406,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48411,"byte_end":48473,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48478,"byte_end":48487,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49130,"byte_end":49147,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48804,"byte_end":48891,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48896,"byte_end":48976,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":48981,"byte_end":49029,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49034,"byte_end":49037,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49042,"byte_end":49104,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49109,"byte_end":49118,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49846,"byte_end":49863,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49516,"byte_end":49603,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49608,"byte_end":49692,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49697,"byte_end":49745,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49750,"byte_end":49753,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49758,"byte_end":49820,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":49825,"byte_end":49834,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50564,"byte_end":50580,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50232,"byte_end":50318,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50323,"byte_end":50410,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50415,"byte_end":50463,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50468,"byte_end":50471,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50476,"byte_end":50538,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50543,"byte_end":50552,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51068,"byte_end":51074,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50985,"byte_end":51056,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51429,"byte_end":51435,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":97}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51376,"byte_end":51418,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51541,"byte_end":51544,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51470,"byte_end":51533,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51743,"byte_end":51751,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51571,"byte_end":51589,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51590,"byte_end":51593,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51594,"byte_end":51683,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51684,"byte_end":51732,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51974,"byte_end":51980,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51773,"byte_end":51803,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51808,"byte_end":51880,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51885,"byte_end":51964,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52597,"byte_end":52600,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51995,"byte_end":52066,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52071,"byte_end":52150,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52155,"byte_end":52158,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52163,"byte_end":52256,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52261,"byte_end":52338,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52343,"byte_end":52346,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52351,"byte_end":52413,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52418,"byte_end":52421,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52426,"byte_end":52439,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52444,"byte_end":52447,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52452,"byte_end":52460,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52465,"byte_end":52497,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52502,"byte_end":52505,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52510,"byte_end":52576,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52581,"byte_end":52589,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53416,"byte_end":53423,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52716,"byte_end":52787,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52792,"byte_end":52871,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52876,"byte_end":52879,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52884,"byte_end":52977,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":52982,"byte_end":53059,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53064,"byte_end":53067,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53072,"byte_end":53142,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53147,"byte_end":53150,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53155,"byte_end":53168,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53173,"byte_end":53176,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53181,"byte_end":53189,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53194,"byte_end":53239,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53244,"byte_end":53247,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53252,"byte_end":53331,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53336,"byte_end":53395,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53400,"byte_end":53408,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54272,"byte_end":54274,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53660,"byte_end":53751,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53756,"byte_end":53835,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53840,"byte_end":53843,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53848,"byte_end":53941,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":53946,"byte_end":54023,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54028,"byte_end":54031,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54036,"byte_end":54091,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54096,"byte_end":54099,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54104,"byte_end":54117,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54122,"byte_end":54125,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54130,"byte_end":54138,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54143,"byte_end":54175,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54180,"byte_end":54183,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54188,"byte_end":54251,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54256,"byte_end":54264,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54825,"byte_end":54831,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54378,"byte_end":54469,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54474,"byte_end":54553,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54558,"byte_end":54561,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54566,"byte_end":54659,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54664,"byte_end":54741,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54746,"byte_end":54749,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":54754,"byte_end":54817,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55809,"byte_end":55815,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55056,"byte_end":55147,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55152,"byte_end":55178,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55183,"byte_end":55262,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55267,"byte_end":55338,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55343,"byte_end":55346,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55351,"byte_end":55444,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55449,"byte_end":55526,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55531,"byte_end":55534,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55539,"byte_end":55602,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55607,"byte_end":55610,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55615,"byte_end":55628,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55633,"byte_end":55636,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55641,"byte_end":55649,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55654,"byte_end":55695,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55700,"byte_end":55703,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55708,"byte_end":55788,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55793,"byte_end":55801,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56506,"byte_end":56516,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":55944,"byte_end":56035,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56040,"byte_end":56066,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56071,"byte_end":56150,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56155,"byte_end":56226,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56231,"byte_end":56234,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56239,"byte_end":56332,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56337,"byte_end":56414,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56419,"byte_end":56422,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56427,"byte_end":56498,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57341,"byte_end":57350,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56766,"byte_end":56828,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56833,"byte_end":56893,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56898,"byte_end":56969,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56974,"byte_end":56977,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":56982,"byte_end":57057,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57062,"byte_end":57139,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57144,"byte_end":57147,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57152,"byte_end":57165,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57170,"byte_end":57173,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57178,"byte_end":57186,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57191,"byte_end":57223,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57228,"byte_end":57231,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57236,"byte_end":57320,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57325,"byte_end":57333,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57833,"byte_end":57846,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57461,"byte_end":57523,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57528,"byte_end":57588,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57593,"byte_end":57664,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57669,"byte_end":57672,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57677,"byte_end":57749,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":57754,"byte_end":57825,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58586,"byte_end":58602,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58107,"byte_end":58174,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58179,"byte_end":58240,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58245,"byte_end":58248,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58253,"byte_end":58322,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58327,"byte_end":58398,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58403,"byte_end":58406,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58411,"byte_end":58424,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58429,"byte_end":58432,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58437,"byte_end":58445,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58450,"byte_end":58482,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58487,"byte_end":58490,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58495,"byte_end":58565,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58570,"byte_end":58578,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59333,"byte_end":59353,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58705,"byte_end":58772,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58777,"byte_end":58838,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58843,"byte_end":58846,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58851,"byte_end":58854,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58859,"byte_end":58929,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58934,"byte_end":58989,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":58994,"byte_end":59020,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59025,"byte_end":59028,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59033,"byte_end":59046,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59051,"byte_end":59054,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59059,"byte_end":59067,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59072,"byte_end":59117,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59122,"byte_end":59170,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59175,"byte_end":59246,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59251,"byte_end":59301,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59306,"byte_end":59312,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59317,"byte_end":59325,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60055,"byte_end":60070,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59632,"byte_end":59698,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59703,"byte_end":59764,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59769,"byte_end":59772,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59777,"byte_end":59846,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59851,"byte_end":59862,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59867,"byte_end":59870,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59875,"byte_end":59888,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59893,"byte_end":59896,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59901,"byte_end":59909,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59914,"byte_end":59946,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59951,"byte_end":59954,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":59959,"byte_end":60034,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60039,"byte_end":60047,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60857,"byte_end":60874,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60353,"byte_end":60409,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60414,"byte_end":60463,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60468,"byte_end":60538,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60543,"byte_end":60581,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60586,"byte_end":60589,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60594,"byte_end":60668,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60673,"byte_end":60731,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60736,"byte_end":60739,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60744,"byte_end":60814,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":60819,"byte_end":60849,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61145,"byte_end":61156,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61090,"byte_end":61137,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61268,"byte_end":61290,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61194,"byte_end":61260,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61430,"byte_end":61456,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61352,"byte_end":61422,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61606,"byte_end":61621,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61522,"byte_end":61598,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61973,"byte_end":61992,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":61881,"byte_end":61965,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62266,"byte_end":62286,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62191,"byte_end":62258,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62412,"byte_end":62436,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62333,"byte_end":62404,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62643,"byte_end":62656,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62487,"byte_end":62538,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62543,"byte_end":62635,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62929,"byte_end":62946,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62769,"byte_end":62824,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":62829,"byte_end":62921,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66274,"byte_end":66285,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1458}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":65898,"byte_end":65969,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":65970,"byte_end":65973,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":65974,"byte_end":66031,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66032,"byte_end":66095,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66096,"byte_end":66169,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66170,"byte_end":66218,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66889,"byte_end":66893,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66340,"byte_end":66428,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66433,"byte_end":66486,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66491,"byte_end":66494,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66499,"byte_end":66537,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66542,"byte_end":66545,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66550,"byte_end":66563,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66568,"byte_end":66571,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66576,"byte_end":66584,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66589,"byte_end":66629,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66634,"byte_end":66654,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66659,"byte_end":66723,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66728,"byte_end":66792,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66797,"byte_end":66864,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66869,"byte_end":66877,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67228,"byte_end":67236,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67011,"byte_end":67099,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67104,"byte_end":67157,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67162,"byte_end":67165,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67170,"byte_end":67216,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67978,"byte_end":67982,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67429,"byte_end":67517,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67522,"byte_end":67575,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67580,"byte_end":67583,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67588,"byte_end":67626,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67631,"byte_end":67634,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67639,"byte_end":67652,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67657,"byte_end":67660,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67665,"byte_end":67673,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67678,"byte_end":67718,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67723,"byte_end":67743,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67748,"byte_end":67812,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67817,"byte_end":67881,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67886,"byte_end":67953,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":67958,"byte_end":67966,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68317,"byte_end":68325,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68100,"byte_end":68188,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68193,"byte_end":68246,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68251,"byte_end":68254,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68259,"byte_end":68305,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68624,"byte_end":68639,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68519,"byte_end":68598,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68603,"byte_end":68612,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68801,"byte_end":68816,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68696,"byte_end":68775,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68780,"byte_end":68789,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1472},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75884,"byte_end":75889,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75428,"byte_end":75503,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75504,"byte_end":75507,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75508,"byte_end":75565,"line_start":72,"line_end":72,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75566,"byte_end":75641,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75642,"byte_end":75656,"line_start":74,"line_end":74,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75657,"byte_end":75660,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75661,"byte_end":75674,"line_start":76,"line_end":76,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75675,"byte_end":75678,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75679,"byte_end":75687,"line_start":78,"line_end":78,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75688,"byte_end":75732,"line_start":79,"line_end":79,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75733,"byte_end":75736,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75737,"byte_end":75780,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75781,"byte_end":75833,"line_start":82,"line_end":82,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75834,"byte_end":75842,"line_start":83,"line_end":83,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75980,"byte_end":75985,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75909,"byte_end":75968,"line_start":88,"line_end":88,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":76211,"byte_end":76214,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":76044,"byte_end":76107,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n              \"wasmbind\")))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":76112,"byte_end":76199,"line_start":94,"line_end":94,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1479},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81519,"byte_end":81522,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":80873,"byte_end":80968,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":80969,"byte_end":81031,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81032,"byte_end":81035,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81036,"byte_end":81093,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81094,"byte_end":81165,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81166,"byte_end":81180,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81181,"byte_end":81184,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81185,"byte_end":81198,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81199,"byte_end":81202,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81203,"byte_end":81211,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81212,"byte_end":81269,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81270,"byte_end":81273,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81274,"byte_end":81356,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81357,"byte_end":81360,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81361,"byte_end":81402,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81403,"byte_end":81460,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81461,"byte_end":81469,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81637,"byte_end":81642,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81566,"byte_end":81625,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81864,"byte_end":81867,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81697,"byte_end":81760,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n              \"wasmbind\")))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81765,"byte_end":81852,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":251},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21472,"byte_end":21477,"line_start":497,"line_end":497,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":378},{"krate":0,"index":498},{"krate":0,"index":578},{"krate":0,"index":591},{"krate":0,"index":676},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"! Date and time types unconcerned with timezones.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21484,"byte_end":21535,"line_start":498,"line_end":498,"column_start":5,"column_end":56}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21540,"byte_end":21543,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21548,"byte_end":21602,"line_start":500,"line_end":500,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21607,"byte_end":21662,"line_start":501,"line_end":501,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21667,"byte_end":21731,"line_start":502,"line_end":502,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1490},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87539,"byte_end":87548,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1491}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":84961,"byte_end":85005,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85006,"byte_end":85069,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85070,"byte_end":85118,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85119,"byte_end":85188,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85189,"byte_end":85192,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85193,"byte_end":85212,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85213,"byte_end":85216,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85217,"byte_end":85293,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85294,"byte_end":85366,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85367,"byte_end":85370,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85371,"byte_end":85467,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85468,"byte_end":85555,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85556,"byte_end":85645,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85646,"byte_end":85649,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85650,"byte_end":85740,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85741,"byte_end":85822,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85823,"byte_end":85909,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85910,"byte_end":85913,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85914,"byte_end":85991,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":85992,"byte_end":86063,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86064,"byte_end":86146,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86147,"byte_end":86150,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86151,"byte_end":86166,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86167,"byte_end":86170,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86171,"byte_end":86241,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86242,"byte_end":86315,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86316,"byte_end":86319,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86320,"byte_end":86408,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86409,"byte_end":86479,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86480,"byte_end":86483,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86484,"byte_end":86578,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86579,"byte_end":86659,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86660,"byte_end":86663,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86664,"byte_end":86753,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86754,"byte_end":86834,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86835,"byte_end":86838,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86839,"byte_end":86919,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86920,"byte_end":86996,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":86997,"byte_end":87071,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87072,"byte_end":87123,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87124,"byte_end":87127,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87128,"byte_end":87146,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87147,"byte_end":87150,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87151,"byte_end":87242,"line_start":93,"line_end":93,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87243,"byte_end":87316,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87317,"byte_end":87396,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87397,"byte_end":87400,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87401,"byte_end":87466,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":292},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87667,"byte_end":87675,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87595,"byte_end":87656,"line_start":103,"line_end":103,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":293},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87825,"byte_end":87833,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":87752,"byte_end":87814,"line_start":105,"line_end":105,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90197,"byte_end":90205,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89467,"byte_end":89535,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89540,"byte_end":89566,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89571,"byte_end":89574,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89579,"byte_end":89641,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89646,"byte_end":89649,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89654,"byte_end":89667,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89672,"byte_end":89675,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89680,"byte_end":89688,"line_start":159,"line_end":159,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89693,"byte_end":89740,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89745,"byte_end":89748,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89753,"byte_end":89798,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89803,"byte_end":89834,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89839,"byte_end":89868,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89873,"byte_end":89901,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89906,"byte_end":89953,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":89958,"byte_end":90000,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90005,"byte_end":90045,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90050,"byte_end":90092,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90097,"byte_end":90172,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90177,"byte_end":90185,"line_start":171,"line_end":171,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91056,"byte_end":91068,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90354,"byte_end":90422,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90427,"byte_end":90453,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90458,"byte_end":90461,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90466,"byte_end":90536,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90541,"byte_end":90544,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90549,"byte_end":90562,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90567,"byte_end":90570,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90575,"byte_end":90583,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90588,"byte_end":90614,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90619,"byte_end":90622,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90627,"byte_end":90674,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90679,"byte_end":90682,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90687,"byte_end":90736,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90741,"byte_end":90790,"line_start":189,"line_end":189,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90795,"byte_end":90844,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90849,"byte_end":90920,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90925,"byte_end":90975,"line_start":192,"line_end":192,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":90980,"byte_end":91031,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91036,"byte_end":91044,"line_start":194,"line_end":194,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91962,"byte_end":91969,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91247,"byte_end":91313,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91318,"byte_end":91349,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91354,"byte_end":91357,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91362,"byte_end":91425,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91430,"byte_end":91433,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91438,"byte_end":91451,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91456,"byte_end":91459,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91464,"byte_end":91472,"line_start":207,"line_end":207,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91477,"byte_end":91524,"line_start":208,"line_end":208,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91529,"byte_end":91532,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91537,"byte_end":91578,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91583,"byte_end":91615,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91620,"byte_end":91651,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91656,"byte_end":91685,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91690,"byte_end":91718,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91723,"byte_end":91765,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91770,"byte_end":91810,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91815,"byte_end":91857,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91862,"byte_end":91937,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":91942,"byte_end":91950,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92839,"byte_end":92850,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92106,"byte_end":92172,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92177,"byte_end":92208,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92213,"byte_end":92216,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92221,"byte_end":92292,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92297,"byte_end":92300,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92305,"byte_end":92318,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92323,"byte_end":92326,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92331,"byte_end":92339,"line_start":231,"line_end":231,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92344,"byte_end":92370,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92375,"byte_end":92378,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92383,"byte_end":92428,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92433,"byte_end":92436,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92441,"byte_end":92487,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92492,"byte_end":92536,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92541,"byte_end":92587,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92592,"byte_end":92638,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92643,"byte_end":92711,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92716,"byte_end":92762,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92767,"byte_end":92814,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":92819,"byte_end":92827,"line_start":243,"line_end":243,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93856,"byte_end":93867,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93016,"byte_end":93080,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93085,"byte_end":93129,"line_start":250,"line_end":250,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93134,"byte_end":93210,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93215,"byte_end":93218,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93223,"byte_end":93286,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93291,"byte_end":93294,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93299,"byte_end":93312,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93317,"byte_end":93320,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93325,"byte_end":93333,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93338,"byte_end":93385,"line_start":258,"line_end":258,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93390,"byte_end":93393,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93398,"byte_end":93457,"line_start":260,"line_end":260,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93462,"byte_end":93504,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93509,"byte_end":93549,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93554,"byte_end":93596,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93601,"byte_end":93632,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93637,"byte_end":93666,"line_start":265,"line_end":265,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93671,"byte_end":93699,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93704,"byte_end":93751,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93756,"byte_end":93831,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":93836,"byte_end":93844,"line_start":269,"line_end":269,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":96230,"byte_end":96245,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94029,"byte_end":94093,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94098,"byte_end":94142,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94147,"byte_end":94223,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94228,"byte_end":94231,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94236,"byte_end":94307,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94312,"byte_end":94315,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94320,"byte_end":94333,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94338,"byte_end":94341,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94346,"byte_end":94354,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94359,"byte_end":94396,"line_start":283,"line_end":283,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94401,"byte_end":94404,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94409,"byte_end":94448,"line_start":285,"line_end":285,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94453,"byte_end":94506,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94511,"byte_end":94514,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94519,"byte_end":94580,"line_start":288,"line_end":288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94585,"byte_end":94669,"line_start":289,"line_end":289,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94674,"byte_end":94759,"line_start":290,"line_end":290,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94764,"byte_end":94826,"line_start":291,"line_end":291,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94831,"byte_end":94834,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94839,"byte_end":94903,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94908,"byte_end":94973,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94978,"byte_end":94986,"line_start":295,"line_end":295,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94991,"byte_end":94994,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":94999,"byte_end":95078,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95083,"byte_end":95086,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95091,"byte_end":95099,"line_start":299,"line_end":299,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95104,"byte_end":95143,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95148,"byte_end":95189,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95194,"byte_end":95249,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95254,"byte_end":95291,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95296,"byte_end":95361,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95366,"byte_end":95432,"line_start":305,"line_end":305,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95437,"byte_end":95523,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95528,"byte_end":95590,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95595,"byte_end":95680,"line_start":308,"line_end":308,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95685,"byte_end":95688,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95693,"byte_end":95758,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95763,"byte_end":95828,"line_start":311,"line_end":311,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95833,"byte_end":95870,"line_start":312,"line_end":312,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95875,"byte_end":95961,"line_start":313,"line_end":313,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":95966,"byte_end":96050,"line_start":314,"line_end":314,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":96055,"byte_end":96117,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":96122,"byte_end":96205,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":96210,"byte_end":96218,"line_start":317,"line_end":317,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99188,"byte_end":99209,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97457,"byte_end":97546,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97551,"byte_end":97580,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97585,"byte_end":97588,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97593,"byte_end":97632,"line_start":352,"line_end":352,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97637,"byte_end":97640,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97645,"byte_end":97658,"line_start":354,"line_end":354,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97663,"byte_end":97666,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97671,"byte_end":97679,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97684,"byte_end":97731,"line_start":357,"line_end":357,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97736,"byte_end":97739,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97744,"byte_end":97797,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97802,"byte_end":97877,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97882,"byte_end":97913,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97918,"byte_end":97947,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97952,"byte_end":97980,"line_start":363,"line_end":363,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":97985,"byte_end":98032,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98037,"byte_end":98079,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98084,"byte_end":98124,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98129,"byte_end":98171,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98176,"byte_end":98184,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98189,"byte_end":98192,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98197,"byte_end":98240,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98245,"byte_end":98297,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98302,"byte_end":98364,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98369,"byte_end":98403,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98408,"byte_end":98462,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98467,"byte_end":98470,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98475,"byte_end":98483,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98488,"byte_end":98514,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98519,"byte_end":98522,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98527,"byte_end":98568,"line_start":379,"line_end":379,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98573,"byte_end":98634,"line_start":380,"line_end":380,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98639,"byte_end":98695,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98700,"byte_end":98754,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98759,"byte_end":98764,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98769,"byte_end":98772,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98777,"byte_end":98850,"line_start":385,"line_end":385,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98855,"byte_end":98921,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98926,"byte_end":98929,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":98934,"byte_end":99000,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99005,"byte_end":99075,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99080,"byte_end":99149,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99154,"byte_end":99162,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99167,"byte_end":99176,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100158,"byte_end":100183,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99326,"byte_end":99415,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99420,"byte_end":99449,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99454,"byte_end":99457,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99462,"byte_end":99509,"line_start":400,"line_end":400,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99514,"byte_end":99517,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99522,"byte_end":99535,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99540,"byte_end":99543,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99548,"byte_end":99556,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99561,"byte_end":99587,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99592,"byte_end":99595,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99600,"byte_end":99662,"line_start":407,"line_end":407,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99667,"byte_end":99706,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99711,"byte_end":99714,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99719,"byte_end":99792,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99797,"byte_end":99867,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99872,"byte_end":99944,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":99949,"byte_end":100021,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100026,"byte_end":100077,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100082,"byte_end":100133,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100138,"byte_end":100146,"line_start":416,"line_end":416,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101893,"byte_end":101914,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100609,"byte_end":100702,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100707,"byte_end":100801,"line_start":426,"line_end":426,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100806,"byte_end":100891,"line_start":427,"line_end":427,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100896,"byte_end":100899,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100904,"byte_end":100916,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100921,"byte_end":100924,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":100929,"byte_end":101024,"line_start":431,"line_end":431,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101029,"byte_end":101122,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101127,"byte_end":101130,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101135,"byte_end":101191,"line_start":434,"line_end":434,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101196,"byte_end":101199,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101204,"byte_end":101217,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101222,"byte_end":101225,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101230,"byte_end":101238,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101243,"byte_end":101280,"line_start":439,"line_end":439,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101285,"byte_end":101288,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101293,"byte_end":101358,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101363,"byte_end":101402,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101407,"byte_end":101410,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101415,"byte_end":101501,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101506,"byte_end":101592,"line_start":445,"line_end":445,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101597,"byte_end":101684,"line_start":446,"line_end":446,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101689,"byte_end":101776,"line_start":447,"line_end":447,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101781,"byte_end":101868,"line_start":448,"line_end":448,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":101873,"byte_end":101881,"line_start":449,"line_end":449,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102789,"byte_end":102814,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102087,"byte_end":102180,"line_start":454,"line_end":454,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102185,"byte_end":102279,"line_start":455,"line_end":455,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102284,"byte_end":102388,"line_start":456,"line_end":456,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102393,"byte_end":102396,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102401,"byte_end":102409,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102414,"byte_end":102451,"line_start":459,"line_end":459,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102456,"byte_end":102534,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102539,"byte_end":102591,"line_start":461,"line_end":461,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102596,"byte_end":102604,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102609,"byte_end":102612,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102617,"byte_end":102709,"line_start":464,"line_end":464,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":102714,"byte_end":102777,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104834,"byte_end":104848,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103265,"byte_end":103348,"line_start":481,"line_end":481,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103353,"byte_end":103423,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103428,"byte_end":103466,"line_start":483,"line_end":483,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103471,"byte_end":103474,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103479,"byte_end":103492,"line_start":485,"line_end":485,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103497,"byte_end":103500,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103505,"byte_end":103513,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103518,"byte_end":103544,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103549,"byte_end":103552,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103557,"byte_end":103608,"line_start":490,"line_end":490,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103613,"byte_end":103616,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103621,"byte_end":103677,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103682,"byte_end":103734,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103739,"byte_end":103791,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103796,"byte_end":103848,"line_start":495,"line_end":495,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103853,"byte_end":103861,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103866,"byte_end":103869,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103874,"byte_end":103932,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103937,"byte_end":103940,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103945,"byte_end":103953,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103958,"byte_end":103986,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":103991,"byte_end":104044,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104049,"byte_end":104130,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104135,"byte_end":104188,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104193,"byte_end":104201,"line_start":505,"line_end":505,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104206,"byte_end":104209,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104214,"byte_end":104271,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104276,"byte_end":104279,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104284,"byte_end":104292,"line_start":509,"line_end":509,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104297,"byte_end":104325,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104330,"byte_end":104383,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104388,"byte_end":104444,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104449,"byte_end":104511,"line_start":513,"line_end":513,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104516,"byte_end":104524,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104529,"byte_end":104532,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104537,"byte_end":104619,"line_start":516,"line_end":516,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104624,"byte_end":104627,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104632,"byte_end":104640,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104645,"byte_end":104673,"line_start":519,"line_end":519,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104678,"byte_end":104731,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104736,"byte_end":104809,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":104814,"byte_end":104822,"line_start":522,"line_end":522,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105497,"byte_end":105505,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105036,"byte_end":105112,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105117,"byte_end":105120,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105125,"byte_end":105138,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105143,"byte_end":105146,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105151,"byte_end":105159,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105164,"byte_end":105218,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105223,"byte_end":105226,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105231,"byte_end":105275,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105280,"byte_end":105335,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105340,"byte_end":105343,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105348,"byte_end":105390,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105395,"byte_end":105424,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105429,"byte_end":105458,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105463,"byte_end":105471,"line_start":542,"line_end":542,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105476,"byte_end":105485,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106321,"byte_end":106328,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105600,"byte_end":105679,"line_start":548,"line_end":548,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105684,"byte_end":105687,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105692,"byte_end":105775,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105780,"byte_end":105854,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105859,"byte_end":105862,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105867,"byte_end":105916,"line_start":553,"line_end":553,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105921,"byte_end":105924,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105929,"byte_end":105942,"line_start":555,"line_end":555,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105947,"byte_end":105950,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105955,"byte_end":105963,"line_start":557,"line_end":557,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":105968,"byte_end":106040,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106045,"byte_end":106048,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106053,"byte_end":106097,"line_start":560,"line_end":560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106102,"byte_end":106105,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106110,"byte_end":106160,"line_start":562,"line_end":562,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106165,"byte_end":106197,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106202,"byte_end":106245,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106250,"byte_end":106282,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106287,"byte_end":106295,"line_start":566,"line_end":566,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106300,"byte_end":106309,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107214,"byte_end":107225,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106461,"byte_end":106540,"line_start":572,"line_end":572,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106545,"byte_end":106548,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106553,"byte_end":106636,"line_start":574,"line_end":574,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106641,"byte_end":106719,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106724,"byte_end":106727,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106732,"byte_end":106789,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106794,"byte_end":106797,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106802,"byte_end":106815,"line_start":579,"line_end":579,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106820,"byte_end":106823,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106828,"byte_end":106836,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106841,"byte_end":106867,"line_start":582,"line_end":582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106872,"byte_end":106875,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106880,"byte_end":106924,"line_start":584,"line_end":584,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106929,"byte_end":106978,"line_start":585,"line_end":585,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":106983,"byte_end":107067,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107072,"byte_end":107121,"line_start":587,"line_end":587,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107126,"byte_end":107175,"line_start":588,"line_end":588,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107180,"byte_end":107188,"line_start":589,"line_end":589,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107193,"byte_end":107202,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108164,"byte_end":108177,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107382,"byte_end":107474,"line_start":595,"line_end":595,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107479,"byte_end":107482,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107487,"byte_end":107528,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107533,"byte_end":107623,"line_start":598,"line_end":598,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107628,"byte_end":107631,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107636,"byte_end":107698,"line_start":600,"line_end":600,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107703,"byte_end":107706,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107711,"byte_end":107724,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107729,"byte_end":107732,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107737,"byte_end":107745,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107750,"byte_end":107822,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107827,"byte_end":107830,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107835,"byte_end":107879,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107884,"byte_end":107887,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107892,"byte_end":107953,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107958,"byte_end":107990,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":107995,"byte_end":108038,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108043,"byte_end":108075,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108080,"byte_end":108125,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108130,"byte_end":108138,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108143,"byte_end":108152,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109250,"byte_end":109267,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108335,"byte_end":108427,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108432,"byte_end":108435,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108440,"byte_end":108481,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108486,"byte_end":108576,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108581,"byte_end":108584,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108589,"byte_end":108659,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108664,"byte_end":108667,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108672,"byte_end":108685,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108690,"byte_end":108693,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108698,"byte_end":108706,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108711,"byte_end":108737,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108742,"byte_end":108745,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108750,"byte_end":108794,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108799,"byte_end":108861,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108866,"byte_end":108943,"line_start":634,"line_end":634,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":108948,"byte_end":109010,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109015,"byte_end":109077,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109082,"byte_end":109144,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109149,"byte_end":109211,"line_start":638,"line_end":638,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109216,"byte_end":109224,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109229,"byte_end":109238,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110286,"byte_end":110299,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109496,"byte_end":109588,"line_start":651,"line_end":651,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109593,"byte_end":109596,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109601,"byte_end":109646,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109651,"byte_end":109741,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109746,"byte_end":109749,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109754,"byte_end":109816,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109821,"byte_end":109824,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109829,"byte_end":109842,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109847,"byte_end":109850,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109855,"byte_end":109863,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109868,"byte_end":109940,"line_start":661,"line_end":661,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109945,"byte_end":109948,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":109953,"byte_end":109997,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110002,"byte_end":110005,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110010,"byte_end":110075,"line_start":665,"line_end":665,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110080,"byte_end":110112,"line_start":666,"line_end":666,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110117,"byte_end":110160,"line_start":667,"line_end":667,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110165,"byte_end":110197,"line_start":668,"line_end":668,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110202,"byte_end":110247,"line_start":669,"line_end":669,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110252,"byte_end":110260,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110265,"byte_end":110274,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111400,"byte_end":111417,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110457,"byte_end":110549,"line_start":676,"line_end":676,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110554,"byte_end":110557,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110562,"byte_end":110607,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110612,"byte_end":110702,"line_start":679,"line_end":679,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110707,"byte_end":110710,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110715,"byte_end":110785,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110790,"byte_end":110793,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110798,"byte_end":110811,"line_start":683,"line_end":683,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110816,"byte_end":110819,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110824,"byte_end":110832,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110837,"byte_end":110863,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110868,"byte_end":110871,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110876,"byte_end":110920,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110925,"byte_end":110991,"line_start":689,"line_end":689,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":110996,"byte_end":111077,"line_start":690,"line_end":690,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111082,"byte_end":111148,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111153,"byte_end":111219,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111224,"byte_end":111290,"line_start":693,"line_end":693,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111295,"byte_end":111361,"line_start":694,"line_end":694,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111366,"byte_end":111374,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111379,"byte_end":111388,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112440,"byte_end":112452,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111646,"byte_end":111737,"line_start":707,"line_end":707,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111742,"byte_end":111745,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111750,"byte_end":111798,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111803,"byte_end":111893,"line_start":710,"line_end":710,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111898,"byte_end":111901,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111906,"byte_end":111967,"line_start":712,"line_end":712,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111972,"byte_end":111975,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111980,"byte_end":111993,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":111998,"byte_end":112001,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112006,"byte_end":112014,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112019,"byte_end":112091,"line_start":717,"line_end":717,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112096,"byte_end":112099,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112104,"byte_end":112148,"line_start":719,"line_end":719,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112153,"byte_end":112156,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112161,"byte_end":112229,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112234,"byte_end":112266,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112271,"byte_end":112314,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112319,"byte_end":112351,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112356,"byte_end":112401,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112406,"byte_end":112414,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112419,"byte_end":112428,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113569,"byte_end":113585,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112607,"byte_end":112698,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112703,"byte_end":112706,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112711,"byte_end":112759,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112764,"byte_end":112854,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112859,"byte_end":112862,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112867,"byte_end":112936,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112941,"byte_end":112944,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112949,"byte_end":112962,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112967,"byte_end":112970,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112975,"byte_end":112983,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":112988,"byte_end":113014,"line_start":742,"line_end":742,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113019,"byte_end":113022,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113027,"byte_end":113071,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113076,"byte_end":113145,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113150,"byte_end":113234,"line_start":746,"line_end":746,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113239,"byte_end":113308,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113313,"byte_end":113382,"line_start":748,"line_end":748,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113387,"byte_end":113456,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113461,"byte_end":113530,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113535,"byte_end":113543,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":113548,"byte_end":113557,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115277,"byte_end":115281,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114745,"byte_end":114800,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114805,"byte_end":114808,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114813,"byte_end":114867,"line_start":798,"line_end":798,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114872,"byte_end":114875,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114880,"byte_end":114893,"line_start":800,"line_end":800,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114898,"byte_end":114901,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114906,"byte_end":114914,"line_start":802,"line_end":802,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114919,"byte_end":114945,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114950,"byte_end":114953,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":114958,"byte_end":115048,"line_start":805,"line_end":805,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115053,"byte_end":115143,"line_start":806,"line_end":806,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115148,"byte_end":115238,"line_start":807,"line_end":807,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115243,"byte_end":115251,"line_start":808,"line_end":808,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115256,"byte_end":115265,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115823,"byte_end":115831,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115362,"byte_end":115417,"line_start":814,"line_end":814,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115422,"byte_end":115425,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115430,"byte_end":115492,"line_start":816,"line_end":816,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115497,"byte_end":115500,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115505,"byte_end":115518,"line_start":818,"line_end":818,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115523,"byte_end":115526,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115531,"byte_end":115539,"line_start":820,"line_end":820,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115544,"byte_end":115570,"line_start":821,"line_end":821,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115575,"byte_end":115607,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115612,"byte_end":115615,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115620,"byte_end":115678,"line_start":824,"line_end":824,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115683,"byte_end":115737,"line_start":825,"line_end":825,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115742,"byte_end":115784,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115789,"byte_end":115797,"line_start":827,"line_end":827,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115802,"byte_end":115811,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116508,"byte_end":116512,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":115971,"byte_end":116030,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116035,"byte_end":116038,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116043,"byte_end":116098,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116103,"byte_end":116106,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116111,"byte_end":116124,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116129,"byte_end":116132,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116137,"byte_end":116145,"line_start":839,"line_end":839,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116150,"byte_end":116176,"line_start":840,"line_end":840,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116181,"byte_end":116184,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116189,"byte_end":116279,"line_start":842,"line_end":842,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116284,"byte_end":116374,"line_start":843,"line_end":843,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116379,"byte_end":116469,"line_start":844,"line_end":844,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116474,"byte_end":116482,"line_start":845,"line_end":845,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116487,"byte_end":116496,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117059,"byte_end":117067,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116593,"byte_end":116652,"line_start":851,"line_end":851,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116657,"byte_end":116660,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116665,"byte_end":116728,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116733,"byte_end":116736,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116741,"byte_end":116754,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116759,"byte_end":116762,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116767,"byte_end":116775,"line_start":857,"line_end":857,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116780,"byte_end":116806,"line_start":858,"line_end":858,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116811,"byte_end":116843,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116848,"byte_end":116851,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116856,"byte_end":116914,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116919,"byte_end":116973,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":116978,"byte_end":117020,"line_start":863,"line_end":863,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117025,"byte_end":117033,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117038,"byte_end":117047,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118114,"byte_end":118132,"line_start":892,"line_end":892,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117209,"byte_end":117274,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117279,"byte_end":117282,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117287,"byte_end":117338,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117343,"byte_end":117346,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117351,"byte_end":117364,"line_start":874,"line_end":874,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117369,"byte_end":117372,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117377,"byte_end":117385,"line_start":876,"line_end":876,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117390,"byte_end":117447,"line_start":877,"line_end":877,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117452,"byte_end":117478,"line_start":878,"line_end":878,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117483,"byte_end":117515,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117520,"byte_end":117543,"line_start":880,"line_end":880,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117548,"byte_end":117551,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117556,"byte_end":117600,"line_start":882,"line_end":882,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117605,"byte_end":117661,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117666,"byte_end":117722,"line_start":884,"line_end":884,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117727,"byte_end":117784,"line_start":885,"line_end":885,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117789,"byte_end":117844,"line_start":886,"line_end":886,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117849,"byte_end":117923,"line_start":887,"line_end":887,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":117928,"byte_end":118003,"line_start":888,"line_end":888,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118008,"byte_end":118077,"line_start":889,"line_end":889,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118082,"byte_end":118089,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118094,"byte_end":118102,"line_start":891,"line_end":891,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119738,"byte_end":119756,"line_start":927,"line_end":927,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118826,"byte_end":118898,"line_start":905,"line_end":905,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118903,"byte_end":118906,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118911,"byte_end":118962,"line_start":907,"line_end":907,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118967,"byte_end":118970,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118975,"byte_end":118988,"line_start":909,"line_end":909,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":118993,"byte_end":118996,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119001,"byte_end":119009,"line_start":911,"line_end":911,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119014,"byte_end":119071,"line_start":912,"line_end":912,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119076,"byte_end":119102,"line_start":913,"line_end":913,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119107,"byte_end":119139,"line_start":914,"line_end":914,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119144,"byte_end":119167,"line_start":915,"line_end":915,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119172,"byte_end":119175,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119180,"byte_end":119224,"line_start":917,"line_end":917,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119229,"byte_end":119285,"line_start":918,"line_end":918,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119290,"byte_end":119345,"line_start":919,"line_end":919,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119350,"byte_end":119407,"line_start":920,"line_end":920,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119412,"byte_end":119468,"line_start":921,"line_end":921,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119473,"byte_end":119547,"line_start":922,"line_end":922,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119552,"byte_end":119627,"line_start":923,"line_end":923,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119632,"byte_end":119701,"line_start":924,"line_end":924,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119706,"byte_end":119713,"line_start":925,"line_end":925,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":119718,"byte_end":119726,"line_start":926,"line_end":926,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121655,"byte_end":121676,"line_start":965,"line_end":965,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120450,"byte_end":120506,"line_start":940,"line_end":940,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120511,"byte_end":120556,"line_start":941,"line_end":941,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120561,"byte_end":120564,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120569,"byte_end":120616,"line_start":943,"line_end":943,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120621,"byte_end":120680,"line_start":944,"line_end":944,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120685,"byte_end":120688,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120693,"byte_end":120706,"line_start":946,"line_end":946,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120711,"byte_end":120714,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120719,"byte_end":120727,"line_start":948,"line_end":948,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120732,"byte_end":120789,"line_start":949,"line_end":949,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120794,"byte_end":120820,"line_start":950,"line_end":950,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120825,"byte_end":120848,"line_start":951,"line_end":951,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120853,"byte_end":120856,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120861,"byte_end":120900,"line_start":953,"line_end":953,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120905,"byte_end":120954,"line_start":954,"line_end":954,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120959,"byte_end":120962,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":120967,"byte_end":121051,"line_start":956,"line_end":956,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121056,"byte_end":121143,"line_start":957,"line_end":957,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121148,"byte_end":121234,"line_start":958,"line_end":958,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121239,"byte_end":121327,"line_start":959,"line_end":959,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121332,"byte_end":121419,"line_start":960,"line_end":960,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121424,"byte_end":121517,"line_start":961,"line_end":961,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121522,"byte_end":121618,"line_start":962,"line_end":962,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121623,"byte_end":121630,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":121635,"byte_end":121643,"line_start":964,"line_end":964,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123436,"byte_end":123453,"line_start":1006,"line_end":1006,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122267,"byte_end":122324,"line_start":977,"line_end":977,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122329,"byte_end":122390,"line_start":978,"line_end":978,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122395,"byte_end":122398,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122403,"byte_end":122453,"line_start":980,"line_end":980,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122458,"byte_end":122536,"line_start":981,"line_end":981,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122541,"byte_end":122544,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122549,"byte_end":122562,"line_start":983,"line_end":983,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122567,"byte_end":122570,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122575,"byte_end":122583,"line_start":985,"line_end":985,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122588,"byte_end":122614,"line_start":986,"line_end":986,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122619,"byte_end":122667,"line_start":987,"line_end":987,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122672,"byte_end":122675,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122680,"byte_end":122725,"line_start":989,"line_end":989,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122730,"byte_end":122774,"line_start":990,"line_end":990,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122779,"byte_end":122854,"line_start":991,"line_end":991,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122859,"byte_end":122934,"line_start":992,"line_end":992,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122939,"byte_end":122947,"line_start":993,"line_end":993,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122952,"byte_end":122955,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":122960,"byte_end":123044,"line_start":995,"line_end":995,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123049,"byte_end":123052,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123057,"byte_end":123065,"line_start":997,"line_end":997,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123070,"byte_end":123098,"line_start":998,"line_end":998,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123103,"byte_end":123153,"line_start":999,"line_end":999,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123158,"byte_end":123213,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123218,"byte_end":123264,"line_start":1001,"line_end":1001,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123269,"byte_end":123339,"line_start":1002,"line_end":1002,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123344,"byte_end":123352,"line_start":1003,"line_end":1003,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123357,"byte_end":123410,"line_start":1004,"line_end":1004,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123415,"byte_end":123424,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125141,"byte_end":125147,"line_start":1048,"line_end":1048,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123649,"byte_end":123703,"line_start":1014,"line_end":1014,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123708,"byte_end":123778,"line_start":1015,"line_end":1015,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123783,"byte_end":123821,"line_start":1016,"line_end":1016,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123826,"byte_end":123829,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123834,"byte_end":123869,"line_start":1018,"line_end":1018,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123874,"byte_end":123947,"line_start":1019,"line_end":1019,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":123952,"byte_end":124009,"line_start":1020,"line_end":1020,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124014,"byte_end":124076,"line_start":1021,"line_end":1021,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124081,"byte_end":124141,"line_start":1022,"line_end":1022,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124146,"byte_end":124149,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124154,"byte_end":124218,"line_start":1024,"line_end":1024,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124223,"byte_end":124286,"line_start":1025,"line_end":1025,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124291,"byte_end":124366,"line_start":1026,"line_end":1026,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124371,"byte_end":124374,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124379,"byte_end":124392,"line_start":1028,"line_end":1028,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124397,"byte_end":124400,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124405,"byte_end":124413,"line_start":1030,"line_end":1030,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124418,"byte_end":124444,"line_start":1031,"line_end":1031,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124449,"byte_end":124452,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124457,"byte_end":124501,"line_start":1033,"line_end":1033,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124506,"byte_end":124569,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124574,"byte_end":124662,"line_start":1035,"line_end":1035,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124667,"byte_end":124675,"line_start":1036,"line_end":1036,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124680,"byte_end":124683,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124688,"byte_end":124772,"line_start":1038,"line_end":1038,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124777,"byte_end":124780,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124785,"byte_end":124793,"line_start":1040,"line_end":1040,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124798,"byte_end":124826,"line_start":1041,"line_end":1041,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124831,"byte_end":124877,"line_start":1042,"line_end":1042,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124882,"byte_end":124948,"line_start":1043,"line_end":1043,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":124953,"byte_end":125044,"line_start":1044,"line_end":1044,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125049,"byte_end":125057,"line_start":1045,"line_end":1045,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125062,"byte_end":125115,"line_start":1046,"line_end":1046,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125120,"byte_end":125129,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1513},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174182,"byte_end":174195,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1514},{"krate":0,"index":1515}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173318,"byte_end":173371,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173372,"byte_end":173375,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173376,"byte_end":173389,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173390,"byte_end":173393,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173394,"byte_end":173478,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173479,"byte_end":173482,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173483,"byte_end":173491,"line_start":35,"line_end":35,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173492,"byte_end":173535,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173536,"byte_end":173539,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173540,"byte_end":173619,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173620,"byte_end":173637,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173638,"byte_end":173646,"line_start":40,"line_end":40,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173647,"byte_end":173650,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173651,"byte_end":173714,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173715,"byte_end":173763,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173764,"byte_end":173815,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173816,"byte_end":173819,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173820,"byte_end":173828,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173829,"byte_end":173874,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173875,"byte_end":173956,"line_start":48,"line_end":48,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":173957,"byte_end":174003,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174004,"byte_end":174007,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174008,"byte_end":174051,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174052,"byte_end":174106,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174107,"byte_end":174115,"line_start":53,"line_end":53,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174857,"byte_end":174860,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174268,"byte_end":174330,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174335,"byte_end":174417,"line_start":62,"line_end":62,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174422,"byte_end":174476,"line_start":63,"line_end":63,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174481,"byte_end":174484,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174489,"byte_end":174502,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174507,"byte_end":174510,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174515,"byte_end":174523,"line_start":67,"line_end":67,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174528,"byte_end":174582,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174587,"byte_end":174590,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174595,"byte_end":174639,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174644,"byte_end":174699,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174704,"byte_end":174707,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174712,"byte_end":174750,"line_start":73,"line_end":73,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174755,"byte_end":174784,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174789,"byte_end":174818,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174823,"byte_end":174831,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174836,"byte_end":174845,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176143,"byte_end":176157,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174974,"byte_end":175043,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175048,"byte_end":175087,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175092,"byte_end":175160,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175165,"byte_end":175236,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175241,"byte_end":175244,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175249,"byte_end":175297,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175302,"byte_end":175378,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175383,"byte_end":175386,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175391,"byte_end":175465,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175470,"byte_end":175550,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175555,"byte_end":175616,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175621,"byte_end":175624,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175629,"byte_end":175704,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175709,"byte_end":175712,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175717,"byte_end":175730,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175735,"byte_end":175738,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175743,"byte_end":175751,"line_start":98,"line_end":98,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175756,"byte_end":175799,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175804,"byte_end":175807,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175812,"byte_end":175870,"line_start":101,"line_end":101,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175875,"byte_end":175954,"line_start":102,"line_end":102,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175959,"byte_end":175962,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":175967,"byte_end":176028,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176033,"byte_end":176104,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176109,"byte_end":176117,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176122,"byte_end":176131,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177499,"byte_end":177517,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176342,"byte_end":176411,"line_start":113,"line_end":113,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176416,"byte_end":176455,"line_start":114,"line_end":114,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176460,"byte_end":176528,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176533,"byte_end":176604,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176609,"byte_end":176612,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176617,"byte_end":176665,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176670,"byte_end":176760,"line_start":119,"line_end":119,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176765,"byte_end":176842,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176847,"byte_end":176850,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176855,"byte_end":176938,"line_start":122,"line_end":122,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176943,"byte_end":176946,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176951,"byte_end":176964,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176969,"byte_end":176972,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176977,"byte_end":176985,"line_start":126,"line_end":126,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":176990,"byte_end":177033,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177038,"byte_end":177055,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177060,"byte_end":177063,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177068,"byte_end":177131,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177136,"byte_end":177139,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177144,"byte_end":177192,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177197,"byte_end":177255,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177260,"byte_end":177335,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177340,"byte_end":177400,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177405,"byte_end":177460,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177465,"byte_end":177473,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":177478,"byte_end":177487,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180902,"byte_end":180916,"line_start":213,"line_end":213,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178039,"byte_end":178126,"line_start":152,"line_end":152,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178131,"byte_end":178201,"line_start":153,"line_end":153,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178206,"byte_end":178244,"line_start":154,"line_end":154,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178249,"byte_end":178252,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178257,"byte_end":178270,"line_start":156,"line_end":156,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178275,"byte_end":178278,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178283,"byte_end":178291,"line_start":158,"line_end":158,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178296,"byte_end":178339,"line_start":159,"line_end":159,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178344,"byte_end":178347,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178352,"byte_end":178407,"line_start":161,"line_end":161,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178412,"byte_end":178415,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178420,"byte_end":178494,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178499,"byte_end":178570,"line_start":164,"line_end":164,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178575,"byte_end":178651,"line_start":165,"line_end":165,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178656,"byte_end":178743,"line_start":166,"line_end":166,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178748,"byte_end":178756,"line_start":167,"line_end":167,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178761,"byte_end":178764,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178769,"byte_end":178818,"line_start":169,"line_end":169,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178823,"byte_end":178826,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178831,"byte_end":178839,"line_start":171,"line_end":171,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178844,"byte_end":178889,"line_start":172,"line_end":172,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178894,"byte_end":178951,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":178956,"byte_end":179037,"line_start":174,"line_end":174,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179042,"byte_end":179115,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179120,"byte_end":179128,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179133,"byte_end":179136,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179141,"byte_end":179230,"line_start":178,"line_end":178,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179235,"byte_end":179297,"line_start":179,"line_end":179,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179302,"byte_end":179378,"line_start":180,"line_end":180,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179383,"byte_end":179386,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179391,"byte_end":179399,"line_start":182,"line_end":182,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179404,"byte_end":179449,"line_start":183,"line_end":183,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179454,"byte_end":179511,"line_start":184,"line_end":184,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179516,"byte_end":179597,"line_start":185,"line_end":185,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179602,"byte_end":179686,"line_start":186,"line_end":186,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179691,"byte_end":179699,"line_start":187,"line_end":187,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179704,"byte_end":179707,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179712,"byte_end":179755,"line_start":189,"line_end":189,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179760,"byte_end":179831,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179836,"byte_end":179839,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179844,"byte_end":179852,"line_start":192,"line_end":192,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179857,"byte_end":179902,"line_start":193,"line_end":193,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179907,"byte_end":179964,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":179969,"byte_end":180032,"line_start":195,"line_end":195,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180037,"byte_end":180107,"line_start":196,"line_end":196,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180112,"byte_end":180115,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180120,"byte_end":180177,"line_start":198,"line_end":198,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180182,"byte_end":180247,"line_start":199,"line_end":199,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180252,"byte_end":180323,"line_start":200,"line_end":200,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180328,"byte_end":180405,"line_start":201,"line_end":201,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180410,"byte_end":180418,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180423,"byte_end":180426,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180431,"byte_end":180513,"line_start":204,"line_end":204,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180518,"byte_end":180521,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180526,"byte_end":180534,"line_start":206,"line_end":206,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180539,"byte_end":180571,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180576,"byte_end":180633,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180638,"byte_end":180692,"line_start":209,"line_end":209,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180697,"byte_end":180788,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180793,"byte_end":180877,"line_start":211,"line_end":211,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":180882,"byte_end":180890,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181438,"byte_end":181442,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181149,"byte_end":181180,"line_start":219,"line_end":219,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181185,"byte_end":181188,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181193,"byte_end":181206,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181211,"byte_end":181214,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181219,"byte_end":181227,"line_start":223,"line_end":223,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181232,"byte_end":181258,"line_start":224,"line_end":224,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181263,"byte_end":181266,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181271,"byte_end":181335,"line_start":226,"line_end":226,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181340,"byte_end":181399,"line_start":227,"line_end":227,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181404,"byte_end":181412,"line_start":228,"line_end":228,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181417,"byte_end":181426,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181795,"byte_end":181799,"line_start":245,"line_end":245,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181494,"byte_end":181525,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181530,"byte_end":181533,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181538,"byte_end":181551,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181556,"byte_end":181559,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181564,"byte_end":181572,"line_start":238,"line_end":238,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181577,"byte_end":181616,"line_start":239,"line_end":239,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181621,"byte_end":181624,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181629,"byte_end":181693,"line_start":241,"line_end":241,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181698,"byte_end":181756,"line_start":242,"line_end":242,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181761,"byte_end":181769,"line_start":243,"line_end":243,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181774,"byte_end":181783,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182706,"byte_end":182715,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181851,"byte_end":181932,"line_start":249,"line_end":249,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181937,"byte_end":181940,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":181945,"byte_end":182000,"line_start":251,"line_end":251,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182005,"byte_end":182093,"line_start":252,"line_end":252,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182098,"byte_end":182101,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182106,"byte_end":182119,"line_start":254,"line_end":254,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182124,"byte_end":182127,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182132,"byte_end":182140,"line_start":256,"line_end":256,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182145,"byte_end":182171,"line_start":257,"line_end":257,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182176,"byte_end":182179,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182184,"byte_end":182257,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182262,"byte_end":182296,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182301,"byte_end":182304,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182309,"byte_end":182373,"line_start":262,"line_end":262,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182378,"byte_end":182424,"line_start":263,"line_end":263,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182429,"byte_end":182432,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182437,"byte_end":182504,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182509,"byte_end":182544,"line_start":266,"line_end":266,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182549,"byte_end":182552,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182557,"byte_end":182617,"line_start":268,"line_end":268,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182622,"byte_end":182667,"line_start":269,"line_end":269,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182672,"byte_end":182680,"line_start":270,"line_end":270,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":182685,"byte_end":182694,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184093,"byte_end":184109,"line_start":304,"line_end":304,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183017,"byte_end":183101,"line_start":279,"line_end":279,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183106,"byte_end":183109,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183114,"byte_end":183169,"line_start":281,"line_end":281,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183174,"byte_end":183262,"line_start":282,"line_end":282,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183267,"byte_end":183270,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183275,"byte_end":183342,"line_start":284,"line_end":284,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183347,"byte_end":183420,"line_start":285,"line_end":285,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183425,"byte_end":183494,"line_start":286,"line_end":286,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183499,"byte_end":183550,"line_start":287,"line_end":287,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183555,"byte_end":183558,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183563,"byte_end":183576,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183581,"byte_end":183584,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183589,"byte_end":183597,"line_start":291,"line_end":291,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183602,"byte_end":183628,"line_start":292,"line_end":292,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183633,"byte_end":183636,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183641,"byte_end":183714,"line_start":294,"line_end":294,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183719,"byte_end":183764,"line_start":295,"line_end":295,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183769,"byte_end":183772,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183777,"byte_end":183852,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183857,"byte_end":183914,"line_start":298,"line_end":298,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183919,"byte_end":183922,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":183927,"byte_end":184005,"line_start":300,"line_end":300,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184010,"byte_end":184054,"line_start":301,"line_end":301,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184059,"byte_end":184067,"line_start":302,"line_end":302,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184072,"byte_end":184081,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185577,"byte_end":185592,"line_start":343,"line_end":343,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184240,"byte_end":184323,"line_start":309,"line_end":309,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184328,"byte_end":184331,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184336,"byte_end":184391,"line_start":311,"line_end":311,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184396,"byte_end":184484,"line_start":312,"line_end":312,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184489,"byte_end":184492,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184497,"byte_end":184509,"line_start":314,"line_end":314,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184514,"byte_end":184517,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184522,"byte_end":184589,"line_start":316,"line_end":316,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184594,"byte_end":184664,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184669,"byte_end":184737,"line_start":318,"line_end":318,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184742,"byte_end":184776,"line_start":319,"line_end":319,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184781,"byte_end":184784,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184789,"byte_end":184863,"line_start":321,"line_end":321,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184868,"byte_end":184928,"line_start":322,"line_end":322,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184933,"byte_end":184936,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184941,"byte_end":184954,"line_start":324,"line_end":324,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184959,"byte_end":184962,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184967,"byte_end":184975,"line_start":326,"line_end":326,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":184980,"byte_end":185023,"line_start":327,"line_end":327,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185028,"byte_end":185031,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185036,"byte_end":185108,"line_start":329,"line_end":329,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185113,"byte_end":185165,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185170,"byte_end":185173,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185178,"byte_end":185252,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185257,"byte_end":185260,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185265,"byte_end":185306,"line_start":334,"line_end":334,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185311,"byte_end":185348,"line_start":335,"line_end":335,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185353,"byte_end":185402,"line_start":336,"line_end":336,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185407,"byte_end":185422,"line_start":337,"line_end":337,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185427,"byte_end":185438,"line_start":338,"line_end":338,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185443,"byte_end":185527,"line_start":339,"line_end":339,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185532,"byte_end":185538,"line_start":340,"line_end":340,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185543,"byte_end":185551,"line_start":341,"line_end":341,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185556,"byte_end":185565,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186370,"byte_end":186393,"line_start":365,"line_end":365,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185731,"byte_end":185807,"line_start":348,"line_end":348,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185812,"byte_end":185815,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185820,"byte_end":185862,"line_start":350,"line_end":350,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185867,"byte_end":185949,"line_start":351,"line_end":351,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185954,"byte_end":185957,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185962,"byte_end":185975,"line_start":353,"line_end":353,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185980,"byte_end":185983,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":185988,"byte_end":185996,"line_start":355,"line_end":355,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186001,"byte_end":186027,"line_start":356,"line_end":356,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186032,"byte_end":186035,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186040,"byte_end":186122,"line_start":358,"line_end":358,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186127,"byte_end":186177,"line_start":359,"line_end":359,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186182,"byte_end":186185,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186190,"byte_end":186274,"line_start":361,"line_end":361,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186279,"byte_end":186331,"line_start":362,"line_end":362,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186336,"byte_end":186344,"line_start":363,"line_end":363,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186349,"byte_end":186358,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187126,"byte_end":187149,"line_start":386,"line_end":386,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186471,"byte_end":186547,"line_start":369,"line_end":369,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186552,"byte_end":186555,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186560,"byte_end":186606,"line_start":371,"line_end":371,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186611,"byte_end":186697,"line_start":372,"line_end":372,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186702,"byte_end":186705,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186710,"byte_end":186723,"line_start":374,"line_end":374,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186728,"byte_end":186731,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186736,"byte_end":186744,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186749,"byte_end":186775,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186780,"byte_end":186783,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186788,"byte_end":186870,"line_start":379,"line_end":379,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186875,"byte_end":186929,"line_start":380,"line_end":380,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186934,"byte_end":186937,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":186942,"byte_end":187026,"line_start":382,"line_end":382,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187031,"byte_end":187087,"line_start":383,"line_end":383,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187092,"byte_end":187100,"line_start":384,"line_end":384,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187105,"byte_end":187114,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187891,"byte_end":187913,"line_start":407,"line_end":407,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187223,"byte_end":187298,"line_start":390,"line_end":390,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187303,"byte_end":187306,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187311,"byte_end":187361,"line_start":392,"line_end":392,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187366,"byte_end":187456,"line_start":393,"line_end":393,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187461,"byte_end":187464,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187469,"byte_end":187482,"line_start":395,"line_end":395,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187487,"byte_end":187490,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187495,"byte_end":187503,"line_start":397,"line_end":397,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187508,"byte_end":187534,"line_start":398,"line_end":398,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187539,"byte_end":187542,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187547,"byte_end":187629,"line_start":400,"line_end":400,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187634,"byte_end":187691,"line_start":401,"line_end":401,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187696,"byte_end":187699,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187704,"byte_end":187788,"line_start":403,"line_end":403,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187793,"byte_end":187852,"line_start":404,"line_end":404,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187857,"byte_end":187865,"line_start":405,"line_end":405,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187870,"byte_end":187879,"line_start":406,"line_end":406,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191292,"byte_end":191310,"line_start":485,"line_end":485,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":187972,"byte_end":188027,"line_start":411,"line_end":411,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188032,"byte_end":188035,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188040,"byte_end":188135,"line_start":413,"line_end":413,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188140,"byte_end":188203,"line_start":414,"line_end":414,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188208,"byte_end":188275,"line_start":415,"line_end":415,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188280,"byte_end":188373,"line_start":416,"line_end":416,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188378,"byte_end":188381,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188386,"byte_end":188437,"line_start":418,"line_end":418,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188442,"byte_end":188445,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188450,"byte_end":188463,"line_start":420,"line_end":420,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188468,"byte_end":188471,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188476,"byte_end":188484,"line_start":422,"line_end":422,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188489,"byte_end":188546,"line_start":423,"line_end":423,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188551,"byte_end":188577,"line_start":424,"line_end":424,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188582,"byte_end":188605,"line_start":425,"line_end":425,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188610,"byte_end":188613,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188618,"byte_end":188657,"line_start":427,"line_end":427,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188662,"byte_end":188665,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188670,"byte_end":188703,"line_start":429,"line_end":429,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188708,"byte_end":188751,"line_start":430,"line_end":430,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188756,"byte_end":188821,"line_start":431,"line_end":431,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188826,"byte_end":188861,"line_start":432,"line_end":432,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188866,"byte_end":188935,"line_start":433,"line_end":433,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188940,"byte_end":188975,"line_start":434,"line_end":434,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":188980,"byte_end":189050,"line_start":435,"line_end":435,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189055,"byte_end":189090,"line_start":436,"line_end":436,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189095,"byte_end":189172,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189177,"byte_end":189212,"line_start":438,"line_end":438,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189217,"byte_end":189291,"line_start":439,"line_end":439,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189296,"byte_end":189356,"line_start":440,"line_end":440,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189361,"byte_end":189364,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189369,"byte_end":189433,"line_start":442,"line_end":442,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189438,"byte_end":189520,"line_start":443,"line_end":443,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189525,"byte_end":189566,"line_start":444,"line_end":444,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189571,"byte_end":189578,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189583,"byte_end":189591,"line_start":446,"line_end":446,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189596,"byte_end":189599,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189604,"byte_end":189632,"line_start":448,"line_end":448,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189637,"byte_end":189640,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189645,"byte_end":189653,"line_start":450,"line_end":450,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189658,"byte_end":189715,"line_start":451,"line_end":451,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189720,"byte_end":189748,"line_start":452,"line_end":452,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189753,"byte_end":189778,"line_start":453,"line_end":453,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189783,"byte_end":189858,"line_start":454,"line_end":454,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189863,"byte_end":189948,"line_start":455,"line_end":455,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189953,"byte_end":189960,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189965,"byte_end":189973,"line_start":457,"line_end":457,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189978,"byte_end":189981,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":189986,"byte_end":190015,"line_start":459,"line_end":459,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190020,"byte_end":190090,"line_start":460,"line_end":460,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190095,"byte_end":190098,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190103,"byte_end":190111,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190116,"byte_end":190173,"line_start":463,"line_end":463,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190178,"byte_end":190206,"line_start":464,"line_end":464,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190211,"byte_end":190236,"line_start":465,"line_end":465,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190241,"byte_end":190282,"line_start":466,"line_end":466,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190287,"byte_end":190372,"line_start":467,"line_end":467,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190377,"byte_end":190414,"line_start":468,"line_end":468,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190419,"byte_end":190476,"line_start":469,"line_end":469,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190481,"byte_end":190525,"line_start":470,"line_end":470,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190530,"byte_end":190599,"line_start":471,"line_end":471,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190604,"byte_end":190646,"line_start":472,"line_end":472,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190651,"byte_end":190719,"line_start":473,"line_end":473,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190724,"byte_end":190768,"line_start":474,"line_end":474,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190773,"byte_end":190841,"line_start":475,"line_end":475,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190846,"byte_end":190887,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190892,"byte_end":190954,"line_start":477,"line_end":477,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":190959,"byte_end":191000,"line_start":478,"line_end":478,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191005,"byte_end":191068,"line_start":479,"line_end":479,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191073,"byte_end":191115,"line_start":480,"line_end":480,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191120,"byte_end":191178,"line_start":481,"line_end":481,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191183,"byte_end":191255,"line_start":482,"line_end":482,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191260,"byte_end":191267,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191272,"byte_end":191280,"line_start":484,"line_end":484,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194854,"byte_end":194872,"line_start":567,"line_end":567,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191757,"byte_end":191819,"line_start":497,"line_end":497,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191824,"byte_end":191827,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191832,"byte_end":191927,"line_start":499,"line_end":499,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":191932,"byte_end":191998,"line_start":500,"line_end":500,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192003,"byte_end":192070,"line_start":501,"line_end":501,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192075,"byte_end":192168,"line_start":502,"line_end":502,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192173,"byte_end":192176,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192181,"byte_end":192232,"line_start":504,"line_end":504,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192237,"byte_end":192240,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192245,"byte_end":192258,"line_start":506,"line_end":506,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192263,"byte_end":192266,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192271,"byte_end":192279,"line_start":508,"line_end":508,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192284,"byte_end":192341,"line_start":509,"line_end":509,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192346,"byte_end":192372,"line_start":510,"line_end":510,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192377,"byte_end":192400,"line_start":511,"line_end":511,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192405,"byte_end":192408,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192413,"byte_end":192452,"line_start":513,"line_end":513,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192457,"byte_end":192460,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192465,"byte_end":192498,"line_start":515,"line_end":515,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192503,"byte_end":192546,"line_start":516,"line_end":516,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192551,"byte_end":192616,"line_start":517,"line_end":517,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192621,"byte_end":192656,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192661,"byte_end":192730,"line_start":519,"line_end":519,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192735,"byte_end":192770,"line_start":520,"line_end":520,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192775,"byte_end":192845,"line_start":521,"line_end":521,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192850,"byte_end":192885,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192890,"byte_end":192967,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":192972,"byte_end":193007,"line_start":524,"line_end":524,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193012,"byte_end":193086,"line_start":525,"line_end":525,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193091,"byte_end":193151,"line_start":526,"line_end":526,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193156,"byte_end":193159,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193164,"byte_end":193228,"line_start":528,"line_end":528,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193233,"byte_end":193315,"line_start":529,"line_end":529,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193320,"byte_end":193361,"line_start":530,"line_end":530,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193366,"byte_end":193373,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193378,"byte_end":193386,"line_start":532,"line_end":532,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193391,"byte_end":193394,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193399,"byte_end":193427,"line_start":534,"line_end":534,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193432,"byte_end":193435,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193440,"byte_end":193448,"line_start":536,"line_end":536,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193453,"byte_end":193510,"line_start":537,"line_end":537,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193515,"byte_end":193543,"line_start":538,"line_end":538,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193548,"byte_end":193573,"line_start":539,"line_end":539,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193578,"byte_end":193653,"line_start":540,"line_end":540,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193658,"byte_end":193743,"line_start":541,"line_end":541,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193748,"byte_end":193755,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193760,"byte_end":193768,"line_start":543,"line_end":543,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193773,"byte_end":193776,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193781,"byte_end":193810,"line_start":545,"line_end":545,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193815,"byte_end":193888,"line_start":546,"line_end":546,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193893,"byte_end":193896,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193901,"byte_end":193909,"line_start":548,"line_end":548,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193914,"byte_end":193971,"line_start":549,"line_end":549,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":193976,"byte_end":194004,"line_start":550,"line_end":550,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194009,"byte_end":194034,"line_start":551,"line_end":551,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194039,"byte_end":194080,"line_start":552,"line_end":552,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194085,"byte_end":194170,"line_start":553,"line_end":553,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194175,"byte_end":194212,"line_start":554,"line_end":554,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194217,"byte_end":194274,"line_start":555,"line_end":555,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194279,"byte_end":194323,"line_start":556,"line_end":556,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194328,"byte_end":194396,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194401,"byte_end":194445,"line_start":558,"line_end":558,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194450,"byte_end":194518,"line_start":559,"line_end":559,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194523,"byte_end":194565,"line_start":560,"line_end":560,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194570,"byte_end":194632,"line_start":561,"line_end":561,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194637,"byte_end":194678,"line_start":562,"line_end":562,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194683,"byte_end":194741,"line_start":563,"line_end":563,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194746,"byte_end":194817,"line_start":564,"line_end":564,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194822,"byte_end":194829,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":194834,"byte_end":194842,"line_start":566,"line_end":566,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197281,"byte_end":197302,"line_start":623,"line_end":623,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195319,"byte_end":195388,"line_start":579,"line_end":579,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195393,"byte_end":195440,"line_start":580,"line_end":580,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195445,"byte_end":195448,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195453,"byte_end":195548,"line_start":582,"line_end":582,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195553,"byte_end":195619,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195624,"byte_end":195703,"line_start":584,"line_end":584,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195708,"byte_end":195753,"line_start":585,"line_end":585,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195758,"byte_end":195817,"line_start":586,"line_end":586,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195822,"byte_end":195825,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195830,"byte_end":195843,"line_start":588,"line_end":588,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195848,"byte_end":195851,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195856,"byte_end":195864,"line_start":590,"line_end":590,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195869,"byte_end":195926,"line_start":591,"line_end":591,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195931,"byte_end":195957,"line_start":592,"line_end":592,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195962,"byte_end":195985,"line_start":593,"line_end":593,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195990,"byte_end":195993,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":195998,"byte_end":196037,"line_start":595,"line_end":595,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196042,"byte_end":196045,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196050,"byte_end":196083,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196088,"byte_end":196164,"line_start":598,"line_end":598,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196169,"byte_end":196218,"line_start":599,"line_end":599,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196223,"byte_end":196226,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196231,"byte_end":196274,"line_start":601,"line_end":601,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196279,"byte_end":196313,"line_start":602,"line_end":602,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196318,"byte_end":196406,"line_start":603,"line_end":603,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196411,"byte_end":196502,"line_start":604,"line_end":604,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196507,"byte_end":196514,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196519,"byte_end":196527,"line_start":606,"line_end":606,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196532,"byte_end":196535,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196540,"byte_end":196602,"line_start":608,"line_end":608,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196607,"byte_end":196653,"line_start":609,"line_end":609,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196658,"byte_end":196661,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196666,"byte_end":196674,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196679,"byte_end":196736,"line_start":612,"line_end":612,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196741,"byte_end":196769,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196774,"byte_end":196799,"line_start":614,"line_end":614,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196804,"byte_end":196845,"line_start":615,"line_end":615,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196850,"byte_end":196920,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":196925,"byte_end":197008,"line_start":617,"line_end":617,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197013,"byte_end":197083,"line_start":618,"line_end":618,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197088,"byte_end":197169,"line_start":619,"line_end":619,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197174,"byte_end":197244,"line_start":620,"line_end":620,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197249,"byte_end":197256,"line_start":621,"line_end":621,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197261,"byte_end":197269,"line_start":622,"line_end":622,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198744,"byte_end":198761,"line_start":656,"line_end":656,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197451,"byte_end":197526,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197531,"byte_end":197610,"line_start":628,"line_end":628,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197615,"byte_end":197618,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197623,"byte_end":197673,"line_start":630,"line_end":630,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197678,"byte_end":197756,"line_start":631,"line_end":631,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197761,"byte_end":197764,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197769,"byte_end":197782,"line_start":633,"line_end":633,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197787,"byte_end":197790,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197795,"byte_end":197803,"line_start":635,"line_end":635,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197808,"byte_end":197834,"line_start":636,"line_end":636,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197839,"byte_end":197887,"line_start":637,"line_end":637,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197892,"byte_end":197895,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197900,"byte_end":197954,"line_start":639,"line_end":639,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":197959,"byte_end":198023,"line_start":640,"line_end":640,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198028,"byte_end":198113,"line_start":641,"line_end":641,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198118,"byte_end":198203,"line_start":642,"line_end":642,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198208,"byte_end":198216,"line_start":643,"line_end":643,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198221,"byte_end":198224,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198229,"byte_end":198313,"line_start":645,"line_end":645,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198318,"byte_end":198321,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198326,"byte_end":198334,"line_start":647,"line_end":647,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198339,"byte_end":198367,"line_start":648,"line_end":648,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198372,"byte_end":198422,"line_start":649,"line_end":649,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198427,"byte_end":198491,"line_start":650,"line_end":650,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198496,"byte_end":198562,"line_start":651,"line_end":651,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198567,"byte_end":198647,"line_start":652,"line_end":652,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198652,"byte_end":198660,"line_start":653,"line_end":653,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198665,"byte_end":198718,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198723,"byte_end":198732,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200562,"byte_end":200568,"line_start":698,"line_end":698,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":198972,"byte_end":199044,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199049,"byte_end":199119,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199124,"byte_end":199162,"line_start":666,"line_end":666,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199167,"byte_end":199170,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199175,"byte_end":199210,"line_start":668,"line_end":668,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199215,"byte_end":199288,"line_start":669,"line_end":669,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199293,"byte_end":199350,"line_start":670,"line_end":670,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199355,"byte_end":199417,"line_start":671,"line_end":671,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199422,"byte_end":199482,"line_start":672,"line_end":672,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199487,"byte_end":199490,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199495,"byte_end":199559,"line_start":674,"line_end":674,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199564,"byte_end":199627,"line_start":675,"line_end":675,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199632,"byte_end":199707,"line_start":676,"line_end":676,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199712,"byte_end":199715,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199720,"byte_end":199733,"line_start":678,"line_end":678,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199738,"byte_end":199741,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199746,"byte_end":199754,"line_start":680,"line_end":680,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199759,"byte_end":199785,"line_start":681,"line_end":681,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199790,"byte_end":199793,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199798,"byte_end":199862,"line_start":683,"line_end":683,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199867,"byte_end":199949,"line_start":684,"line_end":684,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":199954,"byte_end":200043,"line_start":685,"line_end":685,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200048,"byte_end":200056,"line_start":686,"line_end":686,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200061,"byte_end":200064,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200069,"byte_end":200153,"line_start":688,"line_end":688,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200158,"byte_end":200161,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200166,"byte_end":200174,"line_start":690,"line_end":690,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200179,"byte_end":200207,"line_start":691,"line_end":691,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200212,"byte_end":200278,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200283,"byte_end":200368,"line_start":693,"line_end":693,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200373,"byte_end":200465,"line_start":694,"line_end":694,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200470,"byte_end":200478,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200483,"byte_end":200536,"line_start":696,"line_end":696,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200541,"byte_end":200550,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1583},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299422,"byte_end":299429,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1584}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299016,"byte_end":299034,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299035,"byte_end":299038,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299039,"byte_end":299102,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299103,"byte_end":299178,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299179,"byte_end":299270,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":299271,"byte_end":299355,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301387,"byte_end":301391,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300729,"byte_end":300775,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300780,"byte_end":300783,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300788,"byte_end":300801,"line_start":51,"line_end":51,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300806,"byte_end":300809,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300814,"byte_end":300822,"line_start":53,"line_end":53,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300827,"byte_end":300874,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300879,"byte_end":300882,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300887,"byte_end":300945,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300950,"byte_end":300992,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300997,"byte_end":301005,"line_start":58,"line_end":58,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301010,"byte_end":301013,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301018,"byte_end":301080,"line_start":60,"line_end":60,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301085,"byte_end":301114,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301119,"byte_end":301122,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301127,"byte_end":301135,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301140,"byte_end":301189,"line_start":64,"line_end":64,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301194,"byte_end":301254,"line_start":65,"line_end":65,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301259,"byte_end":301290,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301295,"byte_end":301348,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301353,"byte_end":301361,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301366,"byte_end":301375,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301841,"byte_end":301845,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301442,"byte_end":301490,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301495,"byte_end":301498,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301503,"byte_end":301586,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301591,"byte_end":301594,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301599,"byte_end":301612,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301617,"byte_end":301620,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301625,"byte_end":301633,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301638,"byte_end":301685,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301690,"byte_end":301693,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301698,"byte_end":301757,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301762,"byte_end":301802,"line_start":84,"line_end":84,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301807,"byte_end":301815,"line_start":85,"line_end":85,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301820,"byte_end":301829,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302313,"byte_end":302318,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301913,"byte_end":301961,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301966,"byte_end":301969,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":301974,"byte_end":302057,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302062,"byte_end":302065,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302070,"byte_end":302083,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302088,"byte_end":302091,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302096,"byte_end":302104,"line_start":97,"line_end":97,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302109,"byte_end":302156,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302161,"byte_end":302164,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302169,"byte_end":302228,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302233,"byte_end":302274,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302279,"byte_end":302287,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":302292,"byte_end":302301,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1603},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312082,"byte_end":312091,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":304871,"byte_end":304906,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":304907,"byte_end":304987,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":304988,"byte_end":304991,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":304992,"byte_end":305018,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305019,"byte_end":305022,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305023,"byte_end":305090,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305091,"byte_end":305144,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305145,"byte_end":305223,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305224,"byte_end":305294,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305295,"byte_end":305373,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305374,"byte_end":305463,"line_start":29,"line_end":29,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305464,"byte_end":305534,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305535,"byte_end":305612,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305613,"byte_end":305644,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305645,"byte_end":305728,"line_start":33,"line_end":33,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305729,"byte_end":305812,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305813,"byte_end":305816,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305817,"byte_end":305854,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305855,"byte_end":305923,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":305924,"byte_end":306000,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306001,"byte_end":306082,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306083,"byte_end":306157,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306158,"byte_end":306228,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306229,"byte_end":306314,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306315,"byte_end":306384,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306385,"byte_end":306388,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306389,"byte_end":306468,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306469,"byte_end":306564,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306565,"byte_end":306627,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306628,"byte_end":306691,"line_start":48,"line_end":48,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306692,"byte_end":306695,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306696,"byte_end":306737,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306738,"byte_end":306817,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306818,"byte_end":306898,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306899,"byte_end":306970,"line_start":53,"line_end":53,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306971,"byte_end":306974,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":306975,"byte_end":307007,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307008,"byte_end":307011,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307012,"byte_end":307087,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307088,"byte_end":307163,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307164,"byte_end":307212,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307213,"byte_end":307281,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307282,"byte_end":307285,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307286,"byte_end":307355,"line_start":62,"line_end":62,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307356,"byte_end":307359,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307360,"byte_end":307368,"line_start":64,"line_end":64,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307369,"byte_end":307423,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307424,"byte_end":307427,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307428,"byte_end":307484,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307485,"byte_end":307488,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307489,"byte_end":307571,"line_start":69,"line_end":69,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307572,"byte_end":307575,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307576,"byte_end":307651,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307652,"byte_end":307680,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307681,"byte_end":307689,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307690,"byte_end":307693,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307694,"byte_end":307774,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307775,"byte_end":307854,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307855,"byte_end":307940,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":307941,"byte_end":308028,"line_start":78,"line_end":78,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308029,"byte_end":308032,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308033,"byte_end":308065,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308066,"byte_end":308069,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308070,"byte_end":308158,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308159,"byte_end":308234,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308235,"byte_end":308309,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308310,"byte_end":308313,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308314,"byte_end":308335,"line_start":86,"line_end":86,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308336,"byte_end":308422,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308423,"byte_end":308426,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308427,"byte_end":308460,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308461,"byte_end":308495,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308496,"byte_end":308529,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308530,"byte_end":308563,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308564,"byte_end":308617,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308618,"byte_end":308652,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308653,"byte_end":308687,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308688,"byte_end":308727,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308728,"byte_end":308731,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308732,"byte_end":308753,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308754,"byte_end":308840,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308841,"byte_end":308844,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308845,"byte_end":308878,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308879,"byte_end":308912,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308913,"byte_end":308947,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308948,"byte_end":308982,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":308983,"byte_end":309039,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309040,"byte_end":309079,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309080,"byte_end":309119,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309120,"byte_end":309123,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309124,"byte_end":309141,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309142,"byte_end":309226,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309227,"byte_end":309230,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309231,"byte_end":309267,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309268,"byte_end":309302,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309303,"byte_end":309337,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309338,"byte_end":309398,"line_start":115,"line_end":115,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309399,"byte_end":309438,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309439,"byte_end":309476,"line_start":117,"line_end":117,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309477,"byte_end":309514,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309515,"byte_end":309574,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309575,"byte_end":309651,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309652,"byte_end":309684,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309685,"byte_end":309766,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309767,"byte_end":309805,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309806,"byte_end":309809,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309810,"byte_end":309825,"line_start":125,"line_end":125,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309826,"byte_end":309829,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309830,"byte_end":309898,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309899,"byte_end":309902,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309903,"byte_end":309974,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309975,"byte_end":309978,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":309979,"byte_end":310046,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310047,"byte_end":310050,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310051,"byte_end":310103,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310104,"byte_end":310195,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310196,"byte_end":310229,"line_start":135,"line_end":135,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310230,"byte_end":310233,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310234,"byte_end":310324,"line_start":137,"line_end":137,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310325,"byte_end":310328,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310329,"byte_end":310404,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310405,"byte_end":310444,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310445,"byte_end":310530,"line_start":141,"line_end":141,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310531,"byte_end":310568,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310569,"byte_end":310572,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310573,"byte_end":310612,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310613,"byte_end":310616,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310617,"byte_end":310674,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310675,"byte_end":310732,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310733,"byte_end":310789,"line_start":148,"line_end":148,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310790,"byte_end":310867,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310868,"byte_end":310871,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310872,"byte_end":310880,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310881,"byte_end":310913,"line_start":152,"line_end":152,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310914,"byte_end":310917,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310918,"byte_end":310985,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":310986,"byte_end":311046,"line_start":155,"line_end":155,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311047,"byte_end":311055,"line_start":156,"line_end":156,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311056,"byte_end":311059,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311060,"byte_end":311126,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311127,"byte_end":311164,"line_start":159,"line_end":159,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311165,"byte_end":311231,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311232,"byte_end":311329,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311330,"byte_end":311395,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311396,"byte_end":311451,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311452,"byte_end":311455,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311456,"byte_end":311464,"line_start":165,"line_end":165,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311465,"byte_end":311507,"line_start":166,"line_end":166,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311508,"byte_end":311511,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311512,"byte_end":311578,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311579,"byte_end":311639,"line_start":169,"line_end":169,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311640,"byte_end":311643,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311644,"byte_end":311697,"line_start":171,"line_end":171,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311698,"byte_end":311758,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311759,"byte_end":311841,"line_start":173,"line_end":173,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311842,"byte_end":311850,"line_start":174,"line_end":174,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311851,"byte_end":311854,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311855,"byte_end":311925,"line_start":176,"line_end":176,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":311926,"byte_end":312015,"line_start":177,"line_end":177,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312749,"byte_end":312757,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312148,"byte_end":312205,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312210,"byte_end":312213,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312218,"byte_end":312278,"line_start":187,"line_end":187,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312283,"byte_end":312358,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312363,"byte_end":312366,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312371,"byte_end":312420,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312425,"byte_end":312428,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312433,"byte_end":312446,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312451,"byte_end":312454,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312459,"byte_end":312467,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312472,"byte_end":312510,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312515,"byte_end":312518,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312523,"byte_end":312566,"line_start":197,"line_end":197,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312571,"byte_end":312600,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312605,"byte_end":312636,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312641,"byte_end":312671,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312676,"byte_end":312710,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312715,"byte_end":312723,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312728,"byte_end":312737,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313614,"byte_end":313626,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312886,"byte_end":312943,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312948,"byte_end":312951,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312956,"byte_end":313016,"line_start":210,"line_end":210,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313021,"byte_end":313100,"line_start":211,"line_end":211,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313105,"byte_end":313108,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313113,"byte_end":313170,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313175,"byte_end":313178,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313183,"byte_end":313196,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313201,"byte_end":313204,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313209,"byte_end":313217,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313222,"byte_end":313248,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313253,"byte_end":313256,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313261,"byte_end":313308,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313313,"byte_end":313316,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313321,"byte_end":313366,"line_start":222,"line_end":222,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313371,"byte_end":313419,"line_start":223,"line_end":223,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313424,"byte_end":313470,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313475,"byte_end":313522,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313527,"byte_end":313575,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313580,"byte_end":313588,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313593,"byte_end":313602,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314367,"byte_end":314381,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313748,"byte_end":313818,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313823,"byte_end":313826,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313831,"byte_end":313872,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313877,"byte_end":313944,"line_start":236,"line_end":236,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313949,"byte_end":313952,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":313957,"byte_end":314019,"line_start":238,"line_end":238,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314024,"byte_end":314027,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314032,"byte_end":314045,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314050,"byte_end":314053,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314058,"byte_end":314066,"line_start":242,"line_end":242,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314071,"byte_end":314109,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314114,"byte_end":314117,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314122,"byte_end":314175,"line_start":245,"line_end":245,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314180,"byte_end":314209,"line_start":246,"line_end":246,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314214,"byte_end":314245,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314250,"byte_end":314280,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314285,"byte_end":314328,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314333,"byte_end":314341,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314346,"byte_end":314355,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315441,"byte_end":315459,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314535,"byte_end":314605,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314610,"byte_end":314613,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314618,"byte_end":314659,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314664,"byte_end":314731,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314736,"byte_end":314739,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314744,"byte_end":314814,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314819,"byte_end":314822,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314827,"byte_end":314840,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314845,"byte_end":314848,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314853,"byte_end":314861,"line_start":265,"line_end":265,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314866,"byte_end":314892,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314897,"byte_end":314900,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314905,"byte_end":314959,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314964,"byte_end":314967,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":314972,"byte_end":315021,"line_start":270,"line_end":270,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315026,"byte_end":315080,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315085,"byte_end":315173,"line_start":272,"line_end":272,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315178,"byte_end":315228,"line_start":273,"line_end":273,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315233,"byte_end":315284,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315289,"byte_end":315341,"line_start":275,"line_end":275,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315346,"byte_end":315402,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315407,"byte_end":315415,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315420,"byte_end":315429,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316295,"byte_end":316309,"line_start":304,"line_end":304,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315668,"byte_end":315738,"line_start":285,"line_end":285,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315743,"byte_end":315746,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315751,"byte_end":315796,"line_start":287,"line_end":287,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315801,"byte_end":315868,"line_start":288,"line_end":288,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315873,"byte_end":315876,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315881,"byte_end":315943,"line_start":290,"line_end":290,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315948,"byte_end":315951,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315956,"byte_end":315969,"line_start":292,"line_end":292,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315974,"byte_end":315977,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315982,"byte_end":315990,"line_start":294,"line_end":294,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":315995,"byte_end":316033,"line_start":295,"line_end":295,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316038,"byte_end":316041,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316046,"byte_end":316103,"line_start":297,"line_end":297,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316108,"byte_end":316137,"line_start":298,"line_end":298,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316142,"byte_end":316173,"line_start":299,"line_end":299,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316178,"byte_end":316208,"line_start":300,"line_end":300,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316213,"byte_end":316256,"line_start":301,"line_end":301,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316261,"byte_end":316269,"line_start":302,"line_end":302,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316274,"byte_end":316283,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317385,"byte_end":317403,"line_start":331,"line_end":331,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316463,"byte_end":316533,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316538,"byte_end":316541,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316546,"byte_end":316591,"line_start":310,"line_end":310,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316596,"byte_end":316663,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316668,"byte_end":316671,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316676,"byte_end":316746,"line_start":313,"line_end":313,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316751,"byte_end":316754,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316759,"byte_end":316772,"line_start":315,"line_end":315,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316777,"byte_end":316780,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316785,"byte_end":316793,"line_start":317,"line_end":317,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316798,"byte_end":316824,"line_start":318,"line_end":318,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316829,"byte_end":316832,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316837,"byte_end":316891,"line_start":320,"line_end":320,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316896,"byte_end":316899,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316904,"byte_end":316953,"line_start":322,"line_end":322,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":316958,"byte_end":317016,"line_start":323,"line_end":323,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317021,"byte_end":317113,"line_start":324,"line_end":324,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317118,"byte_end":317168,"line_start":325,"line_end":325,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317173,"byte_end":317224,"line_start":326,"line_end":326,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317229,"byte_end":317281,"line_start":327,"line_end":327,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317286,"byte_end":317346,"line_start":328,"line_end":328,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317351,"byte_end":317359,"line_start":329,"line_end":329,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317364,"byte_end":317373,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318213,"byte_end":318226,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317582,"byte_end":317651,"line_start":335,"line_end":335,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317656,"byte_end":317659,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317664,"byte_end":317712,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317717,"byte_end":317784,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317789,"byte_end":317792,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317797,"byte_end":317858,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317863,"byte_end":317866,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317871,"byte_end":317884,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317889,"byte_end":317892,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317897,"byte_end":317905,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317910,"byte_end":317948,"line_start":345,"line_end":345,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317953,"byte_end":317956,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":317961,"byte_end":318021,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318026,"byte_end":318055,"line_start":348,"line_end":348,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318060,"byte_end":318091,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318096,"byte_end":318126,"line_start":350,"line_end":350,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318131,"byte_end":318174,"line_start":351,"line_end":351,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318179,"byte_end":318187,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318192,"byte_end":318201,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319311,"byte_end":319328,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318377,"byte_end":318446,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318451,"byte_end":318454,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318459,"byte_end":318507,"line_start":360,"line_end":360,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318512,"byte_end":318579,"line_start":361,"line_end":361,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318584,"byte_end":318587,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318592,"byte_end":318661,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318666,"byte_end":318669,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318674,"byte_end":318687,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318692,"byte_end":318695,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318700,"byte_end":318708,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318713,"byte_end":318739,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318744,"byte_end":318747,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318752,"byte_end":318805,"line_start":370,"line_end":370,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318810,"byte_end":318813,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318818,"byte_end":318867,"line_start":372,"line_end":372,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318872,"byte_end":318934,"line_start":373,"line_end":373,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":318939,"byte_end":319035,"line_start":374,"line_end":374,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319040,"byte_end":319090,"line_start":375,"line_end":375,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319095,"byte_end":319146,"line_start":376,"line_end":376,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319151,"byte_end":319203,"line_start":377,"line_end":377,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319208,"byte_end":319272,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319277,"byte_end":319285,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319290,"byte_end":319299,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320272,"byte_end":320302,"line_start":408,"line_end":408,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319615,"byte_end":319700,"line_start":389,"line_end":389,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319705,"byte_end":319708,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319713,"byte_end":319761,"line_start":391,"line_end":391,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319766,"byte_end":319833,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319838,"byte_end":319841,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319846,"byte_end":319904,"line_start":394,"line_end":394,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319909,"byte_end":319912,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319917,"byte_end":319930,"line_start":396,"line_end":396,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319935,"byte_end":319938,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319943,"byte_end":319951,"line_start":398,"line_end":398,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319956,"byte_end":319994,"line_start":399,"line_end":399,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":319999,"byte_end":320002,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320007,"byte_end":320080,"line_start":401,"line_end":401,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320085,"byte_end":320114,"line_start":402,"line_end":402,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320119,"byte_end":320150,"line_start":403,"line_end":403,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320155,"byte_end":320185,"line_start":404,"line_end":404,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320190,"byte_end":320233,"line_start":405,"line_end":405,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320238,"byte_end":320246,"line_start":406,"line_end":406,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320251,"byte_end":320260,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321274,"byte_end":321308,"line_start":433,"line_end":433,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320440,"byte_end":320525,"line_start":412,"line_end":412,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320530,"byte_end":320533,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320538,"byte_end":320586,"line_start":414,"line_end":414,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320591,"byte_end":320658,"line_start":415,"line_end":415,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320663,"byte_end":320666,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320671,"byte_end":320737,"line_start":417,"line_end":417,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320742,"byte_end":320745,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320750,"byte_end":320763,"line_start":419,"line_end":419,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320768,"byte_end":320771,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320776,"byte_end":320784,"line_start":421,"line_end":421,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320789,"byte_end":320815,"line_start":422,"line_end":422,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320820,"byte_end":320823,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320828,"byte_end":320899,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320904,"byte_end":320907,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320912,"byte_end":320956,"line_start":426,"line_end":426,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":320961,"byte_end":321019,"line_start":427,"line_end":427,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321024,"byte_end":321116,"line_start":428,"line_end":428,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321121,"byte_end":321170,"line_start":429,"line_end":429,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321175,"byte_end":321235,"line_start":430,"line_end":430,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321240,"byte_end":321248,"line_start":431,"line_end":431,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321253,"byte_end":321262,"line_start":432,"line_end":432,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323978,"byte_end":323992,"line_start":501,"line_end":501,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321504,"byte_end":321587,"line_start":440,"line_end":440,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321592,"byte_end":321662,"line_start":441,"line_end":441,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321667,"byte_end":321705,"line_start":442,"line_end":442,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321710,"byte_end":321713,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321718,"byte_end":321731,"line_start":444,"line_end":444,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321736,"byte_end":321739,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321744,"byte_end":321752,"line_start":446,"line_end":446,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321757,"byte_end":321783,"line_start":447,"line_end":447,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321788,"byte_end":321791,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321796,"byte_end":321847,"line_start":449,"line_end":449,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321852,"byte_end":321855,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321860,"byte_end":321914,"line_start":451,"line_end":451,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321919,"byte_end":321970,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":321975,"byte_end":322037,"line_start":453,"line_end":453,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322042,"byte_end":322109,"line_start":454,"line_end":454,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322114,"byte_end":322122,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322127,"byte_end":322130,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322135,"byte_end":322193,"line_start":457,"line_end":457,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322198,"byte_end":322201,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322206,"byte_end":322214,"line_start":459,"line_end":459,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322219,"byte_end":322247,"line_start":460,"line_end":460,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322252,"byte_end":322305,"line_start":461,"line_end":461,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322310,"byte_end":322391,"line_start":462,"line_end":462,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322396,"byte_end":322448,"line_start":463,"line_end":463,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322453,"byte_end":322461,"line_start":464,"line_end":464,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322466,"byte_end":322469,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322474,"byte_end":322540,"line_start":466,"line_end":466,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322545,"byte_end":322607,"line_start":467,"line_end":467,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322612,"byte_end":322688,"line_start":468,"line_end":468,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322693,"byte_end":322696,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322701,"byte_end":322709,"line_start":470,"line_end":470,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322714,"byte_end":322742,"line_start":471,"line_end":471,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322747,"byte_end":322800,"line_start":472,"line_end":472,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322805,"byte_end":322866,"line_start":473,"line_end":473,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322871,"byte_end":322935,"line_start":474,"line_end":474,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322940,"byte_end":322948,"line_start":475,"line_end":475,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322953,"byte_end":322956,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":322961,"byte_end":323004,"line_start":477,"line_end":477,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323009,"byte_end":323080,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323085,"byte_end":323088,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323093,"byte_end":323101,"line_start":480,"line_end":480,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323106,"byte_end":323134,"line_start":481,"line_end":481,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323139,"byte_end":323192,"line_start":482,"line_end":482,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323197,"byte_end":323244,"line_start":483,"line_end":483,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323249,"byte_end":323299,"line_start":484,"line_end":484,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323304,"byte_end":323307,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323312,"byte_end":323369,"line_start":486,"line_end":486,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323374,"byte_end":323423,"line_start":487,"line_end":487,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323428,"byte_end":323483,"line_start":488,"line_end":488,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323488,"byte_end":323549,"line_start":489,"line_end":489,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323554,"byte_end":323562,"line_start":490,"line_end":490,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323567,"byte_end":323570,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323575,"byte_end":323657,"line_start":492,"line_end":492,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323662,"byte_end":323711,"line_start":493,"line_end":493,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323716,"byte_end":323775,"line_start":494,"line_end":494,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323780,"byte_end":323783,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323788,"byte_end":323796,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323801,"byte_end":323829,"line_start":497,"line_end":497,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323834,"byte_end":323887,"line_start":498,"line_end":498,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323892,"byte_end":323953,"line_start":499,"line_end":499,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":323958,"byte_end":323966,"line_start":500,"line_end":500,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":325155,"byte_end":325177,"line_start":530,"line_end":530,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324180,"byte_end":324226,"line_start":507,"line_end":507,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324231,"byte_end":324275,"line_start":508,"line_end":508,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324280,"byte_end":324341,"line_start":509,"line_end":509,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324346,"byte_end":324427,"line_start":510,"line_end":510,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324432,"byte_end":324435,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324440,"byte_end":324453,"line_start":512,"line_end":512,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324458,"byte_end":324461,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324466,"byte_end":324474,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324479,"byte_end":324536,"line_start":515,"line_end":515,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324541,"byte_end":324567,"line_start":516,"line_end":516,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324572,"byte_end":324595,"line_start":517,"line_end":517,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324600,"byte_end":324603,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324608,"byte_end":324647,"line_start":519,"line_end":519,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324652,"byte_end":324655,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324660,"byte_end":324737,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324742,"byte_end":324782,"line_start":522,"line_end":522,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324787,"byte_end":324864,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324869,"byte_end":324913,"line_start":524,"line_end":524,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":324918,"byte_end":324995,"line_start":525,"line_end":525,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":325000,"byte_end":325046,"line_start":526,"line_end":526,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":325051,"byte_end":325058,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":325063,"byte_end":325071,"line_start":528,"line_end":528,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328686,"byte_end":328708,"line_start":616,"line_end":616,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":327760,"byte_end":327813,"line_start":593,"line_end":593,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":327818,"byte_end":327862,"line_start":594,"line_end":594,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":327867,"byte_end":327931,"line_start":595,"line_end":595,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":327936,"byte_end":328017,"line_start":596,"line_end":596,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328022,"byte_end":328025,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328030,"byte_end":328043,"line_start":598,"line_end":598,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328048,"byte_end":328051,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328056,"byte_end":328064,"line_start":600,"line_end":600,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328069,"byte_end":328126,"line_start":601,"line_end":601,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328131,"byte_end":328157,"line_start":602,"line_end":602,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328162,"byte_end":328185,"line_start":603,"line_end":603,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328190,"byte_end":328193,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328198,"byte_end":328237,"line_start":605,"line_end":605,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328242,"byte_end":328245,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328250,"byte_end":328326,"line_start":607,"line_end":607,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328331,"byte_end":328370,"line_start":608,"line_end":608,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328375,"byte_end":328452,"line_start":609,"line_end":609,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328457,"byte_end":328502,"line_start":610,"line_end":610,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328507,"byte_end":328585,"line_start":611,"line_end":611,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328590,"byte_end":328635,"line_start":612,"line_end":612,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328640,"byte_end":328647,"line_start":613,"line_end":613,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328652,"byte_end":328660,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328665,"byte_end":328674,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331762,"byte_end":331783,"line_start":681,"line_end":681,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328900,"byte_end":328956,"line_start":621,"line_end":621,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":328961,"byte_end":329003,"line_start":622,"line_end":622,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329008,"byte_end":329055,"line_start":623,"line_end":623,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329060,"byte_end":329063,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329068,"byte_end":329140,"line_start":625,"line_end":625,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329145,"byte_end":329211,"line_start":626,"line_end":626,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329216,"byte_end":329291,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329296,"byte_end":329341,"line_start":628,"line_end":628,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329346,"byte_end":329405,"line_start":629,"line_end":629,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329410,"byte_end":329413,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329418,"byte_end":329431,"line_start":631,"line_end":631,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329436,"byte_end":329439,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329444,"byte_end":329452,"line_start":633,"line_end":633,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329457,"byte_end":329514,"line_start":634,"line_end":634,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329519,"byte_end":329545,"line_start":635,"line_end":635,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329550,"byte_end":329573,"line_start":636,"line_end":636,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329578,"byte_end":329581,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329586,"byte_end":329632,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329637,"byte_end":329686,"line_start":639,"line_end":639,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329691,"byte_end":329694,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329699,"byte_end":329770,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329775,"byte_end":329808,"line_start":642,"line_end":642,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329813,"byte_end":329884,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329889,"byte_end":329932,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":329937,"byte_end":330008,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330013,"byte_end":330057,"line_start":646,"line_end":646,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330062,"byte_end":330133,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330138,"byte_end":330175,"line_start":648,"line_end":648,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330180,"byte_end":330251,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330256,"byte_end":330298,"line_start":650,"line_end":650,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330303,"byte_end":330374,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330379,"byte_end":330423,"line_start":652,"line_end":652,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330428,"byte_end":330499,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330504,"byte_end":330545,"line_start":654,"line_end":654,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330550,"byte_end":330621,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330626,"byte_end":330705,"line_start":656,"line_end":656,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330710,"byte_end":330717,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330722,"byte_end":330730,"line_start":658,"line_end":658,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330735,"byte_end":330738,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330743,"byte_end":330805,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330810,"byte_end":330856,"line_start":661,"line_end":661,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330861,"byte_end":330864,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330869,"byte_end":330877,"line_start":663,"line_end":663,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330882,"byte_end":330939,"line_start":664,"line_end":664,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330944,"byte_end":330972,"line_start":665,"line_end":665,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":330977,"byte_end":331002,"line_start":666,"line_end":666,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331007,"byte_end":331055,"line_start":667,"line_end":667,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331060,"byte_end":331111,"line_start":668,"line_end":668,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331116,"byte_end":331189,"line_start":669,"line_end":669,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331194,"byte_end":331231,"line_start":670,"line_end":670,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331236,"byte_end":331309,"line_start":671,"line_end":671,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331314,"byte_end":331359,"line_start":672,"line_end":672,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331364,"byte_end":331436,"line_start":673,"line_end":673,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331441,"byte_end":331479,"line_start":674,"line_end":674,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331484,"byte_end":331557,"line_start":675,"line_end":675,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331562,"byte_end":331599,"line_start":676,"line_end":676,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331604,"byte_end":331682,"line_start":677,"line_end":677,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331687,"byte_end":331725,"line_start":678,"line_end":678,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331730,"byte_end":331737,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":331742,"byte_end":331750,"line_start":680,"line_end":680,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334439,"byte_end":334456,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333260,"byte_end":333317,"line_start":719,"line_end":719,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333322,"byte_end":333401,"line_start":720,"line_end":720,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333406,"byte_end":333409,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333414,"byte_end":333464,"line_start":722,"line_end":722,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333469,"byte_end":333547,"line_start":723,"line_end":723,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333552,"byte_end":333555,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333560,"byte_end":333573,"line_start":725,"line_end":725,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333578,"byte_end":333581,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333586,"byte_end":333594,"line_start":727,"line_end":727,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333599,"byte_end":333625,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333630,"byte_end":333678,"line_start":729,"line_end":729,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333683,"byte_end":333686,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333691,"byte_end":333736,"line_start":731,"line_end":731,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333741,"byte_end":333784,"line_start":732,"line_end":732,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333789,"byte_end":333862,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333867,"byte_end":333940,"line_start":734,"line_end":734,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333945,"byte_end":333953,"line_start":735,"line_end":735,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333958,"byte_end":333961,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":333966,"byte_end":334050,"line_start":737,"line_end":737,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334055,"byte_end":334058,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334063,"byte_end":334071,"line_start":739,"line_end":739,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334076,"byte_end":334104,"line_start":740,"line_end":740,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334109,"byte_end":334159,"line_start":741,"line_end":741,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334164,"byte_end":334219,"line_start":742,"line_end":742,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334224,"byte_end":334269,"line_start":743,"line_end":743,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334274,"byte_end":334342,"line_start":744,"line_end":744,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334347,"byte_end":334355,"line_start":745,"line_end":745,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334360,"byte_end":334413,"line_start":746,"line_end":746,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334418,"byte_end":334427,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336277,"byte_end":336283,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334652,"byte_end":334706,"line_start":756,"line_end":756,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334711,"byte_end":334781,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334786,"byte_end":334824,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334829,"byte_end":334832,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334837,"byte_end":334872,"line_start":760,"line_end":760,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334877,"byte_end":334950,"line_start":761,"line_end":761,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":334955,"byte_end":335012,"line_start":762,"line_end":762,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335017,"byte_end":335079,"line_start":763,"line_end":763,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335084,"byte_end":335144,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335149,"byte_end":335152,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335157,"byte_end":335221,"line_start":766,"line_end":766,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335226,"byte_end":335289,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335294,"byte_end":335369,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335374,"byte_end":335377,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335382,"byte_end":335395,"line_start":770,"line_end":770,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335400,"byte_end":335403,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335408,"byte_end":335416,"line_start":772,"line_end":772,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335421,"byte_end":335447,"line_start":773,"line_end":773,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335452,"byte_end":335455,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335460,"byte_end":335520,"line_start":775,"line_end":775,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335525,"byte_end":335586,"line_start":776,"line_end":776,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335591,"byte_end":335663,"line_start":777,"line_end":777,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335668,"byte_end":335730,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335735,"byte_end":335743,"line_start":779,"line_end":779,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335748,"byte_end":335751,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335756,"byte_end":335840,"line_start":781,"line_end":781,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335845,"byte_end":335848,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335853,"byte_end":335861,"line_start":783,"line_end":783,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335866,"byte_end":335894,"line_start":784,"line_end":784,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335899,"byte_end":335961,"line_start":785,"line_end":785,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":335966,"byte_end":336030,"line_start":786,"line_end":786,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336035,"byte_end":336110,"line_start":787,"line_end":787,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336115,"byte_end":336180,"line_start":788,"line_end":788,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336185,"byte_end":336193,"line_start":789,"line_end":789,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336198,"byte_end":336251,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336256,"byte_end":336265,"line_start":791,"line_end":791,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1628},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377429,"byte_end":377433,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376056,"byte_end":376098,"line_start":20,"line_end":20,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376099,"byte_end":376102,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376103,"byte_end":376156,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376157,"byte_end":376237,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376238,"byte_end":376324,"line_start":24,"line_end":24,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376325,"byte_end":376382,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376383,"byte_end":376386,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376387,"byte_end":376465,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376466,"byte_end":376536,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376537,"byte_end":376593,"line_start":29,"line_end":29,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376594,"byte_end":376597,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376598,"byte_end":376670,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376671,"byte_end":376723,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376724,"byte_end":376811,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376812,"byte_end":376880,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376881,"byte_end":376927,"line_start":35,"line_end":35,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376928,"byte_end":376931,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376932,"byte_end":376976,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":376977,"byte_end":377073,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377074,"byte_end":377169,"line_start":39,"line_end":39,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377170,"byte_end":377173,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377174,"byte_end":377250,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377251,"byte_end":377318,"line_start":42,"line_end":42,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377319,"byte_end":377400,"line_start":43,"line_end":43,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":709},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377541,"byte_end":377549,"line_start":51,"line_end":51,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377498,"byte_end":377530,"line_start":50,"line_end":50,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":710},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377651,"byte_end":377659,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377608,"byte_end":377640,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378007,"byte_end":378015,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377753,"byte_end":377809,"line_start":56,"line_end":56,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377814,"byte_end":377880,"line_start":57,"line_end":57,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377986,"byte_end":377995,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378316,"byte_end":378324,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378122,"byte_end":378193,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378198,"byte_end":378246,"line_start":66,"line_end":66,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378251,"byte_end":378254,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378259,"byte_end":378290,"line_start":68,"line_end":68,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378295,"byte_end":378304,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378721,"byte_end":378728,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378506,"byte_end":378580,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378585,"byte_end":378633,"line_start":76,"line_end":76,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378638,"byte_end":378641,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378646,"byte_end":378695,"line_start":78,"line_end":78,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378700,"byte_end":378709,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379083,"byte_end":379094,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378860,"byte_end":378934,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378939,"byte_end":378987,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":378992,"byte_end":378995,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379000,"byte_end":379057,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379062,"byte_end":379071,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379581,"byte_end":379594,"line_start":99,"line_end":99,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379255,"byte_end":379342,"line_start":93,"line_end":93,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379347,"byte_end":379427,"line_start":94,"line_end":94,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379432,"byte_end":379480,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379485,"byte_end":379488,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379493,"byte_end":379555,"line_start":97,"line_end":97,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379560,"byte_end":379569,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380085,"byte_end":380102,"line_start":109,"line_end":109,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379751,"byte_end":379838,"line_start":103,"line_end":103,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379843,"byte_end":379923,"line_start":104,"line_end":104,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379928,"byte_end":379976,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379981,"byte_end":379984,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":379989,"byte_end":380059,"line_start":107,"line_end":107,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380064,"byte_end":380073,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380665,"byte_end":380678,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380335,"byte_end":380422,"line_start":119,"line_end":119,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380427,"byte_end":380511,"line_start":120,"line_end":120,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380516,"byte_end":380564,"line_start":121,"line_end":121,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380569,"byte_end":380572,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380577,"byte_end":380639,"line_start":123,"line_end":123,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380644,"byte_end":380653,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381173,"byte_end":381190,"line_start":135,"line_end":135,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380835,"byte_end":380922,"line_start":129,"line_end":129,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":380927,"byte_end":381011,"line_start":130,"line_end":130,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381016,"byte_end":381064,"line_start":131,"line_end":131,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381069,"byte_end":381072,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381077,"byte_end":381147,"line_start":133,"line_end":133,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381152,"byte_end":381161,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381754,"byte_end":381766,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381423,"byte_end":381509,"line_start":145,"line_end":145,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381514,"byte_end":381601,"line_start":146,"line_end":146,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381606,"byte_end":381654,"line_start":147,"line_end":147,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381659,"byte_end":381662,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381667,"byte_end":381728,"line_start":149,"line_end":149,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381733,"byte_end":381742,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382259,"byte_end":382275,"line_start":161,"line_end":161,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":381920,"byte_end":382006,"line_start":155,"line_end":155,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382011,"byte_end":382098,"line_start":156,"line_end":156,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382103,"byte_end":382151,"line_start":157,"line_end":157,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382156,"byte_end":382159,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382164,"byte_end":382233,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382238,"byte_end":382247,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382639,"byte_end":382643,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382505,"byte_end":382546,"line_start":171,"line_end":171,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382551,"byte_end":382554,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382559,"byte_end":382613,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382618,"byte_end":382627,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382865,"byte_end":382873,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382723,"byte_end":382764,"line_start":179,"line_end":179,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382769,"byte_end":382772,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382777,"byte_end":382839,"line_start":181,"line_end":181,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382844,"byte_end":382853,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383133,"byte_end":383137,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":382997,"byte_end":383039,"line_start":187,"line_end":187,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383044,"byte_end":383047,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383052,"byte_end":383107,"line_start":189,"line_end":189,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383112,"byte_end":383121,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383361,"byte_end":383369,"line_start":199,"line_end":199,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383217,"byte_end":383259,"line_start":195,"line_end":195,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383264,"byte_end":383267,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383272,"byte_end":383335,"line_start":197,"line_end":197,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383340,"byte_end":383349,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383563,"byte_end":383569,"line_start":205,"line_end":205,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383493,"byte_end":383537,"line_start":203,"line_end":203,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383542,"byte_end":383551,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383690,"byte_end":383698,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383626,"byte_end":383664,"line_start":209,"line_end":209,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383669,"byte_end":383678,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383924,"byte_end":383937,"line_start":218,"line_end":218,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383769,"byte_end":383806,"line_start":215,"line_end":215,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383811,"byte_end":383898,"line_start":216,"line_end":216,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":383903,"byte_end":383912,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384169,"byte_end":384187,"line_start":226,"line_end":226,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384033,"byte_end":384079,"line_start":222,"line_end":222,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384084,"byte_end":384087,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384092,"byte_end":384143,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384148,"byte_end":384157,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384507,"byte_end":384525,"line_start":235,"line_end":235,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384364,"byte_end":384417,"line_start":231,"line_end":231,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384422,"byte_end":384425,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384430,"byte_end":384481,"line_start":233,"line_end":233,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384486,"byte_end":384495,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384953,"byte_end":384974,"line_start":246,"line_end":246,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384702,"byte_end":384753,"line_start":240,"line_end":240,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384758,"byte_end":384803,"line_start":241,"line_end":241,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384808,"byte_end":384811,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384816,"byte_end":384863,"line_start":243,"line_end":243,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384868,"byte_end":384927,"line_start":244,"line_end":244,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":384932,"byte_end":384941,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385157,"byte_end":385166,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385090,"byte_end":385131,"line_start":250,"line_end":250,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385136,"byte_end":385145,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385476,"byte_end":385487,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385218,"byte_end":385261,"line_start":256,"line_end":256,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385266,"byte_end":385269,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385274,"byte_end":385342,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385347,"byte_end":385408,"line_start":259,"line_end":259,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385413,"byte_end":385450,"line_start":260,"line_end":260,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385455,"byte_end":385464,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386034,"byte_end":386051,"line_start":282,"line_end":282,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385893,"byte_end":385950,"line_start":279,"line_end":279,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385955,"byte_end":386008,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386013,"byte_end":386022,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386541,"byte_end":386547,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386286,"byte_end":386340,"line_start":290,"line_end":290,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386345,"byte_end":386414,"line_start":291,"line_end":291,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386419,"byte_end":386457,"line_start":292,"line_end":292,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386462,"byte_end":386515,"line_start":293,"line_end":293,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386520,"byte_end":386529,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391604,"byte_end":391608,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391531,"byte_end":391599,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391747,"byte_end":391753,"line_start":42,"line_end":42,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391615,"byte_end":391668,"line_start":40,"line_end":40,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391673,"byte_end":391742,"line_start":41,"line_end":41,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391892,"byte_end":391898,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391760,"byte_end":391813,"line_start":44,"line_end":44,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391818,"byte_end":391887,"line_start":45,"line_end":45,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392037,"byte_end":392042,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391905,"byte_end":391958,"line_start":48,"line_end":48,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391963,"byte_end":392032,"line_start":49,"line_end":49,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1644},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392278,"byte_end":392284,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392049,"byte_end":392122,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392127,"byte_end":392201,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392206,"byte_end":392273,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1646},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392344,"byte_end":392359,"line_start":59,"line_end":59,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1635},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391511,"byte_end":391524,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391248,"byte_end":391320,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391321,"byte_end":391392,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391393,"byte_end":391396,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":391397,"byte_end":391456,"line_start":34,"line_end":34,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1659},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392657,"byte_end":392665,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1662}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392364,"byte_end":392415,"line_start":62,"line_end":62,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392416,"byte_end":392419,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392420,"byte_end":392496,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392497,"byte_end":392564,"line_start":65,"line_end":65,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392565,"byte_end":392628,"line_start":66,"line_end":66,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393305,"byte_end":393313,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392776,"byte_end":392840,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392845,"byte_end":392915,"line_start":75,"line_end":75,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392920,"byte_end":392923,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392928,"byte_end":392941,"line_start":77,"line_end":77,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392946,"byte_end":392949,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392954,"byte_end":392962,"line_start":79,"line_end":79,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392967,"byte_end":393024,"line_start":80,"line_end":80,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393029,"byte_end":393032,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393037,"byte_end":393119,"line_start":82,"line_end":82,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393124,"byte_end":393165,"line_start":83,"line_end":83,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393170,"byte_end":393178,"line_start":84,"line_end":84,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393284,"byte_end":393293,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393501,"byte_end":393505,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393444,"byte_end":393475,"line_start":92,"line_end":92,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393480,"byte_end":393489,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393730,"byte_end":393734,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393609,"byte_end":393640,"line_start":98,"line_end":98,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393645,"byte_end":393704,"line_start":99,"line_end":99,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393709,"byte_end":393718,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393951,"byte_end":393960,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393817,"byte_end":393893,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393898,"byte_end":393925,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":393930,"byte_end":393939,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394781,"byte_end":394797,"line_start":132,"line_end":132,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394022,"byte_end":394095,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394100,"byte_end":394103,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394108,"byte_end":394182,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394187,"byte_end":394260,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394265,"byte_end":394337,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394342,"byte_end":394378,"line_start":117,"line_end":117,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394383,"byte_end":394386,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394391,"byte_end":394404,"line_start":119,"line_end":119,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394409,"byte_end":394412,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394417,"byte_end":394425,"line_start":121,"line_end":121,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394430,"byte_end":394450,"line_start":122,"line_end":122,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394455,"byte_end":394480,"line_start":123,"line_end":123,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394485,"byte_end":394488,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394493,"byte_end":394554,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394559,"byte_end":394604,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394609,"byte_end":394612,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394617,"byte_end":394680,"line_start":128,"line_end":128,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394685,"byte_end":394742,"line_start":129,"line_end":129,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394747,"byte_end":394755,"line_start":130,"line_end":130,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394760,"byte_end":394769,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395619,"byte_end":395634,"line_start":156,"line_end":156,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394866,"byte_end":394938,"line_start":136,"line_end":136,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394943,"byte_end":394946,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":394951,"byte_end":395025,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395030,"byte_end":395095,"line_start":139,"line_end":139,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395100,"byte_end":395171,"line_start":140,"line_end":140,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395176,"byte_end":395204,"line_start":141,"line_end":141,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395209,"byte_end":395212,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395217,"byte_end":395230,"line_start":143,"line_end":143,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395235,"byte_end":395238,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395243,"byte_end":395251,"line_start":145,"line_end":145,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395256,"byte_end":395276,"line_start":146,"line_end":146,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395281,"byte_end":395306,"line_start":147,"line_end":147,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395311,"byte_end":395314,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395319,"byte_end":395379,"line_start":149,"line_end":149,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395384,"byte_end":395436,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395441,"byte_end":395444,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395449,"byte_end":395511,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395516,"byte_end":395580,"line_start":153,"line_end":153,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395585,"byte_end":395593,"line_start":154,"line_end":154,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395598,"byte_end":395607,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395964,"byte_end":395987,"line_start":166,"line_end":166,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395702,"byte_end":395771,"line_start":160,"line_end":160,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395776,"byte_end":395779,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395784,"byte_end":395843,"line_start":162,"line_end":162,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395848,"byte_end":395851,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395856,"byte_end":395938,"line_start":164,"line_end":164,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":395943,"byte_end":395952,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396329,"byte_end":396352,"line_start":176,"line_end":176,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396063,"byte_end":396132,"line_start":170,"line_end":170,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396137,"byte_end":396140,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396145,"byte_end":396208,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396213,"byte_end":396216,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396221,"byte_end":396303,"line_start":174,"line_end":174,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396308,"byte_end":396317,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396696,"byte_end":396718,"line_start":186,"line_end":186,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396428,"byte_end":396496,"line_start":180,"line_end":180,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396501,"byte_end":396504,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396509,"byte_end":396576,"line_start":182,"line_end":182,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396581,"byte_end":396584,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396589,"byte_end":396670,"line_start":184,"line_end":184,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396675,"byte_end":396684,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396863,"byte_end":396869,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396793,"byte_end":396837,"line_start":190,"line_end":190,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396842,"byte_end":396851,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396990,"byte_end":396998,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396926,"byte_end":396964,"line_start":196,"line_end":196,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":396969,"byte_end":396978,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397228,"byte_end":397241,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397069,"byte_end":397106,"line_start":202,"line_end":202,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397111,"byte_end":397202,"line_start":203,"line_end":203,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397207,"byte_end":397216,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397494,"byte_end":397512,"line_start":213,"line_end":213,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397349,"byte_end":397404,"line_start":209,"line_end":209,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397409,"byte_end":397412,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397417,"byte_end":397468,"line_start":211,"line_end":211,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397473,"byte_end":397482,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397878,"byte_end":397896,"line_start":223,"line_end":223,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397726,"byte_end":397788,"line_start":219,"line_end":219,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397793,"byte_end":397796,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397801,"byte_end":397852,"line_start":221,"line_end":221,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":397857,"byte_end":397866,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398252,"byte_end":398273,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398110,"byte_end":398174,"line_start":229,"line_end":229,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398179,"byte_end":398226,"line_start":230,"line_end":230,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398231,"byte_end":398240,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398472,"byte_end":398481,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398401,"byte_end":398446,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398451,"byte_end":398460,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398614,"byte_end":398625,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398541,"byte_end":398588,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398593,"byte_end":398602,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402432,"byte_end":402450,"line_start":340,"line_end":340,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401858,"byte_end":401943,"line_start":327,"line_end":327,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401948,"byte_end":402010,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402015,"byte_end":402018,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402023,"byte_end":402088,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402093,"byte_end":402147,"line_start":331,"line_end":331,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402152,"byte_end":402155,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402160,"byte_end":402167,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402172,"byte_end":402224,"line_start":334,"line_end":334,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402229,"byte_end":402244,"line_start":335,"line_end":335,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402249,"byte_end":402328,"line_start":336,"line_end":336,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402333,"byte_end":402397,"line_start":337,"line_end":337,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402402,"byte_end":402408,"line_start":338,"line_end":338,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402413,"byte_end":402420,"line_start":339,"line_end":339,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403075,"byte_end":403093,"line_start":352,"line_end":352,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402706,"byte_end":402799,"line_start":347,"line_end":347,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402804,"byte_end":402866,"line_start":348,"line_end":348,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402871,"byte_end":402874,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402879,"byte_end":402969,"line_start":350,"line_end":350,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":402974,"byte_end":403063,"line_start":351,"line_end":351,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404301,"byte_end":404315,"line_start":379,"line_end":379,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403349,"byte_end":403405,"line_start":359,"line_end":359,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403410,"byte_end":403467,"line_start":360,"line_end":360,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403472,"byte_end":403541,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403546,"byte_end":403584,"line_start":362,"line_end":362,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403589,"byte_end":403592,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403597,"byte_end":403691,"line_start":364,"line_end":364,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403696,"byte_end":403699,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403704,"byte_end":403770,"line_start":366,"line_end":366,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403775,"byte_end":403869,"line_start":367,"line_end":367,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403874,"byte_end":403949,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403954,"byte_end":403957,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403962,"byte_end":403975,"line_start":370,"line_end":370,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403980,"byte_end":403983,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":403988,"byte_end":403999,"line_start":372,"line_end":372,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404004,"byte_end":404054,"line_start":373,"line_end":373,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404059,"byte_end":404062,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404067,"byte_end":404105,"line_start":375,"line_end":375,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404110,"byte_end":404180,"line_start":376,"line_end":376,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404185,"byte_end":404277,"line_start":377,"line_end":377,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404282,"byte_end":404289,"line_start":378,"line_end":378,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404741,"byte_end":404751,"line_start":392,"line_end":392,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404585,"byte_end":404671,"line_start":390,"line_end":390,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404676,"byte_end":404729,"line_start":391,"line_end":391,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405083,"byte_end":405093,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404919,"byte_end":405013,"line_start":397,"line_end":397,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405018,"byte_end":405071,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406556,"byte_end":406571,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405261,"byte_end":405333,"line_start":404,"line_end":404,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405338,"byte_end":405408,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405413,"byte_end":405460,"line_start":406,"line_end":406,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405465,"byte_end":405552,"line_start":407,"line_end":407,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405557,"byte_end":405589,"line_start":408,"line_end":408,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405594,"byte_end":405679,"line_start":409,"line_end":409,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405684,"byte_end":405687,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405692,"byte_end":405706,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405711,"byte_end":405714,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405719,"byte_end":405730,"line_start":413,"line_end":413,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405735,"byte_end":405807,"line_start":414,"line_end":414,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405812,"byte_end":405880,"line_start":415,"line_end":415,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405885,"byte_end":405949,"line_start":416,"line_end":416,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":405954,"byte_end":406002,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406007,"byte_end":406070,"line_start":418,"line_end":418,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406075,"byte_end":406118,"line_start":419,"line_end":419,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406123,"byte_end":406184,"line_start":420,"line_end":420,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406189,"byte_end":406228,"line_start":421,"line_end":421,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406233,"byte_end":406236,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406241,"byte_end":406286,"line_start":423,"line_end":423,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406291,"byte_end":406359,"line_start":424,"line_end":424,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406364,"byte_end":406425,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406430,"byte_end":406474,"line_start":426,"line_end":426,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406479,"byte_end":406486,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":406491,"byte_end":406544,"line_start":428,"line_end":428,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408181,"byte_end":408198,"line_start":474,"line_end":474,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408022,"byte_end":408097,"line_start":471,"line_end":471,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408102,"byte_end":408155,"line_start":472,"line_end":472,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408160,"byte_end":408169,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408754,"byte_end":408760,"line_start":488,"line_end":488,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408481,"byte_end":408553,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408558,"byte_end":408627,"line_start":484,"line_end":484,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408632,"byte_end":408670,"line_start":485,"line_end":485,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408675,"byte_end":408728,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408733,"byte_end":408742,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1012},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1666},{"krate":0,"index":1673},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1675},{"krate":0,"index":1692},{"krate":0,"index":1690},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1682},{"krate":0,"index":1693},{"krate":0,"index":1746},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1737},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1748},{"krate":0,"index":1795},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1786},{"krate":0,"index":1797},{"krate":0,"index":1808},{"krate":0,"index":1806},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1810},{"krate":0,"index":1827},{"krate":0,"index":1825},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1829},{"krate":0,"index":1866},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1855},{"krate":0,"index":1857},{"krate":0,"index":1852},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1869},{"krate":0,"index":1882},{"krate":0,"index":1880},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1872},{"krate":0,"index":1884},{"krate":0,"index":1908},{"krate":0,"index":1906},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1899},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1119},{"krate":0,"index":1123},{"krate":0,"index":1192},{"krate":0,"index":1261},{"krate":0,"index":1305},{"krate":0,"index":1960},{"krate":0,"index":1966},{"krate":0,"index":1329},{"krate":0,"index":1336},{"krate":0,"index":1341}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"! Formatting (and parsing) utilities for date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":480977,"byte_end":481034,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481035,"byte_end":481038,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This module provides the common types and routines to implement,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481039,"byte_end":481107,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"! for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481108,"byte_end":481187,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481188,"byte_end":481276,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! For most cases you should use these high-level interfaces.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481277,"byte_end":481339,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481340,"byte_end":481343,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481344,"byte_end":481432,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"! which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481433,"byte_end":481526,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"! the [`Item`](./enum.Item.html) type.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481527,"byte_end":481567,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! They are generated from more readable **format strings**;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481568,"byte_end":481629,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"! currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481630,"byte_end":481699,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"! C's `strftime` format](./strftime/index.html).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481700,"byte_end":481750,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":481752,"byte_end":481796,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482818,"byte_end":482822,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482798,"byte_end":482813,"line_start":52,"line_end":52,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1678},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482856,"byte_end":482860,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482828,"byte_end":482851,"line_start":54,"line_end":54,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1680},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482889,"byte_end":482894,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482866,"byte_end":482884,"line_start":56,"line_end":56,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1675},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482788,"byte_end":482791,"line_start":51,"line_end":51,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1680}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482692,"byte_end":482733,"line_start":49,"line_end":49,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1694},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483790,"byte_end":483794,"line_start":77,"line_end":77,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483667,"byte_end":483706,"line_start":75,"line_end":75,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483711,"byte_end":483785,"line_start":76,"line_end":76,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1696},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483896,"byte_end":483906,"line_start":79,"line_end":79,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483800,"byte_end":483891,"line_start":78,"line_end":78,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1698},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483977,"byte_end":483987,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483912,"byte_end":483972,"line_start":80,"line_end":80,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1700},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484122,"byte_end":484129,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483993,"byte_end":484038,"line_start":82,"line_end":82,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484043,"byte_end":484117,"line_start":83,"line_end":83,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1702},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484227,"byte_end":484240,"line_start":86,"line_end":86,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484135,"byte_end":484222,"line_start":85,"line_end":85,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1704},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484323,"byte_end":484336,"line_start":88,"line_end":88,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484246,"byte_end":484318,"line_start":87,"line_end":87,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1706},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484367,"byte_end":484372,"line_start":90,"line_end":90,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484342,"byte_end":484362,"line_start":89,"line_end":89,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1708},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484414,"byte_end":484417,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484378,"byte_end":484409,"line_start":91,"line_end":91,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1710},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484510,"byte_end":484521,"line_start":94,"line_end":94,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484423,"byte_end":484505,"line_start":93,"line_end":93,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1712},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484614,"byte_end":484625,"line_start":96,"line_end":96,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484527,"byte_end":484609,"line_start":95,"line_end":95,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1714},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484683,"byte_end":484690,"line_start":98,"line_end":98,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484631,"byte_end":484678,"line_start":97,"line_end":97,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1716},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484766,"byte_end":484780,"line_start":100,"line_end":100,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484696,"byte_end":484761,"line_start":99,"line_end":99,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1718},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484854,"byte_end":484868,"line_start":102,"line_end":102,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484786,"byte_end":484849,"line_start":101,"line_end":101,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1720},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484909,"byte_end":484916,"line_start":104,"line_end":104,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484874,"byte_end":484904,"line_start":103,"line_end":103,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1722},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484975,"byte_end":484979,"line_start":106,"line_end":106,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484922,"byte_end":484970,"line_start":105,"line_end":105,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1724},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485038,"byte_end":485044,"line_start":108,"line_end":108,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":484985,"byte_end":485033,"line_start":107,"line_end":107,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485117,"byte_end":485123,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485050,"byte_end":485112,"line_start":109,"line_end":109,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485198,"byte_end":485204,"line_start":112,"line_end":112,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485129,"byte_end":485193,"line_start":111,"line_end":111,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485407,"byte_end":485417,"line_start":116,"line_end":116,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485210,"byte_end":485278,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485283,"byte_end":485324,"line_start":114,"line_end":114,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485329,"byte_end":485402,"line_start":115,"line_end":115,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485597,"byte_end":485606,"line_start":119,"line_end":119,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485423,"byte_end":485515,"line_start":117,"line_end":117,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485520,"byte_end":485592,"line_start":118,"line_end":118,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485825,"byte_end":485833,"line_start":125,"line_end":125,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1693},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485613,"byte_end":485636,"line_start":121,"line_end":121,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485641,"byte_end":485644,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485649,"byte_end":485725,"line_start":123,"line_end":123,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485730,"byte_end":485820,"line_start":124,"line_end":124,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1693},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483653,"byte_end":483660,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482899,"byte_end":482922,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482923,"byte_end":482993,"line_start":61,"line_end":61,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482994,"byte_end":482997,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":482998,"byte_end":483064,"line_start":63,"line_end":63,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483065,"byte_end":483164,"line_start":64,"line_end":64,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483165,"byte_end":483192,"line_start":65,"line_end":65,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483193,"byte_end":483272,"line_start":66,"line_end":66,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483273,"byte_end":483276,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483277,"byte_end":483338,"line_start":68,"line_end":68,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483339,"byte_end":483422,"line_start":69,"line_end":69,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483423,"byte_end":483473,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483474,"byte_end":483561,"line_start":71,"line_end":71,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":483562,"byte_end":483604,"line_start":72,"line_end":72,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1035},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485941,"byte_end":485956,"line_start":129,"line_end":129,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1036}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485855,"byte_end":485929,"line_start":128,"line_end":128,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1749},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486754,"byte_end":486768,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486621,"byte_end":486649,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486654,"byte_end":486657,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486662,"byte_end":486749,"line_start":161,"line_end":161,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1751},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486901,"byte_end":486914,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486774,"byte_end":486795,"line_start":163,"line_end":163,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486800,"byte_end":486803,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486808,"byte_end":486896,"line_start":165,"line_end":165,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1753},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487063,"byte_end":487079,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486920,"byte_end":486958,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486963,"byte_end":486966,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486971,"byte_end":487058,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1755},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487222,"byte_end":487237,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487085,"byte_end":487116,"line_start":171,"line_end":171,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487121,"byte_end":487124,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487129,"byte_end":487217,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1757},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487315,"byte_end":487324,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487243,"byte_end":487253,"line_start":175,"line_end":175,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487258,"byte_end":487261,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487266,"byte_end":487310,"line_start":177,"line_end":177,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1759},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487402,"byte_end":487411,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487330,"byte_end":487340,"line_start":179,"line_end":179,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487345,"byte_end":487348,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487353,"byte_end":487397,"line_start":181,"line_end":181,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1761},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487658,"byte_end":487668,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487417,"byte_end":487490,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487495,"byte_end":487571,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487576,"byte_end":487653,"line_start":185,"line_end":185,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1763},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487758,"byte_end":487769,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487674,"byte_end":487753,"line_start":187,"line_end":187,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1765},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487859,"byte_end":487870,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487775,"byte_end":487854,"line_start":189,"line_end":189,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1767},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487960,"byte_end":487971,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487876,"byte_end":487955,"line_start":191,"line_end":191,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1769},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488092,"byte_end":488104,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":487977,"byte_end":487995,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488000,"byte_end":488003,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488008,"byte_end":488087,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1771},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488439,"byte_end":488458,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488110,"byte_end":488183,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488188,"byte_end":488191,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488196,"byte_end":488288,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488293,"byte_end":488345,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488350,"byte_end":488434,"line_start":201,"line_end":201,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1773},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488850,"byte_end":488870,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488464,"byte_end":488532,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488537,"byte_end":488540,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488545,"byte_end":488637,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488642,"byte_end":488699,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488704,"byte_end":488756,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488761,"byte_end":488845,"line_start":208,"line_end":208,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489009,"byte_end":489023,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488876,"byte_end":488962,"line_start":210,"line_end":210,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":488967,"byte_end":489004,"line_start":211,"line_end":211,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1777},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489164,"byte_end":489179,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489029,"byte_end":489117,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489122,"byte_end":489159,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489272,"byte_end":489279,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489185,"byte_end":489267,"line_start":216,"line_end":216,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1781},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489335,"byte_end":489342,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489285,"byte_end":489330,"line_start":218,"line_end":218,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489561,"byte_end":489569,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1748},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489349,"byte_end":489372,"line_start":221,"line_end":221,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489377,"byte_end":489380,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489385,"byte_end":489461,"line_start":223,"line_end":223,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489466,"byte_end":489556,"line_start":224,"line_end":224,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1748},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486609,"byte_end":486614,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486386,"byte_end":486414,"line_start":153,"line_end":153,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486415,"byte_end":486418,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486419,"byte_end":486475,"line_start":155,"line_end":155,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486476,"byte_end":486560,"line_start":156,"line_end":156,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1797},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489719,"byte_end":489732,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1798}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":489589,"byte_end":489668,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1831},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490748,"byte_end":490755,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490703,"byte_end":490743,"line_start":256,"line_end":256,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1834},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490893,"byte_end":490905,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490770,"byte_end":490830,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490835,"byte_end":490888,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1837},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490993,"byte_end":490998,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490921,"byte_end":490988,"line_start":261,"line_end":261,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1840},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491134,"byte_end":491144,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491013,"byte_end":491071,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491076,"byte_end":491129,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491323,"byte_end":491330,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491160,"byte_end":491250,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491255,"byte_end":491318,"line_start":267,"line_end":267,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1847},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491377,"byte_end":491382,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491350,"byte_end":491372,"line_start":269,"line_end":269,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1850},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491471,"byte_end":491476,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1829},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":491395,"byte_end":491466,"line_start":271,"line_end":271,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1829},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490688,"byte_end":490692,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1847},{"krate":0,"index":1850}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":490564,"byte_end":490639,"line_start":253,"line_end":253,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1869},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":492224,"byte_end":492234,"line_start":313,"line_end":313,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":492128,"byte_end":492167,"line_start":311,"line_end":311,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1051},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":493502,"byte_end":493513,"line_start":348,"line_end":348,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":493456,"byte_end":493492,"line_start":347,"line_end":347,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1064},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":495083,"byte_end":495094,"line_start":383,"line_end":383,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"fn <'a> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, item: &Item<'a>) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":494987,"byte_end":495021,"line_start":381,"line_end":381,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":495022,"byte_end":495075,"line_start":382,"line_end":382,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1119},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507383,"byte_end":507389,"line_start":655,"line_end":655,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507217,"byte_end":507281,"line_start":652,"line_end":652,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507282,"byte_end":507321,"line_start":653,"line_end":653,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507322,"byte_end":507375,"line_start":654,"line_end":654,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1910},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511658,"byte_end":511664,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511140,"byte_end":511208,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511209,"byte_end":511212,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511213,"byte_end":511296,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511297,"byte_end":511389,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511390,"byte_end":511393,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511394,"byte_end":511476,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511477,"byte_end":511572,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511573,"byte_end":511611,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511841,"byte_end":511845,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511671,"byte_end":511680,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511685,"byte_end":511688,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511693,"byte_end":511768,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511773,"byte_end":511832,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1912},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512149,"byte_end":512161,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511865,"byte_end":511933,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511938,"byte_end":511941,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":511946,"byte_end":512003,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512008,"byte_end":512067,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512072,"byte_end":512140,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1913},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512254,"byte_end":512266,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512181,"byte_end":512245,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1914},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512533,"byte_end":512540,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512286,"byte_end":512360,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512365,"byte_end":512368,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512373,"byte_end":512458,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512463,"byte_end":512524,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512927,"byte_end":512942,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512560,"byte_end":512650,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512655,"byte_end":512702,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512707,"byte_end":512710,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512715,"byte_end":512772,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512777,"byte_end":512842,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512847,"byte_end":512918,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1916},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513109,"byte_end":513124,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":512962,"byte_end":513048,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513053,"byte_end":513100,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513171,"byte_end":513176,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513144,"byte_end":513162,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513331,"byte_end":513344,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513196,"byte_end":513267,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513272,"byte_end":513322,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513499,"byte_end":513512,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513364,"byte_end":513435,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513440,"byte_end":513490,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1920},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513652,"byte_end":513659,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513532,"byte_end":513595,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513600,"byte_end":513643,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513708,"byte_end":513715,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513679,"byte_end":513699,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1922},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513809,"byte_end":513816,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513739,"byte_end":513800,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513920,"byte_end":513923,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513836,"byte_end":513911,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1924},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514024,"byte_end":514035,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":513943,"byte_end":514015,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514098,"byte_end":514109,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514055,"byte_end":514089,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1926},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514164,"byte_end":514170,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514129,"byte_end":514155,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514254,"byte_end":514260,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514190,"byte_end":514245,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1928},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514359,"byte_end":514369,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514280,"byte_end":514350,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514572,"byte_end":514581,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514389,"byte_end":514466,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514471,"byte_end":514474,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514479,"byte_end":514563,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1930},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514660,"byte_end":514666,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":514601,"byte_end":514651,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515995,"byte_end":515998,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515937,"byte_end":515983,"line_start":158,"line_end":158,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516148,"byte_end":516156,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516050,"byte_end":516122,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516127,"byte_end":516136,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516405,"byte_end":516421,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516291,"byte_end":516379,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516384,"byte_end":516393,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516749,"byte_end":516765,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516635,"byte_end":516723,"line_start":178,"line_end":178,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516728,"byte_end":516737,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517083,"byte_end":517094,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":516979,"byte_end":517057,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517062,"byte_end":517071,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517352,"byte_end":517371,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517232,"byte_end":517326,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517331,"byte_end":517340,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517708,"byte_end":517727,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517588,"byte_end":517682,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517687,"byte_end":517696,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518044,"byte_end":518053,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":517944,"byte_end":518018,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518023,"byte_end":518032,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518305,"byte_end":518322,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518189,"byte_end":518279,"line_start":217,"line_end":217,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518284,"byte_end":518293,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518582,"byte_end":518599,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518466,"byte_end":518556,"line_start":223,"line_end":223,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518561,"byte_end":518570,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518847,"byte_end":518858,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518743,"byte_end":518821,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518826,"byte_end":518835,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519100,"byte_end":519111,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":518996,"byte_end":519074,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519079,"byte_end":519088,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519327,"byte_end":519338,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519223,"byte_end":519301,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519306,"byte_end":519315,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519572,"byte_end":519579,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519476,"byte_end":519546,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519551,"byte_end":519560,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519865,"byte_end":519873,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519713,"byte_end":519799,"line_start":253,"line_end":253,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519804,"byte_end":519839,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":519844,"byte_end":519853,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520150,"byte_end":520160,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520006,"byte_end":520079,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520084,"byte_end":520124,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520129,"byte_end":520138,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520537,"byte_end":520545,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520369,"byte_end":520436,"line_start":270,"line_end":270,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520441,"byte_end":520511,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520516,"byte_end":520525,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520889,"byte_end":520899,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520787,"byte_end":520863,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":520868,"byte_end":520877,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521138,"byte_end":521148,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521036,"byte_end":521112,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521117,"byte_end":521126,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521395,"byte_end":521409,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521285,"byte_end":521369,"line_start":292,"line_end":292,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521374,"byte_end":521383,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521658,"byte_end":521671,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521550,"byte_end":521632,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521637,"byte_end":521646,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521883,"byte_end":521893,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521781,"byte_end":521857,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":521862,"byte_end":521871,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522537,"byte_end":522550,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522030,"byte_end":522082,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522087,"byte_end":522090,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522095,"byte_end":522169,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522174,"byte_end":522177,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522182,"byte_end":522205,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522210,"byte_end":522248,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522253,"byte_end":522324,"line_start":316,"line_end":316,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522329,"byte_end":522349,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522354,"byte_end":522357,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522362,"byte_end":522456,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":522461,"byte_end":522525,"line_start":320,"line_end":320,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531869,"byte_end":531882,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531466,"byte_end":531518,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531523,"byte_end":531526,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531531,"byte_end":531605,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531610,"byte_end":531613,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531618,"byte_end":531677,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531682,"byte_end":531738,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531743,"byte_end":531782,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531787,"byte_end":531790,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":531795,"byte_end":531857,"line_start":528,"line_end":528,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533665,"byte_end":533694,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533180,"byte_end":533241,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533246,"byte_end":533335,"line_start":565,"line_end":565,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533340,"byte_end":533417,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533422,"byte_end":533425,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533430,"byte_end":533493,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533498,"byte_end":533584,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":533589,"byte_end":533653,"line_start":570,"line_end":570,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537112,"byte_end":537127,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537036,"byte_end":537100,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537599,"byte_end":537610,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537248,"byte_end":537318,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537323,"byte_end":537326,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537331,"byte_end":537394,"line_start":650,"line_end":650,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537399,"byte_end":537485,"line_start":651,"line_end":651,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537490,"byte_end":537518,"line_start":652,"line_end":652,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":537523,"byte_end":537587,"line_start":653,"line_end":653,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538638,"byte_end":538663,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538081,"byte_end":538151,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538156,"byte_end":538236,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538241,"byte_end":538244,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538249,"byte_end":538312,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538317,"byte_end":538403,"line_start":669,"line_end":669,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538408,"byte_end":538436,"line_start":670,"line_end":670,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538441,"byte_end":538505,"line_start":671,"line_end":671,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538510,"byte_end":538585,"line_start":672,"line_end":672,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":538590,"byte_end":538626,"line_start":673,"line_end":673,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1228},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575805,"byte_end":575810,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":574902,"byte_end":574976,"line_start":218,"line_end":218,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":574977,"byte_end":575073,"line_start":219,"line_end":219,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575074,"byte_end":575127,"line_start":220,"line_end":220,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575128,"byte_end":575212,"line_start":221,"line_end":221,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575213,"byte_end":575216,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575217,"byte_end":575261,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575262,"byte_end":575265,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575266,"byte_end":575324,"line_start":225,"line_end":225,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575325,"byte_end":575418,"line_start":226,"line_end":226,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575419,"byte_end":575494,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575495,"byte_end":575498,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575499,"byte_end":575542,"line_start":229,"line_end":229,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575543,"byte_end":575606,"line_start":230,"line_end":230,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575607,"byte_end":575698,"line_start":231,"line_end":231,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575699,"byte_end":575702,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":575703,"byte_end":575797,"line_start":233,"line_end":233,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1305},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1941},{"krate":0,"index":1948},{"krate":0,"index":1945},{"krate":0,"index":1313},{"krate":0,"index":1318},{"krate":0,"index":1319}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same as `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same as `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same as `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":619898,"byte_end":630578,"line_start":4,"line_end":160,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1941},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":630746,"byte_end":630759,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1944}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":630654,"byte_end":630710,"line_start":164,"line_end":164,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1315},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631235,"byte_end":631238,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631149,"byte_end":631223,"line_start":176,"line_end":176,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1960},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508155,"byte_end":508168,"line_start":685,"line_end":685,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507909,"byte_end":507990,"line_start":681,"line_end":681,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507991,"byte_end":508072,"line_start":682,"line_end":682,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508073,"byte_end":508126,"line_start":683,"line_end":683,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508694,"byte_end":508697,"line_start":699,"line_end":699,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508617,"byte_end":508682,"line_start":698,"line_end":698,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508957,"byte_end":508972,"line_start":704,"line_end":704,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508865,"byte_end":508945,"line_start":703,"line_end":703,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1356},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646790,"byte_end":646801,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646392,"byte_end":646468,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646469,"byte_end":646540,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646541,"byte_end":646613,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646614,"byte_end":646689,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646690,"byte_end":646767,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646768,"byte_end":646779,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647331,"byte_end":647344,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646808,"byte_end":646883,"line_start":22,"line_end":22,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646888,"byte_end":646957,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646962,"byte_end":646994,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":646999,"byte_end":647002,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647007,"byte_end":647020,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647025,"byte_end":647037,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647042,"byte_end":647109,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647114,"byte_end":647177,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647182,"byte_end":647244,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647249,"byte_end":647311,"line_start":31,"line_end":31,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647316,"byte_end":647323,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647847,"byte_end":647860,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647378,"byte_end":647442,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647447,"byte_end":647510,"line_start":36,"line_end":36,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647515,"byte_end":647518,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647523,"byte_end":647536,"line_start":38,"line_end":38,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647541,"byte_end":647553,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647558,"byte_end":647625,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647630,"byte_end":647693,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647698,"byte_end":647760,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647765,"byte_end":647827,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647832,"byte_end":647839,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1364},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649599,"byte_end":649612,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649186,"byte_end":649258,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649259,"byte_end":649262,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649263,"byte_end":649280,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649281,"byte_end":649360,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649361,"byte_end":649440,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649441,"byte_end":649521,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649522,"byte_end":649588,"line_start":101,"line_end":101,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1365},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649725,"byte_end":649728,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649626,"byte_end":649676,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649681,"byte_end":649715,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650431,"byte_end":650445,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649895,"byte_end":649933,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649938,"byte_end":649941,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649946,"byte_end":649959,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649964,"byte_end":649976,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649981,"byte_end":650050,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650055,"byte_end":650118,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650123,"byte_end":650138,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650143,"byte_end":650218,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650223,"byte_end":650260,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650265,"byte_end":650271,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650276,"byte_end":650291,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650296,"byte_end":650362,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650367,"byte_end":650400,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650405,"byte_end":650411,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650416,"byte_end":650423,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":651043,"byte_end":651057,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"fn (self, duration: Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1364},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650505,"byte_end":650545,"line_start":128,"line_end":128,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650550,"byte_end":650553,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650558,"byte_end":650571,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650576,"byte_end":650588,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650593,"byte_end":650662,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650667,"byte_end":650730,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650735,"byte_end":650750,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650755,"byte_end":650830,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650835,"byte_end":650872,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650877,"byte_end":650883,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650888,"byte_end":650903,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650908,"byte_end":650974,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":650979,"byte_end":651012,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":651017,"byte_end":651023,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":651028,"byte_end":651035,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1970},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653884,"byte_end":653908,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653469,"byte_end":653547,"line_start":207,"line_end":207,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653552,"byte_end":653555,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653560,"byte_end":653572,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653577,"byte_end":653661,"line_start":210,"line_end":210,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653666,"byte_end":653718,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653723,"byte_end":653726,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653731,"byte_end":653746,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653751,"byte_end":653798,"line_start":214,"line_end":214,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653803,"byte_end":653856,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653861,"byte_end":653867,"line_start":216,"line_end":216,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653872,"byte_end":653879,"line_start":217,"line_end":217,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654335,"byte_end":654355,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653915,"byte_end":653975,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653980,"byte_end":653983,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653988,"byte_end":654000,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654005,"byte_end":654089,"line_start":223,"line_end":223,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654094,"byte_end":654168,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654173,"byte_end":654176,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654181,"byte_end":654196,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654201,"byte_end":654254,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654259,"byte_end":654307,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654312,"byte_end":654318,"line_start":229,"line_end":229,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654323,"byte_end":654330,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1974},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654720,"byte_end":654741,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":1969},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654362,"byte_end":654422,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654427,"byte_end":654430,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654435,"byte_end":654447,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654452,"byte_end":654536,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654541,"byte_end":654593,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654598,"byte_end":654601,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654606,"byte_end":654703,"line_start":239,"line_end":239,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654708,"byte_end":654715,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":1969},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653449,"byte_end":653462,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"RoundingError::{DurationExceedsTimestamp, DurationExceedsLimit, TimestampExceedsLimit}","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1974}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653323,"byte_end":653363,"line_start":202,"line_end":202,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653364,"byte_end":653367,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":653368,"byte_end":653394,"line_start":204,"line_end":204,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1988},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25022,"byte_end":25025,"line_start":604,"line_end":604,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25006,"byte_end":25017,"line_start":603,"line_end":603,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1991},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25052,"byte_end":25055,"line_start":606,"line_end":606,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25035,"byte_end":25047,"line_start":605,"line_end":605,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25084,"byte_end":25087,"line_start":608,"line_end":608,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25065,"byte_end":25079,"line_start":607,"line_end":607,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25115,"byte_end":25118,"line_start":610,"line_end":610,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25097,"byte_end":25110,"line_start":609,"line_end":609,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2000},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25144,"byte_end":25147,"line_start":612,"line_end":612,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25128,"byte_end":25139,"line_start":611,"line_end":611,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2003},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25175,"byte_end":25178,"line_start":614,"line_end":614,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25157,"byte_end":25170,"line_start":613,"line_end":613,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2006},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25204,"byte_end":25207,"line_start":616,"line_end":616,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25188,"byte_end":25199,"line_start":615,"line_end":615,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1987},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24992,"byte_end":24999,"line_start":602,"line_end":602,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1994},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2003},{"krate":0,"index":2006}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24597,"byte_end":24617,"line_start":595,"line_end":595,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24618,"byte_end":24621,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24622,"byte_end":24679,"line_start":597,"line_end":597,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24680,"byte_end":24758,"line_start":598,"line_end":598,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":24759,"byte_end":24850,"line_start":599,"line_end":599,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25526,"byte_end":25530,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25235,"byte_end":25264,"line_start":620,"line_end":620,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25269,"byte_end":25272,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25277,"byte_end":25348,"line_start":622,"line_end":622,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25353,"byte_end":25424,"line_start":623,"line_end":623,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25429,"byte_end":25500,"line_start":624,"line_end":624,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25505,"byte_end":25514,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26183,"byte_end":26187,"line_start":644,"line_end":644,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25888,"byte_end":25921,"line_start":638,"line_end":638,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25926,"byte_end":25929,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25934,"byte_end":26005,"line_start":640,"line_end":640,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26010,"byte_end":26081,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26086,"byte_end":26157,"line_start":642,"line_end":642,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26162,"byte_end":26171,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26929,"byte_end":26947,"line_start":662,"line_end":662,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26545,"byte_end":26629,"line_start":656,"line_end":656,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26634,"byte_end":26637,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26642,"byte_end":26727,"line_start":658,"line_end":658,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26732,"byte_end":26817,"line_start":659,"line_end":659,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26822,"byte_end":26903,"line_start":660,"line_end":660,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":26908,"byte_end":26917,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27582,"byte_end":27600,"line_start":680,"line_end":680,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27224,"byte_end":27282,"line_start":674,"line_end":674,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27287,"byte_end":27290,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27295,"byte_end":27380,"line_start":676,"line_end":676,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27385,"byte_end":27470,"line_start":677,"line_end":677,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27475,"byte_end":27556,"line_start":678,"line_end":678,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27561,"byte_end":27570,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28241,"byte_end":28261,"line_start":698,"line_end":698,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27877,"byte_end":27935,"line_start":692,"line_end":692,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27940,"byte_end":27943,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":27948,"byte_end":28035,"line_start":694,"line_end":694,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28040,"byte_end":28127,"line_start":695,"line_end":695,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28132,"byte_end":28215,"line_start":696,"line_end":696,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28220,"byte_end":28229,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28902,"byte_end":28922,"line_start":716,"line_end":716,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28538,"byte_end":28596,"line_start":710,"line_end":710,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28601,"byte_end":28604,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28609,"byte_end":28696,"line_start":712,"line_end":712,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28701,"byte_end":28788,"line_start":713,"line_end":713,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28793,"byte_end":28876,"line_start":714,"line_end":714,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":28881,"byte_end":28890,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2023},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":30761,"byte_end":30778,"line_start":780,"line_end":780,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2024}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":30654,"byte_end":30721,"line_start":778,"line_end":778,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1393},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33834,"byte_end":33842,"line_start":896,"line_end":896,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33774,"byte_end":33823,"line_start":895,"line_end":895,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33960,"byte_end":33964,"line_start":898,"line_end":898,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33856,"byte_end":33952,"line_start":897,"line_end":897,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34173,"byte_end":34180,"line_start":903,"line_end":903,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33985,"byte_end":34058,"line_start":900,"line_end":900,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34063,"byte_end":34151,"line_start":901,"line_end":901,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34156,"byte_end":34165,"line_start":902,"line_end":902,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34475,"byte_end":34480,"line_start":915,"line_end":915,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34368,"byte_end":34413,"line_start":912,"line_end":912,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34418,"byte_end":34421,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34426,"byte_end":34467,"line_start":914,"line_end":914,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34608,"byte_end":34614,"line_start":920,"line_end":920,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34501,"byte_end":34546,"line_start":917,"line_end":917,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34551,"byte_end":34554,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34559,"byte_end":34600,"line_start":919,"line_end":919,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34785,"byte_end":34788,"line_start":925,"line_end":925,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34635,"byte_end":34680,"line_start":922,"line_end":922,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34685,"byte_end":34688,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34693,"byte_end":34777,"line_start":924,"line_end":924,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34959,"byte_end":34963,"line_start":930,"line_end":930,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34809,"byte_end":34854,"line_start":927,"line_end":927,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34859,"byte_end":34862,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34867,"byte_end":34951,"line_start":929,"line_end":929,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35132,"byte_end":35139,"line_start":935,"line_end":935,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":34984,"byte_end":35028,"line_start":932,"line_end":932,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35033,"byte_end":35036,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35041,"byte_end":35124,"line_start":934,"line_end":934,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35308,"byte_end":35316,"line_start":940,"line_end":940,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35160,"byte_end":35204,"line_start":937,"line_end":937,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35209,"byte_end":35212,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35217,"byte_end":35300,"line_start":939,"line_end":939,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35373,"byte_end":35380,"line_start":943,"line_end":943,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35337,"byte_end":35365,"line_start":942,"line_end":942,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35438,"byte_end":35446,"line_start":946,"line_end":946,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35405,"byte_end":35430,"line_start":945,"line_end":945,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35604,"byte_end":35613,"line_start":951,"line_end":951,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35471,"byte_end":35522,"line_start":948,"line_end":948,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35527,"byte_end":35530,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35535,"byte_end":35596,"line_start":950,"line_end":950,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35806,"byte_end":35816,"line_start":956,"line_end":956,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35654,"byte_end":35724,"line_start":953,"line_end":953,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35729,"byte_end":35732,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35737,"byte_end":35798,"line_start":955,"line_end":955,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36010,"byte_end":36021,"line_start":961,"line_end":961,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35858,"byte_end":35928,"line_start":958,"line_end":958,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35933,"byte_end":35936,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":35941,"byte_end":36002,"line_start":960,"line_end":960,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36216,"byte_end":36224,"line_start":966,"line_end":966,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36064,"byte_end":36134,"line_start":963,"line_end":963,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36139,"byte_end":36142,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36147,"byte_end":36208,"line_start":965,"line_end":965,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36416,"byte_end":36425,"line_start":971,"line_end":971,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36264,"byte_end":36334,"line_start":968,"line_end":968,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36339,"byte_end":36342,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36347,"byte_end":36408,"line_start":970,"line_end":970,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36617,"byte_end":36629,"line_start":976,"line_end":976,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36466,"byte_end":36535,"line_start":973,"line_end":973,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36540,"byte_end":36543,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36548,"byte_end":36609,"line_start":975,"line_end":975,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36824,"byte_end":36837,"line_start":981,"line_end":981,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36673,"byte_end":36742,"line_start":978,"line_end":978,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36747,"byte_end":36750,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36755,"byte_end":36816,"line_start":980,"line_end":980,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37396,"byte_end":37412,"line_start":995,"line_end":995,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36882,"byte_end":36976,"line_start":983,"line_end":983,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36981,"byte_end":36984,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":36989,"byte_end":37003,"line_start":985,"line_end":985,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37008,"byte_end":37011,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37016,"byte_end":37023,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37028,"byte_end":37066,"line_start":988,"line_end":988,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37071,"byte_end":37074,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37079,"byte_end":37155,"line_start":990,"line_end":990,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37160,"byte_end":37229,"line_start":991,"line_end":991,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37234,"byte_end":37301,"line_start":992,"line_end":992,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37306,"byte_end":37376,"line_start":993,"line_end":993,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":37381,"byte_end":37388,"line_start":994,"line_end":994,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1412},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38070,"byte_end":38078,"line_start":1014,"line_end":1014,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38010,"byte_end":38059,"line_start":1013,"line_end":1013,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38141,"byte_end":38145,"line_start":1016,"line_end":1016,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38092,"byte_end":38133,"line_start":1015,"line_end":1015,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38296,"byte_end":38302,"line_start":1021,"line_end":1021,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38166,"byte_end":38227,"line_start":1018,"line_end":1018,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38232,"byte_end":38274,"line_start":1019,"line_end":1019,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38279,"byte_end":38288,"line_start":1020,"line_end":1020,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38546,"byte_end":38552,"line_start":1031,"line_end":1031,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38495,"byte_end":38538,"line_start":1030,"line_end":1030,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38624,"byte_end":38630,"line_start":1034,"line_end":1034,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38573,"byte_end":38616,"line_start":1033,"line_end":1033,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38873,"byte_end":38883,"line_start":1039,"line_end":1039,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38651,"byte_end":38721,"line_start":1036,"line_end":1036,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38726,"byte_end":38786,"line_start":1037,"line_end":1037,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38791,"byte_end":38865,"line_start":1038,"line_end":1038,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39037,"byte_end":39046,"line_start":1044,"line_end":1044,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38904,"byte_end":38955,"line_start":1041,"line_end":1041,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38960,"byte_end":38963,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38968,"byte_end":39029,"line_start":1043,"line_end":1043,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39222,"byte_end":39233,"line_start":1049,"line_end":1049,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39087,"byte_end":39140,"line_start":1046,"line_end":1046,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39145,"byte_end":39148,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39153,"byte_end":39214,"line_start":1048,"line_end":1048,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39520,"byte_end":39531,"line_start":1056,"line_end":1056,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39273,"byte_end":39326,"line_start":1051,"line_end":1051,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39331,"byte_end":39334,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39339,"byte_end":39400,"line_start":1053,"line_end":1053,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39405,"byte_end":39457,"line_start":1054,"line_end":1054,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39462,"byte_end":39512,"line_start":1055,"line_end":1055,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39864,"byte_end":39879,"line_start":1063,"line_end":1063,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39571,"byte_end":39650,"line_start":1058,"line_end":1058,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39655,"byte_end":39658,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39663,"byte_end":39724,"line_start":1060,"line_end":1060,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39729,"byte_end":39789,"line_start":1061,"line_end":1061,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39794,"byte_end":39856,"line_start":1062,"line_end":1062,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":40008,"byte_end":40033,"line_start":1067,"line_end":1067,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1412},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39920,"byte_end":39986,"line_start":1065,"line_end":1065,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":39991,"byte_end":40000,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46551,"byte_end":46562,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47743,"byte_end":47754,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50964,"byte_end":50975,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66322,"byte_end":66333,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68890,"byte_end":68901,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":69489,"byte_end":69500,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":69581,"byte_end":69592,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":70090,"byte_end":70101,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":70869,"byte_end":70878,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71066,"byte_end":71075,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71264,"byte_end":71277,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71473,"byte_end":71486,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71697,"byte_end":71705,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71917,"byte_end":71925,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75897,"byte_end":75902,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":76793,"byte_end":76798,"line_start":111,"line_end":111,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81556,"byte_end":81559,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82348,"byte_end":82351,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82871,"byte_end":82874,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82970,"byte_end":82973,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":83089,"byte_end":83092,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":88887,"byte_end":88896,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125294,"byte_end":125303,"line_start":1053,"line_end":1053,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":137635,"byte_end":137644,"line_start":1420,"line_end":1420,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":137863,"byte_end":137872,"line_start":1429,"line_end":1429,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":139287,"byte_end":139296,"line_start":1462,"line_end":1462,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":139515,"byte_end":139524,"line_start":1471,"line_end":1471,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":140780,"byte_end":140789,"line_start":1505,"line_end":1505,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":141782,"byte_end":141791,"line_start":1536,"line_end":1536,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":143050,"byte_end":143059,"line_start":1571,"line_end":1571,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":143661,"byte_end":143670,"line_start":1593,"line_end":1593,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174248,"byte_end":174261,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200715,"byte_end":200728,"line_start":703,"line_end":703,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":211784,"byte_end":211797,"line_start":1021,"line_end":1021,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":217993,"byte_end":218006,"line_start":1193,"line_end":1193,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":220621,"byte_end":220634,"line_start":1255,"line_end":1255,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":220865,"byte_end":220878,"line_start":1264,"line_end":1264,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":223389,"byte_end":223402,"line_start":1325,"line_end":1325,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":223633,"byte_end":223646,"line_start":1334,"line_end":1334,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":225584,"byte_end":225597,"line_start":1387,"line_end":1387,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":226805,"byte_end":226818,"line_start":1423,"line_end":1423,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":227914,"byte_end":227927,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":228665,"byte_end":228678,"line_start":1476,"line_end":1476,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":272885,"byte_end":272894,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":273691,"byte_end":273700,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":281841,"byte_end":281843,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":283922,"byte_end":283924,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":284523,"byte_end":284526,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":286489,"byte_end":286492,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300715,"byte_end":300722,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":303268,"byte_end":303275,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312132,"byte_end":312141,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":639},{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336673,"byte_end":336682,"line_start":804,"line_end":804,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":343911,"byte_end":343920,"line_start":1017,"line_end":1017,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":346927,"byte_end":346936,"line_start":1082,"line_end":1082,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":347117,"byte_end":347126,"line_start":1091,"line_end":1091,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":349729,"byte_end":349738,"line_start":1152,"line_end":1152,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":349919,"byte_end":349928,"line_start":1161,"line_end":1161,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":352463,"byte_end":352472,"line_start":1219,"line_end":1219,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":353860,"byte_end":353869,"line_start":1256,"line_end":1256,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":355722,"byte_end":355731,"line_start":1306,"line_end":1306,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":356503,"byte_end":356512,"line_start":1331,"line_end":1331,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377738,"byte_end":377742,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385842,"byte_end":385846,"line_start":275,"line_end":275,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386708,"byte_end":386712,"line_start":300,"line_end":300,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388547,"byte_end":388551,"line_start":375,"line_end":375,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388631,"byte_end":388635,"line_start":376,"line_end":376,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388740,"byte_end":388744,"line_start":378,"line_end":378,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388864,"byte_end":388868,"line_start":384,"line_end":384,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388911,"byte_end":388915,"line_start":386,"line_end":386,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389067,"byte_end":389071,"line_start":392,"line_end":392,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389206,"byte_end":389210,"line_start":398,"line_end":398,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389349,"byte_end":389353,"line_start":404,"line_end":404,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389577,"byte_end":389581,"line_start":413,"line_end":413,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389802,"byte_end":389806,"line_start":422,"line_end":422,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389991,"byte_end":389995,"line_start":431,"line_end":431,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":390169,"byte_end":390173,"line_start":437,"line_end":437,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392757,"byte_end":392765,"line_start":73,"line_end":73,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398812,"byte_end":398820,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":399326,"byte_end":399334,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":399744,"byte_end":399752,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":400204,"byte_end":400212,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":400660,"byte_end":400668,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401106,"byte_end":401114,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401830,"byte_end":401838,"line_start":326,"line_end":326,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404530,"byte_end":404538,"line_start":386,"line_end":386,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":912},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408921,"byte_end":408929,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":410786,"byte_end":410794,"line_start":567,"line_end":567,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":411834,"byte_end":411842,"line_start":607,"line_end":607,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":411922,"byte_end":411930,"line_start":608,"line_end":608,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412039,"byte_end":412047,"line_start":610,"line_end":610,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412179,"byte_end":412187,"line_start":616,"line_end":616,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412260,"byte_end":412268,"line_start":618,"line_end":618,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413007,"byte_end":413015,"line_start":639,"line_end":639,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413162,"byte_end":413170,"line_start":645,"line_end":645,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413313,"byte_end":413321,"line_start":651,"line_end":651,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413557,"byte_end":413565,"line_start":660,"line_end":660,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413802,"byte_end":413810,"line_start":669,"line_end":669,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413999,"byte_end":414007,"line_start":678,"line_end":678,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414181,"byte_end":414189,"line_start":684,"line_end":684,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414382,"byte_end":414390,"line_start":693,"line_end":693,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414616,"byte_end":414624,"line_start":702,"line_end":702,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414869,"byte_end":414877,"line_start":711,"line_end":711,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":415529,"byte_end":415537,"line_start":731,"line_end":731,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":415736,"byte_end":415746,"line_start":738,"line_end":738,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485995,"byte_end":486010,"line_start":133,"line_end":133,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486100,"byte_end":486115,"line_start":139,"line_end":139,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486221,"byte_end":486236,"line_start":145,"line_end":145,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486261,"byte_end":486276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":493565,"byte_end":493575,"line_start":350,"line_end":350,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":494324,"byte_end":494334,"line_start":365,"line_end":365,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515242,"byte_end":515248,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515924,"byte_end":515930,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":584773,"byte_end":584781,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631125,"byte_end":631138,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631457,"byte_end":631470,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508594,"byte_end":508607,"line_start":697,"line_end":697,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":509457,"byte_end":509470,"line_start":719,"line_end":719,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":510359,"byte_end":510366,"line_start":751,"line_end":751,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647916,"byte_end":647917,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":651298,"byte_end":651306,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654768,"byte_end":654781,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":655360,"byte_end":655373,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25221,"byte_end":25228,"line_start":619,"line_end":619,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":29219,"byte_end":29226,"line_start":729,"line_end":729,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":29874,"byte_end":29881,"line_start":746,"line_end":746,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":30820,"byte_end":30837,"line_start":784,"line_end":784,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":21456,"byte_end":21462,"line_start":496,"line_end":496,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":22748,"byte_end":22754,"line_start":537,"line_end":537,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1012}},{"kind":"Mod","span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":507898,"byte_end":507906,"line_start":679,"line_end":679,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1305}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":46551,"byte_end":46562,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":47743,"byte_end":47754,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":50964,"byte_end":50975,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51437,"byte_end":51442,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51445,"byte_end":51450,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51458,"byte_end":51463,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":6183},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51753,"byte_end":51758,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/mod.rs","byte_start":51761,"byte_end":51766,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1604},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":66322,"byte_end":66333,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":68890,"byte_end":68901,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1457},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":69489,"byte_end":69500,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1457},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":69581,"byte_end":69592,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1457},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":70090,"byte_end":70101,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1457},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":70869,"byte_end":70878,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71066,"byte_end":71075,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71264,"byte_end":71277,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71473,"byte_end":71486,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71697,"byte_end":71705,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/fixed.rs","byte_start":71917,"byte_end":71925,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":75897,"byte_end":75902,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1472},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/local.rs","byte_start":76793,"byte_end":76798,"line_start":111,"line_end":111,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1472},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":81556,"byte_end":81559,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82348,"byte_end":82351,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1479},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82871,"byte_end":82874,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1479},"to":{"krate":0,"index":96}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":82970,"byte_end":82973,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/offset/utc.rs","byte_start":83089,"byte_end":83092,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":88887,"byte_end":88896,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":125294,"byte_end":125303,"line_start":1053,"line_end":1053,"column_start":19,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1490},"to":{"krate":0,"index":1393}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":137635,"byte_end":137644,"line_start":1420,"line_end":1420,"column_start":27,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":137863,"byte_end":137872,"line_start":1429,"line_end":1429,"column_start":33,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":139287,"byte_end":139296,"line_start":1462,"line_end":1462,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":139515,"byte_end":139524,"line_start":1471,"line_end":1471,"column_start":33,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":140780,"byte_end":140789,"line_start":1505,"line_end":1505,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":141782,"byte_end":141791,"line_start":1536,"line_end":1536,"column_start":21,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":143050,"byte_end":143059,"line_start":1571,"line_end":1571,"column_start":23,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/date.rs","byte_start":143661,"byte_end":143670,"line_start":1593,"line_end":1593,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":174248,"byte_end":174261,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":200715,"byte_end":200728,"line_start":703,"line_end":703,"column_start":19,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1513},"to":{"krate":0,"index":1393}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":211784,"byte_end":211797,"line_start":1021,"line_end":1021,"column_start":19,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1513},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":217993,"byte_end":218006,"line_start":1193,"line_end":1193,"column_start":21,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":6371}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":220621,"byte_end":220634,"line_start":1255,"line_end":1255,"column_start":27,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":220865,"byte_end":220878,"line_start":1264,"line_end":1264,"column_start":33,"column_end":46},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":223389,"byte_end":223402,"line_start":1325,"line_end":1325,"column_start":27,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":223633,"byte_end":223646,"line_start":1334,"line_end":1334,"column_start":33,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":225584,"byte_end":225597,"line_start":1387,"line_end":1387,"column_start":29,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":226805,"byte_end":226818,"line_start":1423,"line_end":1423,"column_start":21,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":227914,"byte_end":227927,"line_start":1454,"line_end":1454,"column_start":23,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/datetime.rs","byte_start":228665,"byte_end":228678,"line_start":1476,"line_end":1476,"column_start":23,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1513},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":272885,"byte_end":272894,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":273691,"byte_end":273700,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":281841,"byte_end":281843,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":283922,"byte_end":283924,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":284523,"byte_end":284526,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1567},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/internals.rs","byte_start":286489,"byte_end":286492,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1567},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":300715,"byte_end":300722,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/isoweek.rs","byte_start":303268,"byte_end":303275,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1583},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":312132,"byte_end":312141,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":336673,"byte_end":336682,"line_start":804,"line_end":804,"column_start":19,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1603},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":343911,"byte_end":343920,"line_start":1017,"line_end":1017,"column_start":21,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":6371}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":346927,"byte_end":346936,"line_start":1082,"line_end":1082,"column_start":27,"column_end":36},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":347117,"byte_end":347126,"line_start":1091,"line_end":1091,"column_start":33,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1999}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":349729,"byte_end":349738,"line_start":1152,"line_end":1152,"column_start":27,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":349919,"byte_end":349928,"line_start":1161,"line_end":1161,"column_start":33,"column_end":42},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":2003}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":352463,"byte_end":352472,"line_start":1219,"line_end":1219,"column_start":25,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":353860,"byte_end":353869,"line_start":1256,"line_end":1256,"column_start":21,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":355722,"byte_end":355731,"line_start":1306,"line_end":1306,"column_start":23,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/naive/time.rs","byte_start":356503,"byte_end":356512,"line_start":1331,"line_end":1331,"column_start":23,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1603},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":377738,"byte_end":377742,"line_start":55,"line_end":55,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":385842,"byte_end":385846,"line_start":275,"line_end":275,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":386708,"byte_end":386712,"line_start":300,"line_end":300,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1628},"to":{"krate":0,"index":1393}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388547,"byte_end":388551,"line_start":375,"line_end":375,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388631,"byte_end":388635,"line_start":376,"line_end":376,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388740,"byte_end":388744,"line_start":378,"line_end":378,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388864,"byte_end":388868,"line_start":384,"line_end":384,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":388911,"byte_end":388915,"line_start":386,"line_end":386,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389067,"byte_end":389071,"line_start":392,"line_end":392,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389206,"byte_end":389210,"line_start":398,"line_end":398,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":6371}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389349,"byte_end":389353,"line_start":404,"line_end":404,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389577,"byte_end":389581,"line_start":413,"line_end":413,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389802,"byte_end":389806,"line_start":422,"line_end":422,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":389991,"byte_end":389995,"line_start":431,"line_end":431,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/date.rs","byte_start":390169,"byte_end":390173,"line_start":437,"line_end":437,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":392757,"byte_end":392765,"line_start":73,"line_end":73,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":398812,"byte_end":398820,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":399326,"byte_end":399334,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":399744,"byte_end":399752,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":400204,"byte_end":400212,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":400660,"byte_end":400668,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401106,"byte_end":401114,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":401830,"byte_end":401838,"line_start":326,"line_end":326,"column_start":6,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":404530,"byte_end":404538,"line_start":386,"line_end":386,"column_start":20,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":408921,"byte_end":408929,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1659},"to":{"krate":0,"index":1393}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":410786,"byte_end":410794,"line_start":567,"line_end":567,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1659},"to":{"krate":0,"index":1412}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":411834,"byte_end":411842,"line_start":607,"line_end":607,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1913}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":411922,"byte_end":411930,"line_start":608,"line_end":608,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1903}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412039,"byte_end":412047,"line_start":610,"line_end":610,"column_start":64,"column_end":72},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412179,"byte_end":412187,"line_start":616,"line_end":616,"column_start":27,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":412260,"byte_end":412268,"line_start":618,"line_end":618,"column_start":65,"column_end":73},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413007,"byte_end":413015,"line_start":639,"line_end":639,"column_start":28,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413162,"byte_end":413170,"line_start":645,"line_end":645,"column_start":35,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":6371}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413313,"byte_end":413321,"line_start":651,"line_end":651,"column_start":41,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1968}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413557,"byte_end":413565,"line_start":660,"line_end":660,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413802,"byte_end":413810,"line_start":669,"line_end":669,"column_start":42,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1973}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":413999,"byte_end":414007,"line_start":678,"line_end":678,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414181,"byte_end":414189,"line_start":684,"line_end":684,"column_start":37,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414382,"byte_end":414390,"line_start":693,"line_end":693,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414616,"byte_end":414624,"line_start":702,"line_end":702,"column_start":23,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":414869,"byte_end":414877,"line_start":711,"line_end":711,"column_start":27,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":415529,"byte_end":415537,"line_start":731,"line_end":731,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/datetime.rs","byte_start":415736,"byte_end":415746,"line_start":738,"line_end":738,"column_start":43,"column_end":53},"kind":{"Impl":{"id":104}},"from":{"krate":1,"index":7752},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":485995,"byte_end":486010,"line_start":133,"line_end":133,"column_start":16,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1604}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486100,"byte_end":486115,"line_start":139,"line_end":139,"column_start":20,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1632}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486221,"byte_end":486236,"line_start":145,"line_end":145,"column_start":13,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1637}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":486261,"byte_end":486276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":493565,"byte_end":493575,"line_start":350,"line_end":350,"column_start":23,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1869},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":494324,"byte_end":494334,"line_start":365,"line_end":365,"column_start":16,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1869},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515242,"byte_end":515248,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1910},"to":{"krate":2,"index":1893}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parsed.rs","byte_start":515924,"byte_end":515930,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/parse.rs","byte_start":584773,"byte_end":584781,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1659},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631125,"byte_end":631138,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/strftime.rs","byte_start":631457,"byte_end":631470,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1941},"to":{"krate":2,"index":4972}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":508594,"byte_end":508607,"line_start":697,"line_end":697,"column_start":62,"column_end":75},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":509457,"byte_end":509470,"line_start":719,"line_end":719,"column_start":79,"column_end":92},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1960},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/format/mod.rs","byte_start":510359,"byte_end":510366,"line_start":751,"line_end":751,"column_start":18,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1987},"to":{"krate":2,"index":7706}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":647916,"byte_end":647917,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1360},"to":{"krate":0,"index":1356}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":649614,"byte_end":649619,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":1364}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":651298,"byte_end":651306,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1659},"to":{"krate":0,"index":1364}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":654768,"byte_end":654781,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1969},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/round.rs","byte_start":655360,"byte_end":655373,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1969},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":25221,"byte_end":25228,"line_start":619,"line_end":619,"column_start":6,"column_end":13},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1987},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":29219,"byte_end":29226,"line_start":729,"line_end":729,"column_start":23,"column_end":30},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1987},"to":{"krate":2,"index":6188}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":29874,"byte_end":29881,"line_start":746,"line_end":746,"column_start":36,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1987},"to":{"krate":18,"index":149}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":30820,"byte_end":30837,"line_start":784,"line_end":784,"column_start":21,"column_end":38},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2023},"to":{"krate":2,"index":6183}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":33844,"byte_end":33849,"line_start":896,"line_end":896,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":1393}},{"span":{"file_name":"/home/pi/.cargo/registry/src/github.com-1285ae84e5963aae/chrono-0.4.13/src/lib.rs","byte_start":38080,"byte_end":38085,"line_start":1014,"line_end":1014,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1908},"to":{"krate":0,"index":1412}}]}